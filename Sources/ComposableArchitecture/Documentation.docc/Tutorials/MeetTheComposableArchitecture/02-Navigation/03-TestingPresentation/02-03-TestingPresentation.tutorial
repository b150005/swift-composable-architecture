@Tutorial(time: 40) {
  @Intro(title: "画面表示のテスト") {
    TCA ライブラリの画面遷移ツールを使用して構築した機能のテストコードを記述する方法を紹介します。
    このチュートリアルでは、複数機能の統合と通信方法も合わせて紹介します。
  }

  @Section(title: "連絡先追加フローのテスト") {
    @ContentAndMedia {
      まずは連絡先追加画面のテストコードを記述します。
      ユーザが "+" ボタンをタップして連絡先追加画面を表示し、テキストフィールドに連絡先を入力した後 "Save" ボタンをタップするとシートが閉じられ、連絡先が連絡先リストに追加される一連のユーザフローをエミュレートします。
    }

    @Steps {
      @Step {
        テストターゲットに `ContactsFeatureTests.swift` を追加し、テストの基本的な土台を作成します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0000.swift)
      }

      @Step {
        機能が開始すべき初期状態と、テスト対象のレデューサーを提供して、テストストアを構築します。

        > Note: テストに関する詳細なチュートリアルについては <doc:01-03-TestingYourFeature> と <doc:Testing> を参照してください。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0001.swift)
      }

      @Step {
        `addButtonTapped` アクションを送信し、ユーザが "+" ボタンをタップしたことをエミュレートします。
        Trailing closure でアクション送信後の状態の変化を検査します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0002.swift)
      }

      @Step {
        ここでは `destination` が `Destination` 列挙型の `addContact` ケースでセットされることを期待しています。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0003.swift)
      }

      @Step {
        `addContact` ケースは `AddContactFeature.State` を保持します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0004.swift)
      }

      @Step {
        `AddContactFeature.State` を構築するには `Contact` の初期化が必要ですが、 ID の値が予測できません。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0005.swift)
      }

      `ContactsFeature` は制御されていない依存関係(= ランダムな UUID)を使用しているため、テストが困難になっています。
      そこで、前のセクション <doc:01-03-TestingYourFeature> で行ったように UUID ジェネレータの依存関係を `ContactsFeature` に追加します。

      @Step {
        `ContactsFeature.swift` に戻り、 UUID ジェネレータの依存関係を追加します。

        @Code(name: "ContactsFeature.swift", file: 02-03-01-code-0006.swift, previousFile: 02-03-01-code-0006-previous.swift)
      }

      @Step {
        制御不能な UUID イニシャライザを使用する代わりに、追加した UUID 依存関係を使用します。

        @Code(name: "ContactsFeature.swift", file: 02-03-01-code-0007.swift)
      }

      @Step {
        `ContactsFeatureTests.swift` に戻り、 TestStore の依存関係をオーバーライドして制御可能な UUID ジェネレータを使用するようにします。
        ここでは、0から始まり連続的に増加する ID を生成する `incrementing` ジェネレータを使用します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0008.swift, previousFile: 02-03-01-code-0008-previous.swift)
      }

      @Step {
        これで連絡先の作成時に生成される UUID を予測できるようになりました。

        > Note: 整数を UUID として保持する UUID イニシャライザは TCA が依存する [swift-dependencies][swift-dependencies] ライブラリによって提供されています。

        [swift-dependencies]: http://github.com/pointfreeco/swift-dependencies

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0009.swift)
      }

      このテストがパスするようになり、 "+" ボタンのタップ時に連絡先追加シートが表示されることが検証できました。
      他のユーザフローについてもテストコードを記述していきます。

      @Step {
        次は、連絡先名称のテキストフィールドへのユーザ入力をエミュレートします。
        Trailing closure でアクション送信後の状態の変化を検証します。

        > Tip: アクションのペイロードは KeyPath 構文の第2引数で送信できます。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0010.swift)
      }

      @Step {
        チェーンによって Destination 列挙型の `addContact` ケースに関連する状態を変更することで状態の変化を検査します。

        > Tip: チェーンによって列挙型の関連値を変更するには列挙型に `@CasePathable` と `@dynamicMemberLookup` アノテーションが必要ですが、 `@Reducer` マクロは自動的にこれらのアノテーションを列挙型の `State` に適用します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0011.swift)
      }

      @Step {
        連絡先追加機能でユーザによる "Save" ボタンのタップをエミュレートします。
        このアクションでは即時的な状態の変化は期待していないため、 Trailing closure を記述する必要はありません。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0012.swift)
      }

      @Step {
        "Save" ボタンタップ時に `AddContactFeature` から送信される `saveContact` デリゲートアクションを TestStore が受信することをエミュレートします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0013.swift)
      }

      @Step {
        デリゲートアクション受信時に配列に連絡先が追加されることを検査します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0014.swift)
      }

      @Step {
        `AddContactFeature.Action.Delegate` に `@CasePathable` アノテーションを付与して KeyPath 構文による `saveContact` デリゲートアクションを受信できるようにします。

        @Code(name: "ContactsFeature.swift", file: 02-03-01-code-0015.swift, previousFile: 02-03-01-code-0015-previous.swift)
      }

      @Step {
        これで `saveContact` ケースのペイロードを検査できるようになりました。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0016.swift, previousFile: 02-03-01-code-0014.swift)
      }

      @Step {
        最後に、 TestStore が ``ComposableArchitecture/PresentationAction/dismiss`` アクションを受信することを検査します。
        これにより、連絡先追加画面が閉じられます。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-01-code-0017.swift)
      }

      子機能を表示し、子機能で入力された値をエミュレートし、子機能が親機能に通信するという一連のライフサイクルを検証しました。
      しかし、このテストは連絡先追加機能の一連の動作をすべて検査しているという点で冗長的であり、子機能の表示と非表示だけを検査したい場合は「非網羅的テスト」と呼ばれるツールが利用可能です。
    }
  }

  @Section(title: "非網羅的テスト") {
    @ContentAndMedia {
      子機能のすべての振る舞いをテストするために、 Store が受信するすべての Effect を検査する必要がありました。
      画面遷移のある機能など、1つに統合された複数の機能テストする場合、非網羅的な方法でテストコードを記述することが有用な場合があります。

      非網羅的テストの詳細については <doc:Testing#Non-exhaustive-testing> を参照してください。
    }

    @Steps {
      @Step {
        前のセクションと同じ連絡先追加機能のユーザフローの非網羅的なテストコードを記述します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0000.swift)
      }

      @Step {
        ただし、今回は TestStore の ``ComposableArchitecture/TestStore/exhaustivity`` を `.off` にセットします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0001.swift)
      }

      @Step {
        連絡先リスト画面でのユーザの "+" ボタンのタップをエミュレートしますが、非網羅的な TestStore では状態の変化を検査しなくてよいため、 Trailing closure は記述しません。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0002.swift)
      }

      @Step {
        ユーザによる連絡先名称のテキストフィールドへの入力をエミュレートしますが、ここでも状態の変化は検査しません。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0003.swift)
      }

      @Step {
        ユーザによる連絡先追加画面の "Save" ボタンのタップをエミュレートします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0004.swift)
      }

      @Step {
        次に、ユーザが "Save" ボタンをタップして連絡先が配列に追加され、連絡先追加画面が閉じられることを検査したいのですが、すべてのアクションの受信を待機する必要があります。
        そこで、 ``ComposableArchitecture/TestStore/skipReceivedActions(strict:fileID:file:line:column:)`` を使用することで、中間アクションをスキップすることができます。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0005.swift)
      }

      @Step {
        最終的な状態が、ユーザによって入力された連絡先が配列に追加され、 `destination` が `nil` でセットされていることを検査します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-02-code-0006.swift)
      }

      連絡先リストに連絡先を追加するユーザフローをカバーする高次元なテストを記述しました。
      子機能のすべての詳細な振る舞いを検査するのではなく、ユーザが一連のフローを完了した後に連絡先が追加されたことを検査するだけです。
    }
  }

  @Section(title: "連絡先削除フローのテスト") {
    @ContentAndMedia {
      最後は連絡先の削除フローのテストコードを記述します。
      ゴミ箱ボタンをタップするとアラートが表示され、アラートを通じて削除を確認し、最終的に連絡先が削除されたことを確認する一連のユーザフローをエミュレートします。
    }

    @Steps {
      @Step {
        連絡先の削除フローをテストするためのテストメソッドを宣言します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0000.swift)
      }

      @Step {
        `ContactsFeature` Reducer をテストするための ``ComposableArchitecture/TestStore`` を構築します。
        今回は使用する依存関係がないため、依存関係をオーバーライドする必要はありません。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0001.swift)
      }

      @Step {
        TestStore の初期状態として、いくつかの連絡先が配列に追加されたスタブをセットすることで、テストを簡潔にします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0002.swift)
      }

      @Step {
        `deleteButtonTapped` アクションを送信し、ユーザがゴミ箱ボタンをタップしたことをエミュレートします。
        今回は、2番目の連絡先(ID: `UUID(1)`)を削除することにします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0003.swift)
      }

      @Step {
        アラートを表示するので、 `destination` が `alert` でセットします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0004.swift)
      }

      @Step {
        技術的には Reducer でアラートを定義した時と同じ構造のテストコードになり、テストもパスします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0005.swift)
      }

      しかし、 Reducer で定義したアラートが繰り返され、冗長的になってしまいます。

      @Step {
        `ContactsFeature.swift` に戻り、 Reducer を実装した部分に移動します。
        `AlertState` を拡張し、その `Action` に `ContactsFeature.Action` の型制約を追加します。
        アラートを構築する静的関数を追加し、このロジックを複数箇所で再利用できるようにします。

        @Code(name: "ContactsFeature.swift", file: 02-03-03-code-0006.swift)
      }

      @Step {
        `ContactsFeature` Reducer で `AlertState` を構築する代わりに、追加した `deleteConfirmation` 静的関数を呼び出します。

        @Code(name: "ContactsFeature.swift", file: 02-03-03-code-0007.swift, previousFile: 02-03-03-code-0007-previous.swift)
      }

      @Step {
        `ContactsFeatureTests.swift` に戻り、ここでも同様に追加した `deleteConfirmation` 静的関数を呼び出すようにします。

        ゴミ箱ボタンのタップ時にユーザにアラートが表示されることを検査するテストがパスするようになりました。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0008.swift, previousFile: 02-03-03-code-0008-previous.swift)
      }

      @Step {
        アラート経由で `confirmDeletion` アクションを送信することで、ユーザが連絡先が削除されるのを確認したことをエミュレートします。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0009.swift)
      }

      @Step {
        連絡先の削除確認後、アラートが閉じられ、 ID が `UUID(1)` の連絡先が削除されたことを検査します。

        @Code(name: "ContactsFeatureTests.swift", file: 02-03-03-code-0010.swift)
      }

      これで一連の連絡先削除フローのテストが完了しました。
    }
  }
}
