@Tutorial(time: 30) {
  @Intro(title: "ナビゲーションスタック") {
    前のセクションで構築した連絡先アプリケーションの Root ビューにナビゲーションスタックを追加し、連絡先詳細画面に遷移できるようにします。
  }

  @Section(title: "連絡先詳細機能") {
    @ContentAndMedia {
      Root ビューである連絡先リスト画面から下のビュー階層に遷移できる連絡先詳細機能を追加します。
    }

    @Steps {
      @Step {
        `ContactDetailFeature.swift` という新しいファイルを作成して TCA ライブラリをインポートし、 ``ComposableArchitecture/Reducer()`` マクロを付与したスタブの Reducer を記述します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0000.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer`` プロトコルの要件を満たすために ``ComposableArchitecture/Reducer/State`` 構造体を追加します。
        現在必要な状態は連絡先のみで、連絡先詳細画面からは連絡先を変更しないため `let` で宣言します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0001.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer`` プロトコルの要件を満たすために ``ComposableArchitecture/Reducer/Action`` 列挙型を追加します。
        連絡先詳細機能で実行するアクションは今のところないため、空のままにします。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0002.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer`` プロトコルの要件を満たすために、基本的な ``ComposableArchitecture/Reducer/body-20w8t`` プロパティを実装します。
        連絡先詳細機能にはアクションがなく Reducer で何も処理しないため、後で追記するようにします。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0003.swift)
      }

      @Step {
        `ContactDetailView` のスタブを作成します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0004.swift, reset: true)
      }

      @Step {
        ビューは `ContactDetailFeature` ドメインの ``ComposableArchitecture/Store`` を保持し、連絡先詳細機能の状態の変更を監視しアクションを送信するようにします。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0005.swift)
      }

      @Step {
        基本的なフォームのスタブを作成します。
        連絡先名称以外に表示する情報は今のところないので、後で追記します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0006.swift)
      }

      @Step {
        プレビューで現在のビューを確認します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-01-code-0007.swift) {
          @Image(source: ch02-sub04-sec01-image-0000)
        }
      }

      ナビゲーションスタックに画面をプッシュする基本的な機能が必要になりました。
    }
  }

  @Section(title: "連絡先詳細画面への遷移") {
    @ContentAndMedia {
      連絡先詳細機能を追加したので、メインである連絡先リスト画面から連絡先詳細画面へ遷移できるようにしましょう。
    }

    @Steps {
      @Step {
        `ContactsFeature.swift` に移動し、 State に現在ナビゲーションスタックにプッシュされている機能の ``ComposableArchitecture/StackState`` 型のジェネリックを追加します。

        > Note: ``ComposableArchitecture/StackState`` 型は TCA でナビゲーションスタックをアプリケーションに統合しやすくなっています。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0000.swift, previousFile: 02-04-02-code-0000-previous.swift) 
      }

      @Step {
        Action 列挙型に ``ComposableArchitecture/StackAction`` を保持するケースを追加します。
        これは、ナビゲーションスタック内で発生するアクション(要素のプッシュやポップ、ナビゲーションスタック内の特定機能で発生するアクションなど)を表します。

        また、 Reducer で追加した `.path` ケースを処理し、 ``ComposableArchitecture/Effect/none`` Effect を返します。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0001.swift) 
      }

      @Step {
        Reducer の最後で ``ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb`` 演算子を使用して、 `ContactDetailFeature` を`ContactsFeature` のナビゲーションスタックに統合します。

        > Tip: コードスニペットの一番下までスクロールすると `forEach` 演算子の応用例を参照できます。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0002.swift) 
      }

      @Step {
        連絡先リスト画面を定義する `ContactsView` に戻ります。
        `NavigationStack` を ``SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)`` に置き換えます。
        これは ``ComposableArchitecture/Store`` を持つナビゲーションスタックを動作させるためのイニシャライザです。

        ``ComposableArchitecture/StackState`` と ``ComposableArchitecture/StackAction`` にスコープを限定した Store へのバインドを渡すだけで、他は自動的に処理されます。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0003.swift, previousFile: 02-04-02-code-0003-previous.swift) 
      }

      @Step {
        ``SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)`` は2つの Trailing closure を取り、ナビゲーションスタックの単一要素のドメインに限定した Store で処理されます。
        1つ目にはナビゲーションスタックの Root ビュー(連絡先リスト画面)、2つ目は遷移先ビューを記述します。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0004.swift) 
      }

      @Step {
        連絡先リストの各行を TCA ライブラリが提供する `NavigationLink` の ``SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)`` イニシャライザでラップします。
        また、各行にゴミ箱ボタンを配置できるように `.borderless` ボタンスタイルを適用しています。

        > Warning: SwiftUI の `NavigationLink` の `init(value:)` イニシャライザではなく、 TCA ライブラリの ``SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)`` イニシャライザを使用する必要があります。

        @Code(name: "ContactsFeature.swift", file: 02-04-02-code-0005.swift, previousFile: 02-04-02-code-0005-previous.swift) 
      }

      @Step {
        アプリケーションを実行し、連絡先リストの1つ下のビュー階層に遷移できることを確認します。

        @Video(source: ch02-sub04-sec01-video-0000) 
      }
    }
  }

  @Section(title: "連絡先の削除") {
    @ContentAndMedia {
      連絡先アプリに連絡先詳細機能を追加しましたが、まだ連絡先詳細画面と連絡先リスト画面間に相互作用がありません。
      詳細画面から連絡先を削除できるようにしましょう。
      <doc:02-02-MultipleDestinations> と同様に、まずはユーザにアラートを表示して削除確認を求めるようにします。
    }

    @Steps {
      @Step {
        `ContactDetailFeature.swift` に移動し、 Reducer とビューに機能を追加します。
        まず、アラートを表示するためのオプショナルな ``ComposableArchitecture/PresentationState`` を追加します。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-03-code-0000.swift, previousFile: 02-04-03-code-0000-previous.swift) 
      }

      @Step {
        `ContactDetailFeature.Action` にゴミ箱ボタンのタップ、アラート内アクション、親機能に連絡先の削除を指示するためのデリゲートアクションといった UI 上でユーザが実行できるすべてのアクションを追加します。

        > Note: 理由は後述しますが、アラートとデリゲートアクションには以前のように連絡先 ID を持たせる必要はありません。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-03-code-0001.swift) 
      }

      @Step {
        `body` プロパティで受信アクションに応じたロジックを実装します。
        これは <doc:02-02-MultipleDestinations> で行ったことと類似しており、削除確認時は親機能にデリゲートアクションを送信し、 ``ComposableArchitecture/DismissEffect`` 依存関係を使用して連絡先詳細画面を閉じます。
        また、アラート状態を独自のヘルパー関数でセットすることでテスタビリティを向上させています。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-03-code-0002.swift) 
      }

      @Step {
        `ContactDetailView` 構造体に移動し、連絡先の削除ボタンを追加します。
        また、 `alert(store:)` ビュー修飾子を使用して `alert` の状態が `nil` でない値に変更されたときにアラートを表示するようにします。

        @Code(name: "ContactDetailFeature.swift", file: 02-04-03-code-0003.swift, previousFile: 02-04-03-code-0003-previous.swift)
      }

      @Step {
        `ContactsFeature.swift` に移動し `.path` アクションを通じてナビゲーションスタックに含まれる各階層の状態を取得することができます。
        ここでは `.delegate(.confirmDeletion)` アクション受信時に配列から連絡先を削除するようにしています。

        @Code(name: "ContactsFeature.swift", file: 02-04-03-code-0004.swift, previousFile: 02-04-03-code-0004-previous.swift) 
      }

      @Step {
        プレビューを実行して、アプリケーションが期待通りに動作することを確認します。
        連絡先詳細画面に遷移し、ゴミ箱ボタンをタップして削除確認を行うと、連絡先詳細画面がナビゲーションスタックからポップされ、連絡先はリストから削除されます。

        @Video(source: "ch02-sub04-sec03-video-0000") 
      }
    }
  }
}
