@Tutorial(time: 30) {
  @Intro(title: "最初の画面表示") {
    TCA は親機能から子機能を提示するのに役立つ様々なツールを提供しています。
    まず、オプショナルな状態を扱う機能について紹介します。
  }

  @Section(title: "プロジェクトのセットアップ") {
    @ContentAndMedia {
      連絡先リストを Root ビューに表示するアプリケーションを作成し、新しく連絡先を追加できる機能を追加します。
      "+" ボタンをタップすると連絡先情報を入力するシートを表示し、ボタンがタップされるとシートを閉じ、連絡先をリストに追加します。

      @Image(source: "ch02-sub01-sec01-image-0001")
    }

    @Steps {
      @Step {
        `ContactsFeature.swift` という新しいファイルを作成し、連絡先機能の土台を作ります。
        `Contact` データモデル、連絡先のコレクションを持つ Reducer 、 "+" ボタンタップ時の単一アクションは定義していますが、 Action に紐づくロジックは未実装です。

        > Note: 後でテストするために `State` を `Equatable` プロトコルに準拠させています。

        @Code(name: "ContactsFeature.swift", file: 02-01-01-code-0000.swift)
      }

      @Step {
        `ContactsFeature` の ``ComposableArchitecture/Store``を保持し、 Store を監視して連絡先リストを表示し、 Action を送信するビューを追加します。

        @Code(name: "ContactsFeature.swift", file: 02-01-01-code-0001.swift, reset: true)
      }

      @Step {
        連絡先のスタブを初期状態に指定することで、プレビューで機能を確認します。

        @Code(name: "ContactsFeature.swift", file: 02-01-01-code-0002.swift, reset: true) {
          @Image(source: "ch02-sub01-sec01-image-0001")
        }
      }

      @Step {
        `AddContactFeature.swift` ファイルを作成し、新しい連絡先の入力機能の Reducer とビューを定義します。
        この機能には、連絡先の入力シートを閉じる "Cancel" ボタンと、親ビューの連絡先リストに連絡先を追加し、入力シートを閉じる "Save" ボタンを定義します。

        > Note: `cancelButtonTapped` と `saveButtonTapped` アクションを受け取った際の振る舞いは後で実装します。

        @Code(name: "AddContactFeature.swift", file: 02-01-01-code-0003.swift, reset: true)
      }

      @Step {
        `AddContactFeature` の ``ComposableArchitecture/Store`` を保持するビューを追加します。
        SwiftUI の `@Bindable` プロパティラッパーを用いて、ビューに配置する TextField と Store で値をバインドできるようにします。

        > Note: ターゲットとするプラットフォームが古く `@Bindable` を使用できない場合は TCA ライブラリの `@Perception.Bindable` を使用してください。

        @Code(name: "AddContactFeature.swift", file: 02-01-01-code-0004.swift, reset: true)
      }

      @Step {
        連絡先を編集するための TextField を配置した Form をビューに追加します。
        `$store` の Dynamic Member Lookup を用いてビューとバインドさせる Store の状態を指定し、 `sending` メソッドで値が入力された時に送信するアクションを指定します。

        > Note: TCA のバインド機構については <doc:Bindings> を参照してください。

        @Code(name: "AddContactFeature.swift", file: 02-01-01-code-0005.swift)
      }

      @Step {
        ビューに "Save" ボタンと "Cancel" ボタンを追加し、ボタンタップ時に送信するアクションを指定します。

        @Code(name: "AddContactFeature.swift", file: 02-01-01-code-0006.swift)
      }

      @Step {
        プレビューを追加し、動作を確認します。

        @Code(name: "AddContactFeature.swift", file: 02-01-01-code-0007.swift, reset: true) {
          @Image(source: "ch02-sub01-sec01-image-0002")
        }
      }
    }
  }

  @Section(title: "Reducer の統合") {
    @ContentAndMedia {
      連絡先の表示と入力という、2つの独立した機能を構築したので連絡先リスト画面から連絡先追加画面に遷移できるように Reducer を統合しましょう。
      ``ComposableArchitecture/Presents()`` と ``ComposableArchitecture/PresentationAction`` を用いたドメイン(State と Action)の統合と、 Reducer の ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` 演算子を用いた Reducer の統合が必要です。
    }

    @Steps {
      @Step {
        まずはドメインを統合します。
        連絡先リストのロジックと振る舞いを定義する `ContactsFeature` Reducer を記述した `ContactsFeature.swift` ファイルに戻りましょう。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0000.swift)
      }

      @Step {
        まず、2つの機能の State を統合するために ``ComposableArchitecture/Presents()`` マクロを用いてオプショナルな状態を定義します。

        連絡先追加画面が表示されていない場合は `nil` 、 表示されている場合は `nil` でない値をセットします。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0001.swift)
      }

      @Step {
        次は、 Action を統合するために ``ComposableArchitecture/PresentationAction`` を保持するケースを追加します。

        親機能は、子機能から送信されるすべての Action を監視できるようになりました。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0002.swift)
      }

      @Step {
        Action 列挙型にケースを追加したので、親 Reducer では新しく追加した Action を処理する必要があります。
        現時点では何もせず`.none`を返すようにしていますが、ロジックは後で追加します。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0003.swift)
      }

      @Step {
        最後に、 Reducer を統合するために ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` 演算子を使用します。

        システムが子 Action を受信した場合は子 Reducer を実行し、すべてのアクションで親 Reducer を実行する単一の Reducer を定義しました。
        この演算子は、子機能のビューが閉じられた場合は Effect をキャンセルするなど、多くのことを自動的に処理します。
        詳細については、ドキュメントを参照してください。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0004.swift)
      }

      2つの機能のドメインと Reducer を1つに統合したため、連絡先追加画面の表示と非表示が簡単に実装できるようになりました。
      ここで、ビューの実装に移る前にライブラリが提供する機能について紹介します。

      @Step {
        連絡先リスト画面で "+" ボタンがタップされたときに連絡先追加画面を表示するため、 `addContact` に状態をセットします。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0005.swift)
      }

      @Step {
        連絡先追加画面で "Cancel" ボタンがタップされたときは、 `addContact` に `nil` をセットして画面を閉じます。

        > Note: 連絡先追加機能の Action を受信するために ``ComposableArchitecture/PresentationAction/presented(_:)`` ケースを経由しています。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0006.swift)
      }

      @Step {
        連絡先追加画面で "Save" ボタンがタップされたときは画面を閉じ、入力された連絡先を `ContactsFeature.State` で保持する連絡先のコレクションに追加します。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0007.swift)
      }

      親機能で子機能の状態を定義することで画面遷移を表現し、子 Action を受信して親子機能間でやり取りができるようになりました。
      では、親機能と子機能のビューを統合していきましょう。
    }
  }

  @Section(title: "ビューの統合") {
    @ContentAndMedia {
      `ContactsView` から `AddContactView` を表示するように変更します。
    }

    @Steps {
      @Step {
        現在の連絡先リストのビューは各行に連絡先を表示するシンプルなリストで、ナビゲーションタイトルとツールバーを表示しています。
        `addContact` に `nil` 以外の値がセットされた場合はシートを表示するようにします。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0008.swift, reset: true)
      }

      TCA ライブラリには SwiftUI ネイティブの画面遷移ツール(Sheet, Popover, 全画面表示, Alert, 確認ダイアログなど)を模倣した様々なツールが用意されており、 ``ComposableArchitecture/Store``を用いて Reducer とビューをバインドする Store を定義します。

      @Step {
        `@Bindable` プロパティラッパーを用いてビューに Store をバインドできるようにし、子機能の `addContact` にスコープを絞った Store を `sheet(item:)` ビュー修飾子に渡します。
        親 Reducer の `addContact` に `nil` 以外の値がセットされると、子機能の `AddContactFeature` ドメインにスコープが限定された Store が `AddContactView` に渡されます。

        > Note: 古いプラットフォームをターゲットにしていて `@Bindable` を使用できない場合は TCA ライブラリが提供する `@Perception.Bindable` を使用してください。

        @Code(name: "ContactsFeature.swift", file: 02-01-02-code-0009.swift)
      }

      @Step {
        プレビューで期待通りに動作することを確認します。
        "+" ボタンをタップすると "AddContactFeature" のシートが表示され、 "Save" ボタンをタップすると新しい連絡先がリストに追加され、 "Cancel" ボタンをタップした場合は連絡先が追加されません。

        @Video(source: "ch02-sub01-sec03-image-0000") 
      }
    }
  }

  @Section(title: "子から親への通信") {
    @ContentAndMedia {
      前のセクションでは、親 Reducer が子 Reducer から送信された Action(子画面の "Save" ボタンと "Cancel" ボタンのタップ) に応じてロジックを分岐していました。
      しかし、子機能から送信される Action に対して、親機能が取り扱う状態や自身のロジックを予想して処理を行っている点には改善の余地があります。

      デリゲートアクションを用いて、子機能が親機能に直接処理を指示できるようにしましょう。
    }

    @Steps {
      @Step {
        `AddContactFeature.swift` に移動し、 `AddContactFeature` に `Delegate` 列挙型を追加し、親機能に送信するすべてのアクションを記述します。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0000.swift, previousFile: 02-01-04-code-0000-previous.swift)
      }

      > Important: 他にも [`@Shared`](<doc:Shared>) プロパティラッパーを用いて親ドメインの状態(連絡先コレクション)を子ドメインが直接操作できるようにする方法があります。
      > デリゲートアクションは子ドメインから親ドメインに通信するための最も一般的な方法なので、このチュートリアルではデリゲートアクションを使用しています。
      > `@Shared`についての詳細は <doc:SharingState> を参照し、チュートリアル <doc:BuildingSyncUps> の <doc:EditingAndDeletingSyncUp#Deleting-the-sync-up> セクションを参照してください。

      @Step {
        子 Reducer の `delegate` ケースではロジックを実行せず、親 Reducer で `delegate` アクションを処理するようにします。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0001.swift)
      }

      @Step {
        子機能は、親に対して即時的かつ同期的にデリゲートアクションを送信する Effect を返すようにします。
        例えば、 "Save" ボタンがタップされたときは `saveContact` アクションを送信します。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0002.swift)
      }

      @Step {
        `ContactsFeature.swift` に戻り、 "Cancel" ボタンと "Save" ボタンのタップ時に送信されるデリゲートアクションを受信するように親 Reducer を修正します。

        @Code(name: "ContactsFeature.swift", file: 02-01-04-code-0003.swift, previousFile: 02-01-04-code-0003-previous.swift)
      }

      これで子機能は親に伝える子自身の状態と振る舞いを正確に記述できるようになりましたが、まだ改善の余地があります。
      "Cancel" ボタンをタップしたときのように、子機能が自身の画面を閉じるのは非常に一般的なケースであり、それを親に伝えるためだけにデリゲートアクションを定義するのは冗長なので、 TCA ライブラリには特別なツールが用意されています。

      @Step {
        `AddContactFeature.swift` に戻り、親機能と直接通信することなく子機能が自身を閉じることを可能にする ``ComposableArchitecture/DismissEffect`` の依存関係を追加します。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0004.swift, previousFile: 02-01-04-code-0004-previous.swift)
      }

      @Step {
        `dismiss` 依存関係を呼び出す Effect を実行することで、親 Reducer に ``ComposableArchitecture/PresentationAction/dismiss`` アクションが送信され、子画面を表示している状態が初期化されます。

        > Note: `dismiss` 依存関係は非同期であるため、 Effect 内で呼び出します。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0005.swift)
      }

      @Step {
        ``ComposableArchitecture/DismissEffect`` によって親 Reducer に子画面を閉じる旨を明示的に伝える必要がなくなったため、 `Delegate` 列挙型から `cancel` アクションを削除します。

        @Code(name: "AddContactFeature.swift", file: 02-01-04-code-0006.swift)
      }

      @Step {
        `ContactsFeature.swift` に戻り、 `ContactsFeature` Reducer から `cancel` ロジックと `addContact` を明示的に `nil` で初期化していた部分を削除します。

        @Code(name: "ContactsFeature.swift", file: 02-01-04-code-0007.swift, previousFile: 02-01-04-code-0007-previous.swift)
      }
    }
  }
}
