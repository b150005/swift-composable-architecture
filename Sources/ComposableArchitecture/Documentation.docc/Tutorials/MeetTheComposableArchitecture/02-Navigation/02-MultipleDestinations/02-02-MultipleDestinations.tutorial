@Tutorial(time: 30) {
  @Intro(title: "複数の画面遷移") {
    前のセクションでは、親機能で子機能を表示するためにドメインをモデル化しましたが、今回はより多くの子機能を表示してみます。
  }

  @Section(title: "連絡先の削除") {
    @ContentAndMedia {
      連絡先リストに連絡先を削除できる機能を追加します。ここで、削除確認にはアラートを使用します。
      前のセクションで使用した ``ComposableArchitecture/Presents()`` 、 ``ComposableArchitecture/PresentationAction`` 、 ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` はオプショナルの状態に基づいてアラートを表示する場合にも使えます。
    }

    @Steps {
      @Step {
        前のセクションで使用した `ContactsFeature.swift` に戻ります。
        連絡先リストの各行で削除ボタンがタップされたときに送信する Action を追加します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0000.swift, previousFile: 02-02-01-code-0000-previous.swift)
      }

      削除ボタンタップ時に連絡先の削除を確認するためのアラートを表示します。

      @Step {
        `ContactsFeature` に ``ComposableArchitecture/Presents()`` を用いてオプショナルな State を追加します。
        `AlertState` は `Equatable` に準拠しているため、テストに適しています。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0001.swift)
      }

      @Step {
        `ContactsFeature` の Action に ``ComposableArchitecture/PresentationAction`` を用いてアラートで生じる Action を列挙します。

        > Note: アラートに表示する選択肢はキャンセルまたは削除の2つですが、キャンセルアクションは自動的に処理されるため、モデル化する必要はありません。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0002.swift)
      }

      アラートを表示するための状態をドメインに追加したので、 `deleteButtonTapped` アクションを実装していきます。

      @Step {
        削除ボタンがタップされたとき、連絡先を削除するか確認するために `alert` をセットします。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0003.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` 演算子を使用して、アラート機能のロジックを `ContactsFeature` に統合します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0004.swift)
      }

      @Step {
        アラートから送信された削除確認アクションを親機能で受信した時点で配列から要素を削除します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0005.swift)
      }

      ここまでアラート機能を `ContactsFeature` に統合しましたが、今度はアラートを親ビューに統合していきます。
      TCA ライブラリでは ``ComposableArchitecture/Store`` に最適化された ``SwiftUI/View/alert(store:)`` ビュー修飾子を提供しています。

      @Step {
        `ContactsView` に ``SwiftUI/View/alert(_:)`` ビュー修飾子を追加し、アラートドメインにスコープを限定した Store を渡します。

        > Note: `$store.scope` 構文を使用するには、ビューで `@Bindable` プロパティラッパーを用いて Store を定義します。
        > 古いプラットフォームをターゲットにしており `@Bindable` プロパティラッパーが使えない場合は TCA ライブラリが提供する `@Perception.Bindable` を使用してください。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0006.swift, previousFile: 02-02-01-code-0006-previous.swift)
      }

      @Step {
        連絡先リストの各行に `deleteButtonTapped` アクションを Store に送信するボタンを追加します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-01-code-0007.swift)
      }

      @Step {
        プレビューで連絡先の削除が動作することを確認します。
        ゴミ箱ボタンをタップするとアラートが表示され、確認ボタンをタップすると連絡先リストから連絡先が削除されます。

        @Video(source: "ch02-sub02-sec01-0000")
      }

      連絡先の削除機能を追加しましたが、ドメインモデルにはまだ簡潔に定義できる余地があります。
    }
  }

  @Section(title: "ドメインモデルの改善") {
    @ContentAndMedia {
      現在、 `ContactsFeature` は連絡先追加シートまたは削除アラートのどちらかに遷移することができます。
      両方の機能に同時に遷移することはできないはずですが、現在はそれぞれを ``ComposableArchitecture/Presents()`` のオプショナルな State として定義しているため、同時に遷移できるようになっています。

      遷移可能な子機能をオプショナルな State として定義してしまうと、無効な State が指数関数的に増加します。
      不正確なドメインモデルはどの機能が表示されているか不明瞭であるため、アプリケーションに複雑さをもたらします。

      複数の画面に対する画面遷移をより簡潔にモデル化していきましょう。
    }

    @Steps {
      @Step {
        `ContactsFeature` 内部に `Destination` Reducer を定義し、連絡先リスト機能から遷移可能なすべての機能のドメインとロジックを列挙型で定義します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0000.swift)
      }

      @Step {
        連絡先追加機能のケースを追加します。
        ここで重要なのが、 State ではなく `AddContactFeature` Reducer をケースのパラメータとして定義している点です。
        ``ComposableArchitecture/Reducer()`` マクロは Reducer プロトコルのすべての要件を自動的に満たしてくれます。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0001.swift)
      }

      @Step {
        `Destination` にアラート機能で表示するアラートの状態をケースとして追加します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0002.swift)
      }

      複数の相互排他的な Reducer を組み合わせた単一の Reducer に統合しました。
      Xcode でマクロを展開すると、すべてのソースコードを見ることができます。
      将来的にこの機能を別の機能に遷移させる場合でも `Destination` 列挙型にケースを追加するだけです。

      @Step {
        2つのオプショナルな ``ComposableArchitecture/Presents()`` でラップされたプロパティを単一のオプショナルな `Destination.State` に置き換えます。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0003.swift, previousFile: 02-02-02-code-0003-previous.swift)
      }

      `Destination.State` は `Equatable` ではなく [`@Reducer`](<doc:ComposableArchitecture/Reducer()>) マクロによって生成されているため、 `ContactsFeature.State` が `Equatable` の制約を満たしていないというコンパイルエラーが発生します。

      @Step {
        マクロによって生成された `Destination.State` を拡張して `Equatable` に準拠させます。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0004.swift, previousFile: 02-02-02-code-0004-previous.swift)
      }

      @Step {
        ``ComposableArchitecture/PresentationAction`` をパラメータに持つ2つの Action 列挙型ケースを `Destination.Action` をパラメータに持つ単一ケースに置き換えます。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0005.swift, previousFile: 02-02-02-code-0005-previous.swift)
      }

      モデルが簡潔に定義され、一度に1つの遷移先のみがアクティブであることをコンパイル時に保証できるようになりましたが、この時点ではコンパイルエラーが発生しています。

      @Step {
        連絡先追加機能に画面遷移するために `destination` には `Destination` Reducer で定義した `addContact` ケースをセットします。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0006.swift)
      }

      @Step {
        連絡先追加機能では親機能に連絡先を保存するよう指示するため、 Action を受信時に `.destination(.presented(_))` ケースを分解する必要があります。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0007.swift)
      }

      @Step {
        アラート機能で指定した連絡先の削除を確認する場合も同様です。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0008.swift)
      }

      @Step {
        他の `destination` アクションでは特に処理を行わないため、単に `.none` Effect を返すようにします。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0009.swift)
      }

      @Step {
        今度はアラートを表示するため、 `destination` に `Destination` Reducer で定義した `alert` ケースをセットします。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0010.swift)
      }

      @Step {
        親 Reducer で使用していた2つの `ifLet` を `Destination` ドメインに限定した単一の `ifLet` に置き換えます。
        ``Reducer()`` マクロは `Destination` 列挙型から使用する子 Reducer を推論するため、ここでは `Destination` のケースを指定する必要はありません。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0011.swift)
      }

      不正確にモデル化された、互いに独立した2つのオプショナルな状態を単一のオプショナル列挙型に変換し、一度に1つの遷移先のみがアクティブであることを保証しました。
      最後に `Destination` 列挙型の各ケースが対応するビューを紐づけていきます。

      @Step {
        すべての遷移先を単一のオプショナル状態としてモデル化する場合、まず `Destination` ドメインにスコープを限定し、 KeyPath 構文を用いて遷移先ごとの State と Action を指定します。
        KeyPath 構文が使用できるのは、 ``ComposableArchitecture/Reducer()`` マクロが列挙型に対して `@CasePathable` マクロを内部的に適用しているためです。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0012.swift, previousFile: 02-02-02-code-0012-previous.swift)
      }

      @Step {
        `alert` ビュー修飾子に対しても同様に、遷移先ごとの State と Action を指定します。

        @Code(name: "ContactsFeatures.swift", file: 02-02-02-code-0013.swift)
      }

      遷移先の状態を表すのに複数のオプショナルな値ではなく単一のオプショナルな列挙型の State を使用するように Reducer とビューを修正しました。
      アプリケーションの挙動は変わりませんが、ドメインはより簡潔にモデル化されています。
    }
  }
}
