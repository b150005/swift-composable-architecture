@Tutorial(time: 20) {
  @Intro(title: "最初の機能") {
    このチュートリアルでは The Composable Architecture(TCA) を使って最初の機能を実装する方法を学習します。
    ロジックと振る舞いを実装するための Reducer の作成方法と、その機能を SwiftUI ビューに接続する方法を解説します。
  }

  @Section(title: "Reducer の作成") {
    @ContentAndMedia {
      TCA において、1つの機能を構築する基本単位は ``ComposableArchitecture/Reducer()`` マクロと ``ComposableArchitecture/Reducer`` プロトコルです。
      このプロトコルに準拠することで、アプリケーションの機能のロジックと振る舞いを表現します。
      Reducer は以下の役割を担います。
      - Action が送信されたときに現在の状態を次の状態に更新する
      - 外部システムと通信してデータをシステムに戻す Effect を定義する

      Reducer の最大の利点は、機能の中核的なロジックと振る舞いを SwiftUI ビューから完全に分離して構築できることによって開発の分離、再利用、テストが容易になります。

      それでは、カウンター機能のロジックをカプセル化する、基本的な Reducer を作成しましょう。
    }

    @Steps {
      @Step {
        `CounterFeature.swift` という名前の新しい Swift ファイルを作成し、 TCA ライブラリをインポートします。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0001.swift)

        > Note: ライブラリのインポート前に、[Xcode プロジェクトの設定または SPM パッケージを追加](http://github.com/pointfreeco/swift-composable-architecture#Installation)して依存関係を解決しておいてください。
      }

      @Step {
        ``ComposableArchitecture/Reducer()`` マクロでアノテーションを付与した `CounterFeature` 構造体を定義します。

        > Note: ``ComposableArchitecture/Reducer()`` マクロにはいくつかの機能がありますが、現時点では ``ComposableArchitecture/Reducer`` プロトコルに準拠させることだけ意識しましょう。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0002.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer`` プロトコルの要件である以下の `State` と `Action` を定義します。
        - `State`: 機能の状態を表す構造体(例: カウント値)
        - `Action`: ユーザ操作や外部イベントを表す列挙型(例: 増減ボタンのタップ)

        TCA バージョンの `@Observable` を表す ``ComposableArchitecture/ObservableState()`` マクロを `State` 構造体に付与することで、 SwiftUI で状態の変更を監視することができます。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0003.swift)
      }

      @Step {
        シンプルなカウンター機能を作成するため、 State は現在のカウントを表す1つの整数、 Action はカウントを増減するボタンのタップアクションで構成します。

        > Tip: `Action` 列挙型のケース名は、 `incrementCount` のようなロジック名ではなく `incrementButtonTapped` のようにユーザー操作や外部イベントに基づいて命名するのがベストプラクティスです。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0004.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer`` プロトコルの要件を満たすために、 ``ComposableArchitecture/Reduce`` の ``ComposableArchitecture/Reducer/body-20w8t`` プロパティを実装し、ユーザアクションの受け取り時に状態を更新する副作用(`Effect`)を返します。
        入力アクションに応じたロジックを決定し、 `state` は `inout` として提供されるので、直接変更を行うことができます。

        > Note: Reducer プロトコルは ``ComposableArchitecture/Reducer/body-20w8t`` プロパティを提供し、その中で構成したい Reducer をリスト化することで実装されます。
        > 現時点では実行したい Reducer が1つだけなので単純な ``ComposableArchitecture/Reduce`` で十分ですが、チュートリアルの後半では多くの Reducer を組み合わせた実用的なものを紹介します。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0005.swift)
      }

      @Step {
        この機能のロジックは非常にシンプルで、 State の `count` をデクリメントまたはインクリメントするだけです。
        外部システムで実行する Effect を表す ``ComposableArchitecture/Effect`` の値を返す必要がありますが、この場合は何も実行する必要がありません。
        そのため、実行する Effect がないことを表す特別な ``ComposableArchitecture/Effect/none`` を返すことができます。

        @Code(name: "CounterFeature.swift", file: 01-01-01-code-0006.swift)
      }

      基本的な機能を実装する TCA を紹介しましたが、他にも Effect を実行してデータをシステムにフィードバックしたり、 Reducer で依存関係を使用したり、複数の Reducer を組み合わせたりすることもできます。
      機能についてはここで一旦中断し、ビューの話に移りましょう。
    }
  }

  @Section(title: "SwiftUI との統合") {
    @ContentAndMedia {
      簡単な機能を持つ Reducer を構築したので、 SwiftUI ビューと接続する方法を紹介します。
      ここでは、「機能のランタイム」を表す新しい概念、 ``ComposableArchitecture/Store`` について説明します。
    }

    @Steps {
      @Step {
        Reducer とビューを同じファイルに定義するか別々のファイルに分割するかは意見が分かれますが、このチュートリアルではすべてを `CounterFeature.swift` で宣言します。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0001.swift)
      }

      @Step {
        まずは、前セクションで構築した Reducer のジェネリックである ``ComposableArchitecture/Store`` をビューに追加します。
        `Store` は State を更新するための Action を処理し、 Effect を実行してデータをシステムにフィードバックするオブジェクトです。

        > Tip: Store は `let` として宣言でき、 Store 内の状態の監視は ``ComposableArchitecture/ObservableState()`` マクロによって自動的に行われます。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0002.swift)
      }

      @Step {
        次に、カウントを表示し、増減のボタンを提供する基本的なビュー階層を作成します。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0003.swift) {
          @Image(
            source: "01-02-image-0003.png",
            alt: "中央に0を表示するテキストビューと、その下にカウントを増減させるボタンを表示する iOS アプリケーション"
          )
        }
      }

      基本的なビューの土台が完成したので、 `store` から State を取得したり、 Action を送信したりすることができるようになりました。

      @Step {
        Dynamic member lookup 機能を介して `store` から状態を表すプロパティを直接取得し、 ``ComposableArchitecture/Store/send(_:)`` を介して `store` に Action を送信できます。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0004.swift)
      }

      @Step {
        次は、プレビュー上で機能を実行するために、 `CounterView` と `StoreOf<CounterFeature>` を構築する必要があります。
        `store` にはその初期状態を、 trailing closure には機能を実行する Reducer オブジェクトを指定することで構築できます。

        プレビューを実行して "+" ボタンと "-" ボタンをタップすると、実際にUIに表示される状態のカウントが変更されます。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0005.swift, reset: true) {
          @Video(source: "01-02-video-0005.mp4")
        }
      }

      次のセクションに進む前に、 TCA の素晴らしい機能を紹介します。
      機能のすべてのロジックと振る舞いが Reducer に含まれているため、別の Reducer を指定することで挙動を変更することができます。

      @Step {
        例えば、プレビューで `CounterFeature` をコメントアウトすると Store には状態の変更や Effect のない Reducer が与えられます。
        これにより、機能のロジックや振る舞いを気にせずに機能の UI をプレビューできます。

        > Note: 動画では、ボタンをタップしてもカウントが増減しないことがわかります。これは、プレビューで空の Reducer を使用しているためです。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0006.swift) {
          @Video(source: "01-02-video-0006.mp4")
        }
      }

      @Step {
        先に進む前に、プレビューの `CounterFeature` のコメントアウトを元に戻しましょう。

        @Code(name: "CounterFeature.swift", file: 01-01-02-code-0007.swift)
      }

      TCA における基本的な機能の実装方法を紹介しました。
      機能は非常にシンプルで、 <doc:01-02-AddingSideEffects> で紹介するような副作用は含まれていませんが、その前にこの機能をアプリケーションに統合する方法を紹介します。
    }
  }

  @Section(title: "アプリへの統合") {
    @ContentAndMedia {
      TCA の 機能を SwiftUI ビューに統合し、プレビューで実行しました。
      次に、アプリケーションのエントリーポイントを変更して、機能を完全なアプリケーションで実行する方法を押さえる必要があります。
      これにより、シミュレーターやデバイスで機能を実行できるようになります。
    }

    @Steps {
      @Step {
        デフォルトでは、アプリケーションのエントリーポイントはおそらく `App.swift` というファイルにあり、このようなコードになっています。

        @Code(name: "App.swift", file: 01-01-03-code-0001.swift)
      }

      @Step {
        アプリケーションのエントリーポイントを変更して、プレビューで行ったように `CounterView` を構築し、 Store を提供するように変更します。

        @Code(name: "App.swift", file: 01-01-03-code-0002.swift)
      }

      @Step {
        アプリケーションを動かす `Store` の初期化は **1回だけ行う** 必要があることに注意してください。
        ほとんどのアプリケーションでは、 `Scene` のルートにある `WindowGroup` で直接作成してもいいですが、 `static let` で宣言し、 `Scene` で提供することもできます。

        @Code(name: "App.swift", file: 01-01-03-code-0003.swift)
      }

      TCA のもう一つの素晴らしい機能を紹介します。
      Reducer には、 SwiftUI が提供するツールに似た `_printChanges` というメソッドがあり、 Reducer が処理するすべての Action をコンソールに出力し、 Action の処理後に State がどのように変化したか出力することができます。
      このメソッドは、未変更であるネストされた State やコレクションの要素を表示しないことで、 State の差分をコンパクトに圧縮します。

      @Step {
        アプリケーションのエントリーポイントで Reducer を通じて `_printChanges(_:)` を呼び出すように変更します。

        @Code(name: "App.swift", file: 01-01-03-code-0004.swift)
      }

      @Step {
        シミュレーターでアプリケーションを実行し、 "+" ボタンと "-" ボタンを数回タップすると、送信されたアクションと状態ログがコンソールに表示されます。

        @Image(source: "01-03-image-0005.jpg")
      }
    }
  }
}