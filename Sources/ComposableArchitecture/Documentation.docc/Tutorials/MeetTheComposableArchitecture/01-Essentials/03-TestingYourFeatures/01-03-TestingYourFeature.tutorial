@Tutorial(time: 60) {
  @Intro(title: "機能のテスト") {
    前のチュートリアルで構築したカウンター機能のテストコードを書く方法を学びます。
    状態変化に対するアサーションと、 Effect の実行方法、外部データをシステムに送信する方法を紹介します。
  }

  @Section(title: "状態変化のテスト") {
    @ContentAndMedia {
      TCA において、テストしなければならないのは、機能を表す Reducer だけであり、以下の2つのテストに集約されます:
      - Action が送信された場合の状態の変化
      - Reducer が生成する Effect の実行結果

      Reducer は純粋な関数を形成するため、状態変化をテストするのは非常に簡単です。
      Reducer に State と Action を与え、状態の変化を検査するだけです。

      TCA は機能のテスト可能なランタイムである ``ComposableArchitecture/TestStore`` を提供しており、 Action の送信時に生じるあらゆるものを監視します。
      そのため、シンプルなアサーションを書くことができ、アサーションが失敗した場合はフォーマットされた失敗メッセージを出力します。
    }

    @Steps {
      @Step {
        カウンター機能の増減の振る舞いを確認するために、シンプルなテストコードを書いてみましょう。
        まず、 `CounterFeatureTests.swift` ファイルを作成し、テストするための基本的な土台を用意します。

        > Note: TCA のテストツールは非同期性を利用するため、テストスイートを表す構造体は `@MainActor` とし、テストメソッドは `async` で宣言します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-01-code-0001.swift)
      }

      @Step {
        次に、 Action の送信ごとに実行される機能の振る舞いを検査する ``ComposableArchitecture/TestStore`` を構築します。
        TestStore は ``ComposableArchitecture/Store`` と同様、 `store` には機能の初期状態を、 trailing closure には機能を実行する Reducer オブジェクトを指定することで構築できます。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-01-code-0002.swift)
      }

      @Step {
        ``ComposableArchitecture/TestStore`` は検査を行うために `Equatable` な状態を必要とするため、 State は `Equatable` プロトコルに準拠させる必要があります。

        @Code(name: "CounterFeature.swift", file: 01-03-01-code-0003.swift, previousFile: 01-03-01-code-0003-previous.swift)
      }

      @Step {
        そして、ユーザ操作をエミュレートするために TestStore で Action を送信します。
        このコードでは、 "+" ボタンと "-" ボタンのタップをエミュレートしています。

        > Note: ほとんどの機能は非同期の副作用を含むため、 TestStore の ``ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl`` メソッドは非同期メソッドとして定義されています。
        > TestStore は非同期コンテキストを使用して Reducer によって返される Effect をトラッキングします。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-01-code-0004.swift, previousFile: file: 01-03-01-code-0002.swift)
      }

      @Step {
        `⌘ + U` またはテストメソッド横のマークをクリックしてテストを実行できますが、このテストは失敗します。
        ``ComposableArchitecture/TestStore`` では、 Action の送信ごとにその時点での状態を検査する必要があるためです。
        ライブラリは、期待した値("-" の行)と実際の値("+" の行)の差異を示す詳細な失敗メッセージを表示します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-01-code-0005.swift)
      }

      @Step {
        テストを修正するために、 Action の送信ごとにその時点での状態を検査しましょう。
        `send` メソッドに trailing closure を記述すると、そのクロージャには Action 送信**前**の可変な State(`$0`) オブジェクトが渡されます。
        あとは、 `$0` の状態を期待される状態に変更するだけです。

        > Tip: `count += 1` のような "相対的な" 変更ではなく、 `count = 1` のような "絶対的な" 変更を使用することで、**絶対的で正確な状態を検査する**ことを推奨します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-01-code-0006.swift)
      }

      TestStore は、増減ロジックのようなシンプルな機能だけでなく、実用的な複雑なロジックや状態変化のテストもシンプルに記述することができます。
    }
  }

  @Section(title: "Effect のテスト") {
    @ContentAndMedia {
      ここまで、 Reducer にとって最も重要な Action の送信ごとの状態の変化をテストしました。
      次に重要なのは、 Reducer が生成する Effect の実行結果です。

      副作用に対するテストでは、外部システムへの依存を制御し、テスト用のフェイクを提供する必要があるため、より多くの作業が必要です。
      まずは、タイマー機能のテストから始めましょう。これは、数字に関する事実をフェッチするネットワークリクエストよりも簡単にテストすることができます。
    }

    @Steps {
      @Step {
        新しく非同期テストメソッドを作成し、 ``ComposableArchitecture/TestStore`` を構築し、テストの土台を整備しましょう。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0001.swift, previousFile: 01-03-02-code-0001-previous.swift)
      }

      @Step {
        ユーザがタイマーを開始し、数秒待ってカウントが増えるのを見て、その後ユーザがタイマーを停止する一連のフローをテストします。
        TestStore で `toggleTimerButtonTapped` アクションを送信することで、ユーザがタイマーを開始することをエミュレートします。
        また、 `isTimerRunning` が `true` に切り替わることが期待されるので、状態の変化についても検査します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0002.swift)
      }

      @Step {
        しかし、このテストは失敗します。テストは完了したのにもかかわらず、 Effect がまだ実行中であるためです。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0003.swift)
      }

      ``ComposableArchitecture/TestStore`` は、 Effect を含む機能全体の振る舞いを時系列で検証することを強制しています。
      このケースでは、 TestStore はテスト中で開始されたすべての Effect がテスト内で完了していないため失敗しています。
      この仕組みには、以下のような利点があります。
      - 予期せぬ Effect の検出: Effect が実行され続け、システムに予期しない Action を送信していることを検出できる
      - 状態変更のバグの検出: 各 Action 内での誤った状態変更を検出できる

      @Step {
        テストをパスさせるには、単に `toggleTimerButtonTapped` アクションを再度送信し、ユーザがタイマーを再度切り替える操作をエミュレートするだけです。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0004.swift)
      }

      このテストはパスしますが、タイマーの振る舞いについてはまだテストしていないため、次のステップでは `timerTick` アクションを受信し `count` が増加することを検査します。
      TestStore の ``ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic`` メソッドを使用してタイマーが発火した際に送信されるアクションの受信をエミュレートし、状態の変更を検査できます。

      @Step {
        `timerTick` アクションを受信し、 `count` が 1 に増加することを検査します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0005.swift)

        > Note: KeyPath 構文を用いることで、 Effect を通じて受信する `Action` 列挙型のケースを指定することができます。
      }

      @Step {
        テストを実行すると、1秒以上かかってパスしたり、失敗したりフレーキー(flakey)なテストであることが分かります。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0006.swift)
      }

      これは、タイマーが発火するまでに必ず1秒かかるのに対し、 TestStore はアクションの受信に一定時間しか待機しないことが原因です。
      TestStore は、テストの実行に時間をかけるのではなく、時間を制御することで決定論的なテストになることを望んでいます。

      @Step {
        ``ComposableArchitecture/TestStore`` に対してアクションの受信を待機させる1つの方法に、 `receive` メソッドの `timeout` パラメータの指定があります。
        `Task.sleep` は正確なツールではないため少なくとも1秒以上待つ必要はありますが、明示的なタイムアウトを設定することでテストはパスするようになりました。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0007.swift)
      }

      しかし、このままではテストは1秒以上かかり、追加でタイマーの発火イベントを検証したい場合はさらに多くの時間がかかってしまいます。

      グローバルで制御不能な `Task.sleep` 関数を使うのではなく Swift の `Clock` API を使用することで、シミュレーターやデバイスで実行する際には `ContinuousClock` を、テストではテストクロックなどの制御可能な Clock を使用できます。

      TCA では依存関係の制御システム(詳細は <doc:DependencyManagement> を参照)と、制御可能なクロックが提供されています。

      @Step {
        `CounterFeature.swift` に戻り、 `@Dependency` マクロを用いて Reducer に `ContinuousClock` への依存関係を追加します。
        そして、 `reduce` の実装で `Task.sleep` ではなく追加した `clock` プロパティを使用するようにします。

        @Code(name: "CounterFeature.swift", file: 01-03-02-code-0008.swift, previousFile: 01-02-03-code-0006.swift)
      }

      時間ベースの非同期処理への依存関係を制御することで、決定論的に、そして即座にパスするシンプルなテストコードを書くことができるようになりました。

      @Step {
        `CounterFeatureTests.swift` に戻り、テスト用に制御可能な Clock を明示的に指定しましょう。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0009.swift)
      }

      @Step {
        `testTimer` メソッドの冒頭で `TestClock` を構築します。
        ``ComposableArchitecture/TestStore`` に `withDependencies` という trailing closure を追加することで、 Reducer で時間を制御する際に用いる Clock の依存関係をオーバーライドできます。
        最後に、 `timerTick` アクションを受信する前に、 TestClock を1秒進めます。

        > Note: `TestClock` 型は、 [swift-clocks][swift-clocks] ライブラリによって提供されます。

        [swift-clocks]: https://github.com/pointfreeco/swift-clocks

        @Code(name: "CounterFeatureTests.swift", file: 01-03-02-code-0010.swift)
      }

      依存関係を制御することで、テストは即座に、そして決定論的にパスできるようになりました。

      次のセクションでは、カウント値の数字に関する事実を取得するネットワークリクエストの副作用をテストします。
    }
  }

  @Section(title: "ネットワークリクエストのテスト") {
    @ContentAndMedia {
      多くの場合、外部サーバがユーザのデータを保持するため、ネットワークリクエストはアプリケーションで最も一般的な種類の副作用です。
      しかし、ネットワークリクエストを行う機能のテストは、以下の理由で困難である場合があります。
      - リクエストに時間がかかる
      - ネットワークの通信状況に依存する
      - サーバから取得するデータが予測不可能である

      数字の事実をフェッチする動作のテストコードをありのままに記述し、何が問題になるか見てみましょう。
    }

    @Steps {
      @Step {
        `CounterFeatureTests.swift` に新しいテストメソッドを追加して、数字の事実をフェッチするネットワークリクエスト動作をテストします。
        また、 ``ComposableArchitecture/TestStore`` の土台も作成しておきましょう。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-03-code-0001.swift, previousFile: 01-03-03-code-0001-previous.swift)
      }

      このテストでは、ユーザが "Fact" ボタンをタップし、インジケータを見て、データがシステムに送信されるまでの一連のフローをエミュレートします。

      @Step {
        `factButtonTapped` アクションを送信することで、ユーザによる "Fact" ボタンのタップをエミュレートし、 `isLoading` が `true` に切り替わることを検査しています。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-03-code-0002.swift)
      }

      @Step {
        残念ながら、このテストは失敗します。
        ``ComposableArchitecture/TestStore`` は、 Effect を含む機能全体の振る舞いを時系列で検証することを強制していますが、テスト終了時にネットワークリクエストが未完了であるため失敗しています。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-03-code-0003.swift)
      }

      @Step {
        テストを修正するには、ネットワークリクエストの完了時に送信される `factResponse` アクションを受信する必要があります。
        しかし、サーバから返される数字の事実に関するデータをどのように検査すればよいでしょうか？
        サーバーにデータを要求するたびに、異なる結果が送られてくる可能性があります。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-03-code-0004.swift)
      }

      @Step {
        サーバから取得する文字列データが予想とは異なったため、テストが失敗しました。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-03-code-0005.swift)
      }

      サーバは毎回異なる文字列データを送信しているため、データを予測する手立てがありません。
      仮にサーバから送信されるデータを予測できたとしても、インターネットの通信状況と外部サーバの稼働状況に依存し、フレーキーなテストになるため望ましくありません。
    }
  }

  @Section(title: "依存関係の制御") {
    @ContentAndMedia {
      機能で制御していない依存関係を使用することで、テストの実行に時間がかかったり、フレーキーなテストになったりする可能性があります。

      外部システムへの依存関係を制御する(詳細は <doc:DependencyManagement> を参照)ことを推奨します。
      そこで、 TCA が提供しているアプリケーション全体で依存関係を制御し伝播するためのツールセットを紹介します。
    }

    @Steps {
      @Step {
        まずは `NumberFactClient.swift` というファイルを作成し、 TCA をインポートすることで機能内の任意の依存関係を制御するツールを使用できるようにします。

        @Code(name: "NumberFactClient.swift", file: 01-03-04-code-0001.swift)
      }

      @Step {
        依存関係を制御する最初のステップは、依存関係を抽象化するインタフェースを作成することです。
        この場合、整数を受け取り文字列を返し、例外をスローする可能性のある、単一の非同期処理のエンドポイントです。
        これにより、シミュレータやデバイスでは依存関係の "本番(live)" バージョンを、テストでは制御されたバージョンを使用できるようになります。

        > Tip: プロトコルは依存関係インターフェースを抽象化する最も一般的な方法ですが、唯一の方法ではありません。
        > ここでは、インターフェースを表現する、可変プロパティを持つ構造体を使用します。
        > 依存関係にプロトコルを使用することもできますが、構造体を用いた依存関係の注入方法について詳しく知りたい場合は、 [これらの動画][dependencies-collection] を参照してください。

        [dependencies-collection]: https://www.pointfree.co/collections/dependencies

        @Code(name: "NumberFactClient.swift", file: 01-03-04-code-0002.swift)
      }

      @Step {
        次に、依存関係を追加するには、2つのステップが必要です。
        まずは構造体を `DependencyKey` プロトコルに準拠させ、 `liveValue` プロパティを `static let` として宣言します。
        これは、シミュレータやデバイスで実行する際に使用する、本番用ネットワークリクエストを行うのに適しています。

        > Note: 技術的には TCA の依存関係の制御システムは、別のライブラリである [swift-dependencies][swift-dependencies] によって提供されています。

        [swift-dependencies]: https://github.com/pointfreeco/swift-dependencies

        @Code(name: "NumberFactClient.swift", file: 01-03-04-code-0003.swift)
      }

      @Step {
        次に、ゲッタとセッタを持つ計算プロパティを `DependencyValues` に追加します。
        これにより、 Reducer で `@Dependency(\.numberFact)` のように KeyPath 構文を用いて使用することができます。

        > Note: 依存関係を追加することは SwiftUI で環境変数を追加するのと似て非なるものです。
        > SwiftUI の環境変数は `EnvironmentKey` に準拠することで `defaultValue` を提供し `EnvironmentValues` を拡張して計算プロパティを提供することで追加できます。

        @Code(name: "NumberFactClient.swift", file: 01-03-04-code-0004.swift)
      }

      依存関係を制御するためのインタフェースを作成したことで、テストではテスト用の依存関係を提供できるようになりました。

      @Step {
        `CounterFeature.swift` に戻り、 `@Dependency` プロパティラッパーを使用して依存関係を追加します。
        そして、 `factButtonTapped` アクションで返す Effect で、 `URLSession` を使用して本番用のネットワークリクエストを行うのではなく、 `numberFact` 依存関係を使用してデータのフェッチをエミュレートします。

        @Code(name: "CounterFeature.swift", file: 01-03-04-code-0005.swift, previousFile: 01-03-02-code-0008.swift)
      }

      ネットワークリクエストの使用を避け、即座に決定論的にパスするユニットテストを記述できるようになりましたが、テストを実行する前に TCA の素晴らしい機能を紹介します。

      @Step {
        テストコードに変更を加えていない状態で、 Xcode からテストを再実行します。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-04-code-0006.swift, previousFile: 01-03-04-code-0006-previous.swift)
      }

      テストは同じ失敗をしますが、テストでオーバーライドせずに本番用の依存関係を使用していることを示すメッセージが追加されました。
      これにより、テストで意図しないネットワークリクエストが発生したり、ディスクに書き込み処理を実行したり、アナリティクス追跡したりするのを防ぐことができます。
      テストでは本番用のネットワークリクエストを避けるため、テスト用の依存関係(スタブ)を追加しましょう。

      @Step {
        `withDependencies` の trailing closure を追加し、 ``ComposableArchitecture/TestStore`` の依存関係をオーバーライドします。
        このクロージャには現在の依存関係を表すパラメータが渡されるため、 `$0` を介して依存関係を変更することができます。
        `numberFact.fetch` エンドポイントをオーバーライドして、ハードコーディングされた文字列を即座に返すようにします。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-04-code-0007.swift)
      }

      @Step {
        `numberFact` を通じて予測可能なものを即座に返すようオーバーライドしたため、 `receive` から `timeout` を削除し、状態の変化を検査できるようになりました。

        @Code(name: "CounterFeatureTests.swift", file: 01-03-04-code-0008.swift)
      }

      テストを書く以外にも、依存関係を制御することには多くの利点があります。
      制御された環境で Xcode プレビューを確認したり、ユーザがサンドボックス環境で機能を実行したりできるようになったことで、予期せず外部システムを変更してしまうのを防ぐことができます。
    }
  }
}