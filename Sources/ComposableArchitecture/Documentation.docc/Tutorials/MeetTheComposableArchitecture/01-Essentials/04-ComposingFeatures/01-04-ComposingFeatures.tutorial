@Tutorial(time: 30) {
  @Intro(title: "機能の組み合わせ") {
      TCA の "composable"(組み合わせ可能)な側面について学ぶために、これまで構築してきた `CounterFeature` を含む親機能を作成します。
  }

  @Section(title: "タブビューの追加") {
    @ContentAndMedia {
      `CounterFeature` 機能に 2つのタブを持つ `TabView` 機能を統合する方法を紹介します。
      Store の `Scope` Reducer と `scope` 演算子について学んでいきます。
    }

    @Steps {
      まずは `TabView` を使用する Root ビューを作成します。
      ここでは、2つのタブだけを持ち、各タブにはこれまでのチュートリアルで構築した、独立した `CounterView` を含めます。

      @Step {
        `AppFeature.swift` というファイルを作成し、 TabView の基本的な土台を構築します。

        @Code(name: "AppFeature.swift", file: 01-04-01-code-0001.swift)
      }

      @Step {
        TabView では各タブに `CounterView` を表示するため、2つの Store が必要です。

        @Code(name: "AppFeature.swift", file: 01-04-01-code-0002.swift)
      }

      これまでの `CounterView` では Store を単純な `let` プロパティとして宣言しており、 `CounterView` の構築時に `store` パラメータに Store を渡していました。
      ここでも、同じように Store を構築して `CounterView` に渡せないか試してみましょう。

      @Step {
        `AppView` でそれぞれの `CounterView` に提供する Store を追加してみます。

        @Code(name: "AppFeature.swift", file: 01-04-01-code-0003.swift)
      }

      互いに完全に独立した Store を宣言しましたが、将来的に一方のタブで発生したイベントを他方のタブに伝播させる可能性があります。
      そのため、 TCA では複数の独立した Store を持つのではなく、機能を組み合わせた単一の ``ComposableArchitecture/Store`` でビューを構築します。

      まずは機能(Reducer)を単一のパッケージで組み合わせ、その後でビューを構築します。
    }
  }

  @Section(title: "Reducer の組み合わせ") {
    @ContentAndMedia {
      まず Reducer で機能を組み合わせ、次に単一の Store と TabView を持つアプリケーションを構築します。
    }

    @Steps {
      `AppView` に沿ったロジックと振る舞いを持つ機能を作成します。
      カウンター機能(`CounterFeature` と `CounterView`)と同様、 Reducer とビューを同じファイルに配置します。
      TCA では、機能が膨れ上がるまで Reducer とビューを同じファイルに配置することを推奨しています。

      @Step {
        ``ComposableArchitecture/Reducer()`` マクロを適用した `AppFeature` 構造体を作成します。

        @Code(name: "AppFeature.swift", file: 01-04-02-code-0001.swift)
      }

      @Step {
        Reducer に各タブの State と Action を保持する `State` 構造体と `Action` 列挙型を追加します。

        @Code(name: "AppFeature.swift", file: 01-04-02-code-0002.swift)

        > Note: 後でこの機能のテストを書けるように、 `State` を予め `Equatable` に準拠させます。
      }

      @Step {
        次に、 Reducer の ``ComposableArchitecture/Reducer/body-20w8t`` プロパティを実装する必要があります。
        これまで ``ComposableArchitecture/Reduce`` 型のクロージャに渡された Action に基づいて状態変更を行ってきました。

        `AppFeature` については `tab1` と `tab2` のそれぞれの状態に対してコアロジックを実行できるよう `CounterFeature` Reducer を組み込みます。

        @Code(name: "AppFeature.swift", file: 01-04-02-code-0003.swift)
      }

      @Step {
        ``ComposableArchitecture/Scope`` Reducer を用いることで、`CounterFeature` を `AppFeature`に組み込み、親機能のサブドメイン内部で子 Reducer を実行できます。
        まず `tab1` の State と Action を指定して `CounterFeature` Reducer を実行し、次に `tab2` についても同様に指定して実行します。

        > Note: `body` 計算プロパティは Scene のバックグラウンドで Result Builder を用いることで、 `body` 内に型の制約を満たす Reducer をリストアップできます。
        > Action がシステムに送信されると、各 Reducer が順次機能の状態変更を実行します。
        > Result Builder は SwiftUI がビューの `body` でビュー階層を構成するのにも使用されています。

        @Code(name: "AppFeature.swift", file: 01-04-02-code-0004.swift)
      }

      `AppFeature` は `AppFeature` のコアロジック、1つ目のタブで実行されるカウンター機能、2つ目のタブで実行されるカウンター機能の3つの独立した機能を組み合わされた1つの機能となりました。

      ビューの構築前にこのように1つに統合された機能のテストコードを記述することもできます。

      @Step {
        テストターゲットに `AppFeatureTests.swift` というファイルを作成し、以下の基本的な土台を構築します。

        まずは1つ目のタブで "+" ボタンがタップされたときに `tab1` のカウントが増えることを検査していきます。

        @Code(name: "AppFeatureTests.swift", file: 01-04-02-code-0005.swift)
      }

      @Step {
        `AppFeature` ドメインを持つ ``ComposableArchitecture/TestStore`` を作成します。
        機能の初期状態と機能を実行する Reducer を指定します。

        > Note: `TestStore` は Action を送信し、状態がどのように変化するか検査できる「機能のテストランタイム」であり、 Effect を含む機能全体の振る舞いを時系列で検証することを強制します。

        @Code(name: "AppFeatureTests.swift", file: 01-04-02-code-0006.swift)
      }

      @Step {
        TestStore に Action を送信し、1つ目のタブでのユーザの "+" ボタンのタップ操作をエミュレートします。

        > Tip: KeyPath 構文を用いて複数の層に分割された機能が持つ Action を送信します。

        > Note: 各機能で定義された Action 列挙型がネストになるため、異なるタブの Action は自然に区別されます。

        @Code(name: "AppFeatureTests.swift", file: 01-04-02-code-0007.swift)
      }

      このテストコードは、 Action の送信後の状態の変化を検査していないので失敗します。
      ``ComposableArchitecture/TestStore`` は、原則として機能内部で起こるあらゆる現象を徹底的に検査することを強制します。

      @Step {
        `store.send` の trailing closure で Action 送信前の状態を変更し、 Action 送信後の状態と一致するようにテストコードを修正します。

        @Code(name: "AppFeatureTests.swift", file: 01-04-02-code-0008.swift)
      }

      これでこのテストコードはパスするようになりました！
    }
  }

  @Section(title: "子 Store の派生") {
    @ContentAndMedia {
      1つに統合された `AppFeature` が Root アプリケーションと各タブのすべてのロジックと振る舞いをカプセル化したので、アプリケーションのビュー階層を構築できるようになりました。
    }

    @Steps {
      `AppView` のタブごとの Store ではなく、1つに統合された `AppFeature` ドメインの単一の Store を宣言することで、各タブの子 Store を派生させて `CounterView` に渡すことができます。

      @Step {
        タブごとの Store プロパティを `AppFeature` ドメインの単一の Store に置き換えます。

        @Code(name: "AppFeature.swift", file: 01-04-03-code-0001.swift, previousFile: 01-04-03-code-0001-previous.swift)
      }

      @Step {
        ``ComposableArchitecture/Store`` の ``ComposableArchitecture/Store/scope(state:action:)-90255`` メソッドを用いて `tab1` ドメインの子 Store を派生させます。
        State フィールドと Action 列挙型のケースを指定するために KeyPath 構文を使用します。

        @Code(name: "AppFeature.swift", file: 01-04-03-code-0002.swift)
      }

      @Step {
        2つ目のタブについても同様に行います。

        @Code(name: "AppFeature.swift", file: 01-04-03-code-0003.swift)
      }

      単一の ``ComposableArchitecture/Store`` でビュー全体を構築しました。
      `AppFeature.swift` でプレビューを構築して2つのタブのロジックと振る舞いを統合した単一機能を動作させてみましょう。

      @Step {
        `AppFeature` ドメインで Store を初期化して `AppView` のプレビューを構築します。

        @Code(name: "AppFeature.swift", file: 01-04-03-code-0004.swift)
      }

      アプリのエントリーポイントを変更することでシミュレーターで機能を実行することもできます。

      @Step {
        `App.swift` を開きエントリーポイントで `AppView` と `AppFeature` を使用するように変更します。

        @Code(name: "App.swift", file: 01-04-03-code-0005.swift, previousFile: 01-04-03-code-0005-previous.swift)
      }

      TCA で機能を組み合わせる基本的な方法を紹介しました。
      最もシンプルなのは親 Reducer の `body` で Reducer を組み合わせ、 ``ComposableArchitecture/Scope`` Reducer を用いて親のサブドメイン内部で子 Reducer を動作させ、ビューでは ``ComposableArchitecture/Store/scope(state:action:)-90255`` をによって親から子 Store を派生させ、それらの子 Store を子ビューに渡す方法です。

      画面遷移で主に使われる、より高度に機能を組み合わせる方法もあります。ライブラリの画面遷移ツールに関する詳細情報については、 <doc:Navigation> を参照してください。
      また、 <doc:MeetComposableArchitecture> の2つ目のチュートリアルも参考にしてください。
    }
  }
}