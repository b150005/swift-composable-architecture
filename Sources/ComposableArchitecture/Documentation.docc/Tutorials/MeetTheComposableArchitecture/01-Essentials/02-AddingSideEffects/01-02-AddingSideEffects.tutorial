@Tutorial(time: 30) {
  @Intro(title: "副作用の追加") {
    機能と外部システムの接続方法と、外部から受信したデータを機能で受け取る方法を学びます。
  }

  @Section(title: "副作用とは何か？") {
    @ContentAndMedia {
      副作用は、機能開発において最も重要な部分であり、 API リクエストの実行、ファイルシステムとの通信、時間ベースの非同期処理など、外部システムとの接続を可能にします。
      副作用がなければ、アプリケーションはユーザーにとって価値がないといっても過言ではありません。

      しかし、副作用は機能の中で最も複雑な部分でもあります。
      State の変更は単純なプロセスであり、 State と Action が同じ Reducer を実行すれば、常に同じ結果が得られます。
      しかし、 Effect は外部システムの変化(ネットワークの通信状況やディスク権限など)に影響されやすく、 Effect を実行するたびに全く異なる結果が得られる可能性があります。

      まず、 ``ComposableArchitecture/Reducer`` プロトコルに準拠する際に直接 Effect を実行できない理由を紹介します。
      そして、ライブラリが Effect を実行するために提供しているツールも併せて紹介します。
    }

    @Steps {
      @Step {
        前回 <doc:01-01-YourFirstFeature> で構築したカウンター機能に新機能を追加しましょう。
        現在表示されているカウントの数字に関する事実(`fact`)をフェッチするネットワークリクエストを行うボタンを追加します。

        Reducer とビューのどちらを先に変更するかは自由ですが、今回はビューを先に変更します。
        `CounterView` の下部に、タップ時に `factButtonTapped` アクションを送信するボタンを新たに追加します。
        このアクションはまだ Action に定義していませんが、後で追加します。

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0001.swift, previousFile: 01-02-01-code-0001-previous.swift) {
          @Image(source: "02-01-image-0001")
        }
      }

      @Step {
        また、 `fact` の読み込み中に表示する `ProgressView` を下部に追加し、 `fact` を表示するために State のオプショナルプロパティをアンラップします。
        `isLoading` と `fact` の状態を使用していますが、まだ State には定義していないため、後で追加します。

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0002.swift)
      }

      これでビュー部分の変更は完了しましたが、存在しない State と Action を使用しているため、コードはまだコンパイルできません。
      Reducer も修正し、これらのエラーを解決しましょう。

      @Step {
        前回 <doc:01-01-YourFirstFeature> で構築した`CounterFeature` を思い出してください。
        シンプルな `State` と `Action` があり、 Reducer は送信されたアクションに応じて `count` の状態を増減させるだけでした。

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0003.swift, reset: true)
      }

      @Step {
        ビューで新たに使用した State(`fact`, `isLoading`) と Action(`factButtonTapped`) を追加しましょう。
        Reducer でこの Action を実装し、 `isLoading` を `true` に切り替え、ボタンのタップ時に `fact` の状態を `nil` で初期化します。
        そして、他のケースと同様に`.none`を返すようにします。

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0004.swift)
      }

      @Step {
        次の問題は、どのように副作用を実行するか、ですが、 [numbersapi.com][numbersapi.com] を使用して `fact` に値を代入してみます。
        このコードのように Reducer 内で直接 `URLSession` を使用して非同期実行したいところですが、残念ながら許されていません。

        [numbersapi.com]: http://www.numbersapi.com

        @Code(name: "CounterFeature.swift", file: 01-02-01-code-0005.swift)
      }

      TCA では、 State の単純で純粋な変換を、複雑で厄介な副作用から分離しています。
      これはライブラリの核心的な原則の1つであり、多くの利点があります。
      幸いなことに、 ``ComposableArchitecture/Effect`` と呼ばれる副作用を実行するためのツールを提供しており、次のセクションで紹介します。
    }
  }

  @Section(title: "ネットワークリクエストの実行") {
    @ContentAndMedia {
      副作用と Reducer 内で直接副作用を実行できない理由を理解したので、上記で書いたコードを修正する方法を紹介します。

      TCA は"Effect"の概念を ``ComposableArchitecture/Reducer`` の定義に直接組み込んでいます。
      Reducer が Action を処理して State を変更し、 ``ComposableArchitecture/Effect`` と呼ばれる、 ``ComposableArchitecture/Store`` によって実行される非同期ユニットを返します。
      Effect は外部システムと通信し、外部からのデータを Reducer に送信することができます。

      これは、 `fact` の初期化で行いたい挙動そのものです。ネットワークリクエストに対するレスポンスデータを Reducer で受信したいのです。
      それでは、学習を始めましょう。
    }

    @Steps {
      @Step {
        ``ComposableArchitecture/Effect`` を構築する主な方法は、静的メソッド ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)`` を介して行います。
        これにより、副作用を実行するための非同期コンテキストと Action をシステムに送信する処理(`send`)が提供されます。

        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0001.swift, previousFile: 01-02-01-code-0005.swift)
      }

      @Step {
        `.run`の trailing closure は、 [numbersapi.com][numbersapi.com] からデータをフェッチするネットワークリクエストの実行と、受け取ったデータを文字列に変換するのに最適な場所です。

        > Tip: 残念ながら [numbersapi.com][numbersapi.com] は HTTPS を提供していないため、 HTTP リクエストを許可するためにアプリケーションの Info.plist にエントリを追加する必要があります。
        > その方法については [この記事][always-allow] を参照してください。

        [numbersapi.com]: http://www.numbersapi.com
        [always-allow]: https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity

        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0002.swift)
      }

      @Step {
        しかし、ネットワークからデータをフェッチした後に Effect 内で `state.fact` を変更することはできません。
        `Sendable` なクロージャは `inout` 状態をキャプチャできず、コンパイラによって厳密に強制されるためです。
        これは、ライブラリが Reducer が実行する、素晴らしく単純で純粋な状態の変更を、複雑で厄介な Effect から分離していることを表しています。

        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0003.swift)
      }

      @Step {
        Effect から Reducer にデータを渡すために、 `factResponse` というネットワークからフェッチされた `String` 型の連想値を受け取る、別の Action を導入する必要があります。
        そして、非同期処理後に Effect 内でその Action を送信し、新しい Action で `isLoading` を `false` に戻し、 `fact` の状態を更新するようにします。

        > Warning: 現在、`URLSession`によってスローされる可能性のあるエラーを無視しています。
        > より完全なアプリケーションでは ``ComposableArchitecture/TaskResult`` を活用して、エラーを Reducer に渡し、適切に対処する必要があります。

        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0004.swift)
      }

      @Step {
        これで、シミュレータやプレビューでアプリケーションを実行し、機能が期待通りに動作することを確認できます。
        値をカウントし、 "Fact" ボタンをタップすると、 UI 下部に、カウンターの数字に関する事実が表示されます。

        @Code(name: "CounterFeature.swift", file: 01-02-02-code-0005.swift) {
          @Video(source: "02-02-video-0005")
        }
      }
    }
  }

  @Section(title: "タイマーの管理") {
    @ContentAndMedia {
      ネットワークリクエストは最も一般的な副作用ですが、他にも副作用の種類があります。
      カウンター機能に、タップすると1秒ごと `count` を1ずつ増加させる別のボタンを追加してみます。
    }

    @Steps {
      @Step {
        前回と同様、 Reducer の変更ではなくビューの変更から始めましょう。
        `isTimerRunning` の状態に応じて "Start timer" または "Stop timer" を表示するボタンを追加し、タップ時に `toggleTimerButtonTapped` アクションを送信します。

        > Note: State への `isTimerRunning` の追加、 Action への `toggleTimerButtonTapped` の追加は次のステップで行います。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0001.swift, previousFile: 01-02-01-code-0002.swift)
      }

      @Step {
        次に、 State には `isTimerRunning` 、 Action には `toggleTimerButtonTapped` 、 Reducer にはそのアクションを処理する基本的なロジックを追加します。
        タイマーを開始する非同期処理を行うので、 Reducer は `run` Effect を返すようにしています。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0002.swift, previousFile: 01-02-02-code-0005.swift)
      }

      @Step {
        `run` Effect 内で `while` ループを宣言し、ループ内で1秒間スリープすることで、非常に粗いタイマーをエミュレートできます。
        これはドリフト(タイマーの長時間実行による発火タイミングのずれ)が生じる可能性があるため、ベストな方法ではないことに注意してください。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0003.swift)
      }

      @Step {
        Reducer で各タイマーの発火イベントを処理するために、 `Task.sleep` の後で `timerTick` アクションを送信するようにします。
        そして、その Action で `count` をインクリメントします。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0004.swift)
      }

      しかし、このままではバグが残っています。
      "Start timer" ボタンをタップした後、 "Stop timer" ボタンをタップしても、タイマーは停止しません。

      @Step {
        このバグを修正するために、 TCA の強力な機能である"Effect のキャンセル"を活用できます。
        ``ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)`` を使用して Effect をキャンセル可能な Effect としてマークし、後で ``ComposableArchitecture/Effect/cancel(id:)`` を使用してその Effect をキャンセルできます。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0005.swift)
      }

      @Step {
        これで機能は期待通りに動作します。タイマーを開始し、数秒待ってカウントアップするのを確認し、その後タイマーを停止できます。
        長時間実行される Effect を管理する方法と、 Effect をキャンセルする方法を紹介しました。

        @Code(name: "CounterFeature.swift", file: 01-02-03-code-0006.swift) {
          @Video(source: "03-03-video-0006")
        }
      }
    }
  }
}