@Tutorial(time: 10) {
  @Intro(title: "SyncUpDetail のテスト") {
    `SyncUpDetail` 機能は複雑になり、アラートと編集シート2つの画面遷移先を単一の列挙型でモデル化し、デリゲートアクションを通じて親機能とやりとりしています。
    将来の変更に強くするため、テストコードを書いてみましょう。
  }

  @Section(title: "編集フローのテスト") {
    @ContentAndMedia {
      編集フローのテストから始めましょう。
      "Edit" ボタンをタップして編集した Sync-up を親画面に反映するユーザフローを実行します。
    }

    @Steps {
      @Step {
        `SyncUpDetailTests.swift` ファイルを作成し、テストの基本的な骨組みをペーストします。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0001.swift)
      }

      @Step {
        `SyncUpDetail` 機能の `ComposableArchitecture/TestStore` を構築します。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0002.swift)
      }

      @Step {
        ユーザによる "Edit" ボタンのタップをエミュレートするために、 `destination` に `.edit` ケースをセットします。

        テストスイートはパスします。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0003.swift)
      }

      @Step {
        ユーザによる編集シート上での Sync-up タイトルの変更をエミュレートするために、 `.destination.edit` と `ComposableArchitecture/BindableAction/binding-108e1` アクションを用いて子画面での Sync-up の状態変更アクションを送信します。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0004.swift)
      }

      @Step {
        子画面から Sync-up の状態変更アクションを受信した後の状態を検査します。
        子画面の Sync-up を表す `destination.edit.syncUp` の状態を検査します。

        これも、テストスイートはパスします。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0005.swift)
      }

      @Step {
        ユーザによる "Done" ボタンのタップ操作をエミュレートし、ユーザによる一連の編集フローを完成させます。
        `destination` に `nil` をセットし、編集シートが閉じられることを検査します。
        また、親機能の `syncUp` の状態が、子画面で編集した Sync-up と一致することを検査します。

        テストスイートを実行すると、最後までパスしています。

        @Code(name: "SyncUpDetailTests.swift", file: TestingSyncUpDetail-01-code-0006.swift)
      }

      ユーザによる Sync-up の一連の編集フローをテストしたため、他に状態変更が発生していないことを保証できます。

      <doc:PresentingSyncUpForm> で行ったように、非網羅的 TestStore を用いてテストを簡易的にすることもできますが、読者の演習とします。
    }
  }
}
