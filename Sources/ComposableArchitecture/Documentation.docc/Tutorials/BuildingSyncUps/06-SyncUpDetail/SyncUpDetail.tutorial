@Tutorial(time: 5) {
  @Intro(title: "Sync-up 詳細") {
    Sync-up 詳細画面は Sync-up の情報を表示し、多くのアクションを含みます。
    この画面では、ユーザは Sync-up を登録・編集・削除したり、過去のミーティング情報の詳細情報を確認できたりします。
  }

  @Section(title: "Sync-up 詳細画面の作成") {
    @ContentAndMedia {
      Sync-up 詳細画面の土台を作成します。

      @Image(source: "SyncUpDetail-cover.png")
    }

    @Steps {
      @Step {
        `SyncUpDetail.swift` ファイルを作成し、 `SyncUpDetail` Reducer とビューの土台をペーストします。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0001.swift)
      }

      @Step {
        UI に表示する `syncUp` フィールドを `State` 構造体に追加します。

        [`@Shared`](<doc:Shared>) プロパティラッパーを付与して `SyncUpsList` 機能と状態を共有します。
        共有された状態は `SyncUpsList.State` から参照できます。

        > Note: 状態の共有と永続化戦略については <doc:SharingState> を参照してください。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0002.swift)
      }

      次に、ユーザがビューで実行するアクションを `Action` 列挙型に追加します。
      現在は2つのボタンが画面に配置しているので、それぞれにアクションを用意します。

      @Step {
        UI に表示する "Delete" ボタンと "Edit" ボタンのタップアクションを追加します。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0003.swift)
      }

      @Step {
        アクションに対する振る舞いを Reducer に追加しますが、ロジックはまだ実装しません。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0004.swift)
      }

      @Step {
        `SyncUpDetailView` 構造体でビューを定義します。
        ビューは状態の取得とアクションの送信を行う ``ComposableArchitecture/Store`` を保持します。

        > Note: `SyncUpDetail` Reducer のソースコードは折りたたんでいます。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0005.swift)
      }

      @Step {
        ビューの `body` は Apple の Scrumdinger アプリケーションを参考にペーストします。
        ビューにはビジネスロジックやプレゼンテーションロジックを記述せず、 `store` を通じた状態の取得とアクションの送信を行うに留めるようにしましょう。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0006.swift)
      }

      @Step {
        プレビューを確認します。

        @Code(name: "SyncUpDetail.swift", file: SyncUpDetail-01-code-0007.swift) {
          @Image(source: "SyncUpDetail-01-image-0007.png")
        }
      }
    }
  }
}
