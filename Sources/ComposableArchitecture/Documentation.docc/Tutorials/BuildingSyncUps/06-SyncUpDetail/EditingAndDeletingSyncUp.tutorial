@Tutorial(time: 30) {
  @Intro(title: "Sync-up の編集と削除") {
    Sync-up 詳細画面で Sync-up の編集と削除を行えるようにします。
    このチュートリアルでは、ビューの再利用や画面遷移、アラート、親子機能間でのやり取りなどを学習します。
  }

  @Section(title: "Sync-up の編集") {
    @ContentAndMedia {
      Sync-up の編集には `SyncUpFormView` のビューを再利用し、子機能から親への通信が含まれます。

      @Video(source: "EditingAndDeletingSyncUp-01-cover-480p.mov")
    }

    @Steps {
      TCA ライブラリのプレゼンテーションツールを使用し、 `SyncUpDetailView` から `SyncUpFormView` をシートで表示します。

      @Step {
        `SyncUpDetail.swift` に移動し、 ``ComposableArchitecture/Presents()`` マクロを使用して子機能のオプショナルな `SyncUpForm.State` を追加します。
        状態が `nil` かどうかでシートの表示状態を表しています。

        > Note: `SyncUpDetailView` のコードはスペースの都合上折りたたんでいます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0001.swift, previousFile: EditingAndDeletingSyncUp-01-code-0001-previous.swift)
      }

      @Step {
        `Action` 列挙型に子機能である `SyncUpForm` の ``ComposableArchitecture/PresentationAction`` をパラメータにとるケースを追加します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0002.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` 演算子を用いて 親機能の `SyncUpForm` Reducer と子機能の `SyncUpDetail` Reducer を統合します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0003.swift)
      }

      子機能と親機能のドメインを統合したので、プレゼンテーションロジックを実装します。

      @Step {
        "Edit" ボタンタップ時は `editSyncUp` に `nil` でない値をセットすることでシートを表示します。
        親機能の `syncUp` を子機能の `SyncUpForm` の初期状態として渡すことで状態を連動させることができます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0004.swift)
      }

      Sync-up 詳細画面から編集シートを表示するための Reducer の土台ができたので、ビューの実装に移ります。

      @Step {
        ビューの `store` プロパティに `@Bindable` プロパティラッパーを付与することでビューにバインド可能な Store にします。

        > Note: スペースの都合上 `SyncUpDetail` Reducer の実装を折りたたんでいます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0005.swift, previousFile: EditingAndDeletingSyncUp-01-code-0005-previous.swift)
      }

      @Step {
        ``SwiftUI/Binding/scope(state:action:fileID:filePath:line:column:)`` を用いて `SyncUpForm` ドメインにスコープを限定した Store を生成します。
        また、 `sheet(item:)` ビュー修飾子を用いて `SyncUpFormView` をシートで表示します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0006.swift)
      }

      @Step {
        シートにナビゲーションタイトルと編集した Sync-up の保存またはキャンセルを行うツールバーを追加します。

        > Note: `SyncUpsListView` で行ったように、ナビゲーションタイトルやツールバーといった NavigationStack のカスタマイズは、ビューの再利用性を高めるために、子ドメインではなく親ドメインで実装します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0007.swift)
      }

      @Step {
        ツールバーに配置したボタンのタップ時に Store に Action を送信するようにします。

        > Note: これらの Action は未定義であるため、次のステップで宣言を追加します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0008.swift)
      }

      `SyncUpForm` と `SyncUpDetail` のビューが統合できたので、 Reducer の統合に戻ります。

      @Step {
        ビューで送信するアクションを `Action` 列挙型に追加します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0009.swift, previousFile: EditingAndDeletingSyncUp-01-code-0009-previous.swift)
      }

      @Step {
        `cancelEditButtonTapped` アクションを実装します。
        このアクションでは `editSyncUp` に `nil` をセットすることでシートを閉じるようにします。

        > Note: 子機能である `SyncUpForm` と親機能である `SyncUpDetail` の `syncUp` は互いに独立しているため、子機能で編集した Sync-up は親機能の状態に影響を与えることなく破棄されます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0010.swift)
      }

      @Step {
        `doneEditingButtonTapped` アクションを実装します。
        子機能の State を表す `editSyncUp` から最新の `syncUp` 値を取得し `SyncUpDetail` の State をその値で置き換えます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-01-code-0011.swift)
      }

      @Step {
        プレビューを実行して "Edit" ボタンをタップすると Sync-up フォームシートが表示されます。
        次に Sync-up を編集し "Done" ボタンをタップすると詳細画面に反映されます。

        @Video(source: "EditingAndDeletingSyncUp-01-cover-480p.mov")
      }
    }
  }

  @Section(title: "Sync-up の削除") {
    @ContentAndMedia {
      詳細画面から Sync-up を削除するロジックを実装しますが、誤削除を防ぐためにアラートを用いてユーザに削除確認を求めるようにします。

      @Video(source: "EditingAndDeletingSyncUp-02-cover-480p.mov")
    }

    @Steps {
      技術的には TCA は SwiftUI と同様に `alert` ビュー修飾子を用いてアラートを表示します。
      TCA ライブラリにはテスト可能なアラートを表示するためのツールが提供されています。

      @Step {
        `Action` 列挙型の内部に、アラート内でユーザが実行するすべてのアクションを記述した列挙型を追加します。
        ただし、キャンセルアクションは TCA ライブラリの画面遷移ツールによって自動的に処理されるため、削除確認アクションを追加するだけで構いません。

        > Note: 全てのアクションを KeyPath 構文で指定可能にするために、 `Action` 列挙型の内部に定義した列挙型には `@CasePathable` マクロを適用しています。
        > `@CasePathable` マクロは Reducer 内で定義する `Action` 列挙型に対しては自動的に適用されますが、それ以外の列挙型については手動で適用する必要があります。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0001.swift, previousFile: EditingAndDeletingSyncUp-02-code-0001-previous.swift)
      }

      @Step {
        ``ComposableArchitecture/Presents()`` マクロを用いて、アラートの表示状態を表す `AlertState` を追加します。

        > Note: TCA 内部で [SwiftUINavigation][swiftui-nav-gh] ライブラリの [``AlertState``][alert-state-docs] を使用しています。

        [swiftui-nav-gh]: http://github.com/pointfreeco/swiftui-navigation
        [alert-state-docs]: https://swiftpackageindex.com/pointfreeco/swiftui-navigation/1.2.0/documentation/swiftuinavigationcore/alertstate

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0002.swift)
      }

      @Step {
        アラートによって送信される ``ComposableArchitecture/PresentationAction`` をパラメータにとるアクションを `Action` 列挙型に追加します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0003.swift)
      }

      @Step {
        Reducer で `.alert` アクション受信時の振る舞いを記述し、 ``ComposableArchitecture/Reducer/ifLet(_:action:then:fileID:line:)-7s8h2`` 演算子を用いて `SyncUpDetail` Reducer にアラートロジックを統合できるようにします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0004.swift)
      }

      アラート自体は内部ロジックや追加の振る舞いを持たないため、機能を統合する場合とは記述が少し異なります。
      アラートを統合する場合は `ifLet` の Trailing closure で Reducer を指定する必要はありません。

      @Step {
        アラート自体には追加の振る舞いがないため、 `ifLet` の Trailing closure を削除します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0005.swift)
      }

      アラート機能を `SyncUpDetail` に統合したので、次はアラートを表示するために `alert` に `AlertState` をセットしていません。
      `AlertState` はタイトル、メッセージ、ボタンなどアラートに関するプロパティを保持するデータ型で `Equatable` に準拠しているため、テストで検査可能なアラートとして定義されています。

      @Step {
        `alert` プロパティにセットする `AlertState` を構築します。
        `AlertState` には3つの Trailing closure があり、タイトル、ボタン、メッセージを設定します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0006.swift)
      }

      `AlertState` を構築し、ビューに表示するアラート情報を定義しました。

      また、 `AlertState` の拡張機能を用いて構築部分を抽出することもできます。

      @Step {
        `AlertState` の型を拡張し、 `AlertState` の構築を抽出します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0007.swift)
      }

      次に Reducer でアラートから受け取るアクション受信時の振る舞いを記述します。

      @Step {
        `Reduce` 内の `switch` 文でアラートから受信する `.alert` アクションを分解します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0008.swift)
      }

      @Step {
        `.alert(.dismiss)` ケースでは `ifLet` 演算子が自動的に状態を初期化するため、何も実行しません。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0009.swift)
      }

      `.alert(.presented)` ケースはユーザが Sync-up の削除を確認した際の処理であるため、 `SyncUpsList` 機能の Sync-up コレクションから `syncUp` を削除する必要があります。

      <doc:PersistingSyncUps> では、 [`@Shared`](<doc:Shared>) プロパティラッパー と ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` 永続化戦略を用いて Sync-up コレクションを永続化することでアプリケーションはグローバルな状態にアクセスできるようにしました。
      この永続化戦略は `.confirmButtonTapped` アクション内部で直接インライン定義することもできます。

      @Step {
        ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` 永続化戦略を持つ ``Shared`` プロパティラッパーを用いて、ディスクから Sync-up を取得します。

        > Note: アクセスごとにディスクからデータをロードしているのではなく、ディスクから [`@Shared`](<doc:Shared>) 参照にキャッシュしたデータを取得しています。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0010.swift)
      }

      @Step {
        詳細画面で保持している Sync-up の `id` を用いて、ディスクに永続化された `syncUps` コレクションから要素を削除します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0011.swift)
      }

      永続化された Sync-up 配列から要素を削除しましたが、グローバルな `syncUps` を編集するのは外部サーバのデータを操作する API リクエストと似ています。
      API リクエストを扱う場合は依存関係を制御してテスト可能にする必要がありますが、 [`@Shared`](<doc:Shared>) プロパティラッパーはデフォルトでテスト可能です。

      Sync-up 詳細機能からグローバルな `syncUps` にアクセスする代わりに、子機能でデリゲートアクションを送信し親機能で削除ロジックを実装することもできます。

      ユーザが Sync-up の削除を確認したら詳細シートを非表示にします。

      TCA ライブラリには ``ComposableArchitecture/DismissEffect`` という、統合された子画面を閉じるための依存関係が提供されています。
      子機能が親と明示的なやり取りを行わなくて済むようにカプセル化されており、 SwiftUI の `@Environment(\.dismiss)` と類似しています。

      @Step {
        `@Dependency` プロパティラッパーを用いて ``ComposableArchitecture/DismissEffect`` への依存関係を `SyncUpDetail` 機能に追加します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0012.swift)
      }

      ``ComposableArchitecture/DismissEffect`` 依存関係を用いて子画面を閉じるには ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)`` Effect 内で `dismiss()` を呼び出します。
      ここで、 `dismiss` Effect は非同期関数であり Reducer で直接呼び出せないため、 ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)`` Effect が提供する非同期コンテキストと ``ComposableArchitecture/Send`` 構造体を利用しています。

      @Step {
        親機能にデリゲートアクションを送信するために `dismiss` を呼び出す `.run` Effect を返します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0013.swift)
      }

      `alert` に `nil` でない値がセットされた場合にアラートが表示されるよう、ビュー層にアラートを統合します。

      @Step {
        `SyncUpDetailView` に TCA ライブラリの ``SwiftUI/View/alert(_:)`` ビュー修飾子を適用し、 `alert` がセットされたときにアラートが表示されるようにします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-02-code-0014.swift, previousFile: EditingAndDeletingSyncUp-02-code-0014-previous.swift)
      }

      詳細画面に Sync-up 削除機能を追加しましたが、 Sync-up リスト画面から詳細画面への画面遷移を実装する前にドメインモデリングを改善しましょう。
    }
  }

  @Section(title: "簡潔なドメインモデリング") {
    @ContentAndMedia {
      `SyncUpDetail` ドメインモデルでアラートと編集シートを2つの独立したオプショナル値で宣言しているのは、無効な状態が生じる可能性があるため改善すべきです。

      すべてのオプショナル値が `nil` である(= 子画面が表示されていない)か、1つの値のみが `nil` でない(= 子画面が1つだけ表示されている)べきです。

      不正確なドメインモデリングは機能の複雑さに繋がるため、改善していきます。
    }

    @Steps {
      @Step {
        `SyncUpDetail` 内部に列挙型の `Destination` Reducer を追加し、詳細画面から遷移可能なすべての画面を単一の状態で保持します。

        [`@Reducer`](<doc:Reducer()>) マクロを列挙型に適用することで複数の Reducer を1つのパッケージに統合できます。

        > Important: > `Destination` Reducer の `State` 型を拡張して `Equatable` に準拠させることでテストで検査可能な状態として定義します。

        > Note: このコードスニペットでは `SyncUpDetail` と `SyncUpDetailView` の実装を折りたたんでいます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0001.swift, previousFile: EditingAndDeletingSyncUp-03-code-0001-previous.swift)
      }

      @Step {
        詳細機能から遷移可能な各機能の Reducer をパラメータにとる `Destination` 列挙型のケースとして定義しますが、 `alert`ケースは例外的に `AlertState` をとるようにします。

        また、 `Alert` アクション列挙型を `SyncUpDetail.Action` 型から `Destination` 内に移動します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0002.swift)
      }

      遷移先である機能のすべてのロジックと振る舞いをカプセル化した `Destination` Reducer を定義しました。
      Xcode で [`@Reducer`](<doc:Reducer()>) マクロを右クリックし、 "Expand macro" を選択すると、マクロによって自動生成されるコードをすべて確認できます。

      次に、 `Destination` Reducer を親機能である `SyncUpDetail` Reducer に統合します。

      @Step {
        `SyncUpDetail.State` 内の2つの独立したオプショナルな状態を、単一のオプショナルな `Destination.State` に置き換えます。

        これにより、現在表示されている子画面を表せるようになりました。

        > Note: 現時点ではコンパイルエラーが発生します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0003.swift, previousFile: EditingAndDeletingSyncUp-03-code-0003-previous.swift)
      }

      @Step {
        子画面で表示するアラートと編集シートのアクションを `Destination.Action` の ``ComposableArchitecture/PresentationAction`` を保持する単一の `.destination` ケースに置き換えます。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0004.swift)
      }

      @Step {
        `SyncUpDetail` の2つの `ifLet` 演算子を `Destination` Reducer を構成する単一の `ifLet` 演算子に置き換えます。

        > Note: [`@Reducer`](<doc:Reducer()>) マクロを付与した Reducer が自動的に使用されるため、 `ifLet` の Trailing closure を記述する必要はありません。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0005.swift)
      }

      `Destination` Reducer を `SyncUpDetail` Reducer に統合したので、次は遷移先の State と Action を処理する `Reduce` を更新する必要があります。

      @Step {
        アラート確認アクションは `.destination(.presented)` ケースで処理します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0006.swift)
      }

      @Step {
        他のすべての `.destination` アクションに対して `.none` を返します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0007.swift)
      }

      @Step {
        `editSyncUp` の状態は削除したので、 `destination` に `nil` をセットします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0008.swift)
      }

      @Step {
        `alert` の状態も削除したので、 `destination` に `.alert` をセットします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0009.swift)
      }

      @Step {
        `.doneEditingButtonTapped` アクションでは編集フォームで入力中の Sync-up を `destination` 列挙型の `.edit` から取得します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0010.swift)
      }

      @Step {
        `editSyncUp` の状態は削除したので、 `destination` に `.edit` ケースをセットし、 `SyncUpForm` に `SyncUpDetail` の状態を渡すようにします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0011.swift)
      }

      @Step {
        `AlertState` の型を拡張し、 `Destination` のアラートアクションの型制約を満たすようにします。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0012.swift)
      }

      `Destination` Reducer を `SyncUpDetail` Reducer に完全に統合しました。
      次に、 `Destination` 列挙型を通じてアラートと編集シートを表示できるようビューを更新します。

      @Step {
        ビューの ``SwiftUI/View/alert(_:)`` と `.sheet(item:)` ビュー修飾子を更新し、 `$store.scope` を用いて画面遷移時に使用する Store のスコープを限定します。

        @Code(name: "SyncUpDetail.swift", file: EditingAndDeletingSyncUp-03-code-0013.swift, previousFile: EditingAndDeletingSyncUp-03-code-0013-previous.swift)
      }

      複数のオプショナルな状態を定義するのではなく `Destination` 列挙型を用いて画面遷移先を指定することで、ドメインモデルは簡潔になり、現在の画面遷移の状態を明確に表現できるようになりました。
    }
  }
}
