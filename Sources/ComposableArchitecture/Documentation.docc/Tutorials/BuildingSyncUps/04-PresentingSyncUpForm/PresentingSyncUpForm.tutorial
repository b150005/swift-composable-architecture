@Tutorial(time: 10) {
  @Intro(title: "Sync-up フォームの表示") {
    現在、 Sync-up リストとフォームの2機能を実装しました。
    リスト画面からフォームに移動して詳細を入力し、 Root ビューに表示するリストに追加できるようにします。
  }

  @Section(title: "機能ドメインの統合") {
    @ContentAndMedia {
      リスト画面からフォームを表示するために Sync-up リストとフォームのドメインを統合し、 Sync-up リストがフォームの State と Action を保持するように変更します。
    }

    @Steps {
      `SyncUpsList.swift` で定義した `SyncUpLists` Reducer の `State` 構造体を更新し、 Sync-up フォーム機能の State をオプショナルな `SyncUpForm.State` で保持します。
      `nil` は画面が表示されていないことを表し、 `nil` でない場合は表示されていることを表します。

      @Step {
        `State` 構造体にオプショナルな `SyncUpForm.State` 型のフィールドを追加します。
        ``ComposableArchitecture/Presents()`` マクロを付与することで、子機能の状態を表現することができます。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-01-code-0001.swift, previousFile: PresentingSyncUpForm-01-code-0001-previous.swift)
      }

      @Step {
        `Action` 列挙型に ``ComposableArchitecture/PresentationAction`` 型でラップした `SyncUpForm.Action` をパラメータにとるケースを追加します。
        `PresentationAction` 型は、ユーザが子画面を閉じたときに送信される ``ComposableArchitecture/PresentationAction/dismiss`` アクションを包含しています。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-01-code-0002.swift)
      }

      @Step {
        Reducer で追加した Action を受信した場合の振る舞いを実装します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-01-code-0003.swift)
      }

      Sync-up リストとフォーム機能の State と Action を統合しました。
      次に、機能のロジックと振る舞いを表す Reducer を統合します。

      ``ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q`` 演算子を用いてオプショナルな子機能を親機能に統合します。
      `ifLet` 演算子は、親機能に統合された子機能のプレゼンテーションドメインを特定し、そのドメインで実行する子 Reducer を指定できます。
      また、子と親の Reducer の実行順序や子画面が閉じられたときの Effect の自動キャンセルなど、多くのロジックを内部的に処理し、子が親と連携せずに子画面を閉じることができる ``DismissEffect`` 依存関係を参照できるようになります。

      @Step {
        `ifLet` 演算子を使用して `addSyncUp` の State と Action への KeyPath を指定します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-01-code-0004.swift)
      }

      @Step {
        `addSyncUpButtonTapped` アクション受信時に `addSyncUp` に `nil` でない値をセットし、 State を監視するビューがフォームを表示するようにします。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-01-code-0005.swift)
      }

      しかし、まだ `SyncUpFormView` はシートやポップオーバー、全画面表示など、どのように表示するか指定していません。
      Reducer はオプショナルな子機能のドメインモデリングのみを扱うため、画面遷移の形式はビュー側で実装します。
    }
  }

  @Section(title: "機能とビューの統合") {
    @ContentAndMedia {
      `SyncUpsList` と `SyncUpForm` の Reducer を統合したので、次は SwiftUI のナビゲーションビュー修飾子を用いて機能とビューを統合します。
    }

    @Steps {
      "Add sync-up" 機能をシートで表示します。全画面表示や他の画面遷移形式も使用可能ですが、ここではシートで表示します。

      @Step {
        SwiftUI ネイティブのナビゲーションビュー修飾子である `sheet(item:)` は、子画面の Identifiable な オプショナルの `Binding` 値をパラメータに取ります。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-02-code-0001.swift, previousFile: PresentingSyncUpForm-02-code-0001-previous.swift)
      }

      Reducer から子機能の Store を `Binding` 型として抽出できるよう、 TCA ライブラリは ``SwiftUI/Binding/scope(state:action:fileID:filePath:line:column:)`` 演算子を提供しています。

      @Step {
        Store を `Binding` 型として変換するため、ビューの `store` プロパティに `@Bindable` プロパティラッパーを付与します。

        > Note: プラットフォームの制約によって `@Bindable` プロパティラッパーが利用できない場合は、 TCA ライブラリの `@Perception.Bindable` プロパティラッパーを使用します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-02-code-0002.swift)
      }

      @Step {
        `$store` に ``SwiftUI/Binding/scope(state:action:fileID:filePath:line:column:)`` 演算子を用いて `SyncUpForm` のプレゼンテーションドメインにスコープを限定した `Binding` 値を抽出します。
        `sheet(item:)` 修飾子によって Trailing closure に渡された `StoreOf` オブジェクトを `SyncUpFormView` にそのまま渡すことができます。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-02-code-0003.swift)
      }

      ビューの `store` プロパティに `@Bindable` アノテーションを付与することで `Binding` 型への変換を可能にするとともに `scope` 演算子を用いて抽出した子ドメインの Store を `sheet(item:)` に渡すことでビューを統合しました。

      @Step {
        プレビューまたはシミュレータでアプリケーションを実行します。
        "+" ボタンをタップすると Sync-up フォームシートが表示され、シートを下にスワイプして閉じることもできます。

        @Video(source: PresentingSyncUpForm-02-video-0004.mov)
      }

      また、 `sheet(item:)` の部分は `popover(item:)` や `fullScreenCover(item:)` 、またはオプショナルな `Binding` 値をパラメータにとり画面遷移を行う他の SwiftUI ビュー修飾子に置き換えることもできます。
    }
  }

  @Section(title: "リストへの Sync-up の追加") {
    @ContentAndMedia {
      `SyncUpsList` と `SyncUpForm` の2つの機能をドメイン(State と Action を含む Reducer)とビューの両方で統合しました。
      最後に、フォームシートで入力した Sync-up を Root ビューのリストに追加するボタンを配置します。

      `SyncUpFormView` に直接ボタンを追加してしまうと登録と編集の2つの場面で再利用する際に複雑なプレゼンテーションロジックが必要となるため、親ビューでツールバーを配置しフォームデータの保存と破棄を行えるようにします。
    }

    @Steps {
      @Step {
        `SyncUpsList.swift` に移動し、 `SyncUpFormView` を `NavigationStack` でラップして、ツールバーを追加します。
        Sync-up の追加と破棄を行うツールバーとナビゲーションタイトルを追加します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-03-code-0001.swift, previousFile: PresentingSyncUpForm-03-code-0001-previous.swift)
      }

      "New sync-up" というナビゲーションタイトルは新規登録の場面に固有のものであり、編集時に表示するのは不適切です。
      子ビューである `SyncUpForm` で定義してしまうと、登録時と編集時でプレゼンテーションロジックを分ける必要が生じてしまいます。

      まだツールバーをタップしても何も起こらないため、 Store に Action を送信しましょう。

      @Step {
        ツールバーの各ボタンで Store に Action を送信します。

        > Note: これらの Action はまだドメインに追加していないため、コンパイラエラーが発生します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-03-code-0002.swift)
      }

      Store に Action を送信しているので、これらの Action を機能に追加し、 Reducer の振る舞いを実装します。

      @Step {
        `SyncUpsList` Reducer の `Action` 列挙型に、 Sync-up の登録承認アクションと入力中のデータの破棄アクションを追加します。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-03-code-0003.swift, previousFile: PresentingSyncUpForm-03-code-0003-previous.swift)
      }

      @Step {
        `confirmAddButtonTapped` アクション受信時のロジックを実装します。
        オプショナルな `addSyncUp` をアンラップし、入力された Sync-up を `syncUps` 配列に追加します。
        また、シートを閉じるために `addSyncUp` に `nil` をセットします。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-03-code-0004.swift)
      }

      @Step {
        `discardButtonTapped` アクション受信時のロジックを実装します。
        シートを閉じるために `addSyncUp` に `nil` をセットします。

        @Code(name: "SyncUpsList.swift", file: PresentingSyncUpForm-03-code-0005.swift)
      }

      @Step {
        プレビューを実行して "Add sync-up" シートを表示し、 Root ビューで表示するリストに Sync-up を追加できることを確認します。

        @Video(source: "PresentingSyncUpForm-03-code-0006.mov")
      }
    }
  }
}
