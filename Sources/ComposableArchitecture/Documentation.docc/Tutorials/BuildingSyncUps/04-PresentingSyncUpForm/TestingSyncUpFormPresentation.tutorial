@Tutorial(time: 10) {
  @Intro(title: "Sync-up 登録フローのテスト") {
    `SyncUpsList` と `SyncUpForm` の機能を統合しました。
    テストコードの記述と非網羅的テストについて紹介します。
  }

  @Section(title: "Sync-up の登録") {
    @ContentAndMedia {
      Sync-up の登録フローをテストしましょう。
    }

    @Steps {
      @Step {
        リスト機能とフォーム機能の統合をテストコードを `SyncUpsListTests.swift` ファイルに記述します。
        Sync-up 登録フローのテストメソッドを追加しましょう。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0001.swift, previousFile: TestingSyncUpFormPresentation-01-code-0001-previous.swift)
      }

      @Step {
        TCA のテストでは ``ComposableArchitecture/TestStore`` を作成することから始めます。
        今回の初期状態は Sync-up が1つもない状態にします。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0002.swift)
      }

      @Step {
        ユーザによる "+" ボタンタップをエミュレートするために `addSyncUpButtonTapped` アクションを送信します。
        このアクションが送信されると、登録フォームシートの表示状態を表す `addSyncUp` に値がセットされることを検査します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0003.swift)
      }

      @Step {
        現時点ではテストに失敗します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0004.swift)
      }

      `SyncUpForm` 機能のテストと同様、 `SyncUpsList` 機能で UUID を生成するのに制御不能な依存関係を使用した結果、生成される UUID が予測できていないことが失敗の原因です。

      @Step {
        `SyncUpsList.swift` に移動し、 UUID ジェネレータへの依存関係を追加します。

        @Code(name: "SyncUpsList.swift", file: TestingSyncUpFormPresentation-01-code-0005.swift, previousFile: TestingSyncUpFormPresentation-01-code-0005-previous.swift)
      }

      @Step {
        グローバルな制御不能の UUID イニシャライザを利用するのではなく、制御可能な UUID ジェネレータを利用します。

        @Code(name: "SyncUpsList.swift", file: TestingSyncUpFormPresentation-01-code-0006.swift)
      }

      @Step {
        `SyncUpsListTests.swift` に戻り、 `uuid` 依存関係を `.incrementing` でオーバーライドすると、テスト時に生成される UUID が予測可能なものになります。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0007.swift, previousFile: TestingSyncUpFormPresentation-01-code-0007-previous.swift)
      }

      これで、機能で生成される UUID が予測可能なものになりました。
      `00000000-0000-0000-0000-000000000000`, `00000000-0000-0000-0000-000000000001` のように、呼び出し毎にインクリメントされる UUID が生成されます。

      @Step {
        登録した `SyncUp` ID が `00000000-0000-0000-0000-000000000000` であることを検査します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0008.swift)
      }

      テストはパスするようになりました。

      次は、ユーザがフォームで Sync-up を編集すると Root ビューで表示するリストに反映されることを検査していきます。

      @Step {
        ユーザによる Sync-up の編集操作をエミュレートするために、 Sync-up フォームのドメインでアクションを送信します。

        > Note: KeyPath 構文を用いて親ドメインの State を取得しています。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0009.swift)
      }

      @Step {
        `.addSyncUp` ケースを通じて `SyncUpForm` ドメインのアクションを送信できます。
        ``ComposableArchitecture/BindingAction`` を引数にとる ``ComposableArchitecture/BindableAction/binding(_:)`` アクションを使用して UI コントロールにバインドする State を指定します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0010.swift)
      }

      @Step {
        `.binding` をチェーンして子機能の状態を指定し、ユーザによる `SyncUp` の編集操作と操作後に期待される状態を検査します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0011.swift)
      }

      テストはパスします。

      ユーザが "New Sync-up" シートを開き、 Sync-up の登録操作をエミュレートしたので、次は追加した Sync-up が Root ビューのリストに反映されていることを検査しましょう。

      @Step {
        Sync-up の入力後に "Add" ボタンをタップするユーザ操作をエミュレートします。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0012.swift)
      }

      @Step {
        テストは失敗します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0013.swift)
      }

      Sync-up の追加後にシートを閉じるために `addSyncUp` を `nil` で初期化するため、テストに失敗しています。
      ``ComposableArchitecture/TestStore`` はロジックで生じるすべての状態の変化を検査することを強制するためです。

      シートを閉じる際の状態の変化を検査しましょう。

      @Step {
        `confirmAddButtonTapped` アクションの送信後に `SyncUpsList` 機能が `syncUps` 配列を更新し、シートの表示状態を表す `addSyncUp` 状態を `nil` でセットしていることを検査します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-01-code-0014.swift)
      }

      ユーザが "New sync-up" シートを表示してデータを入力し "Add" ボタンをタップする、一連の Sync-up の登録フローが正しく動作していることを検査しました。
    }
  }

  @Section(title: "非網羅的テスト") {
    @ContentAndMedia {
      これまでのテストコードは小さな状態の変化を徹底的に検査する網羅的テストでした。

      機能が複雑かつ肥大化するとテストコードの記述量が増えてしまうため、非網羅的テストとして一部の状態のみを検査することもできます。

      一般的には、テストスイートには網羅的テストと非網羅的テストの両方が含まれます。
      網羅的テストはすべての状態の検査と Effect の実行を強制し、小規模な機能や個別機能のテストに適しています。
      一方、非網羅的テストは特定の状態や Effect の検査のみ行い、大規模かつ複雑な機能や統合された複数の機能のテストに適しています。
    }

    @Steps {
      @Step {
        "Add sync-up" フローをテストするテストメソッドを追加しますが、今回は非網羅的な方法で実装します。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0001.swift, previousFile: TestingSyncUpFormPresentation-02-code-0001-previous.swift)
      }

      @Step {
        ``ComposableArchitecture/TestStore`` の ``ComposableArchitecture/TestStore/exhaustivity`` を `.off` にセットし、非網羅的テストを有効化します。

        > Note: ``ComposableArchitecture/TestStore/exhaustivity`` のデフォルト値は `.on` です。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0002.swift)
      }

      @Step {
        "+" ボタンのタップ操作をエミュレートするために `.addSyncUpButtonTapped` アクションを送信します。

        テストを実行するとパスします。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0003.swift)
      }

      非網羅的テストでは ``ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl`` の Trailing closure で状態の変化を検査していないにもかかわらず、テストはパスします。

      ``ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl`` の Trailing closure に渡される `$0` は、網羅的テストではアクション送信前の状態、非網羅的テストではアクション送信後の状態を表します。
      そのため、非網羅的テストでは Trailing closure で変更を加える必要はありません。
      詳細については <doc:Testing#Non-exhaustive-testing> を参照してください。

      @Step {
        ユーザによる Sync-up の編集操作をエミュレートしますが、状態の変化については検査しないようにします。

        テストはこれでもパスします。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0004.swift)
      }

      @Step {
        ユーザが Sync-up の登録を確認するために "Add" ボタンをタップする操作をエミュレートします。
        Trailing closure で、登録した Sync-up が Root ビューのリスト反映されていることを検査します。

        テストはパスします。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0005.swift)
      }

      ユーザの Sync-up 登録フローに関する非網羅的テストでは、操作途中の細かい状態は確認せず、最終的な状態(入力した Sync-up が Root ビューのリストに追加されること)を検査しています。

      非網羅的テストモードに切り替えるには ``ComposableArchitecture/Exhaustivity/off(showSkippedAssertions:)`` の `showSkippedAssertions` フラグ(デフォルト値は `false`)を明示的に `true` に変更することで、テストケースの合否に影響を与えず状態の変化を確認することもできます。

      @Step {
        TestStore の `exhaustivity` を切り替え、非網羅的モードとして設定します。

        テストはパスするようになり、 Xcode でグレーの情報ボックスが表示され、検査がスキップされた状態の変化を知らせてくれます。

        @Code(name: "SyncUpsListTests.swift", file: TestingSyncUpFormPresentation-02-code-0006.swift)
      }

      この非網羅的テストモードは状態の検査を徹底的に行う必要がないためデバッグに適している一方で、バグを含むテストケースをパスさせてしまっている可能性も存在します。

      シミュレータやデバイスでバグを発見した場合、 `showSkippedAssertions` フラグを `true` にセットして全ての状態を確認してください。
    }
  }
}
