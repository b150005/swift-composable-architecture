@Tutorial(time: 20) {
  @Intro(title: "Sync-up 詳細画面への遷移") {
    これまでに構築した画面を `NavigationStack` でラップし、詳細画面に遷移できるようにします。
    `NavigationStack` で全ての機能を統合するため、 Root となる親機能を作成します。
  }

  @Section(title: "アプリケーション機能の作成") {
    @ContentAndMedia {
      `NavigationStack` をもつ新機能を作成します。
    }

    @Steps {
      @Step {
        `App.swift` ファイルを作成し、 TCA の土台をペーストします。

        > Note: プロジェクトにすでにアプリケーションのエントリーポイント(`@main` を含む) `App.swift` がある場合は `AppFeature.swift` と名付けるか、既存の `App.swift` を `Main.swift` に名前変更してください。
        >
        > Reducer に "Feature" や "Reducer" などの接尾辞をつけるべきではありませんが、 SwiftUI の [App](https://developer.apple.com/documentation/swiftui/app) プロトコルとの競合を避けるため `AppFeature` と命名しています。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0001.swift)
      }

      この機能の主な責務は `NavigationStack` で表示するすべての機能を統合することであり、現在は `SyncUpsList` と `SyncUpDetail` の2機能が該当します。
      将来的にはミーティングの記録や過去のミーティングの表示など、 `NavigationStack` で表示する対象機能が増えることが予想されます。

      SyncUpsList 機能は `NavigationStack` の Root にあり、閉じることができない点で他の機能とは異なります。
      そのため、親機能には SyncUpsList の State と Action を持たせ、 ``ComposableArchitecture/Scope`` Reducer を用いて `AppFeature` の `body` に直接組み込みます。

      @Step {
        `SyncUpsList` Reducer の State と Action を保持し、 ``ComposableArchitecture/Scope`` Reducer と AppFeature の Reducer を組み合わせて `AppFeature` に統合します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0002.swift)
      }

      次に、 `SyncUpDetail` Reducer を `AppFeature` に統合します。
      TCA ライブラリには `NavigationStack` の処理に特化した ``ComposableArchitecture/StackState`` というコレクション型が用意されています。

      @Step {
        `SyncUpDetail` の State を `AppFeature` に統合するために ``ComposableArchitecture/StackState`` 型の `path` を保持します。
        この命名は SwiftUI の `NavigationStack(path:)` API に由来させています。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0003.swift)
      }

      `NavigationStack` には `SyncUpDetail` 以外にも `RecordMeeting` や `Meeting` 機能を表示させますが、将来的には表示する機能がさらに増える可能性もあります。

      そのため、 `NavigationStack` で任意の数の機能を扱えるようにモデル化します。
      これは、 <doc:EditingAndDeletingSyncUp> の `Destination` Reducer と同様です。

      @Step {
        `AppFeature` 内に `Path` Reducer を作成します。
        Sync-up 詳細画面で定義した `Destination` Reducer と同様、 `Path` 型は列挙型として宣言し、遷移可能なすべての画面を単一の Reducer として構成します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0004.swift)
      }

      @Step {
        `SyncUpDetail` に遷移させるため、 `Path` に Reducer をパラメータにもつケースを追加します。
        将来的にはこの `Path` 列挙型にケースを追加して `NavigationStack` でプッシュする機能を追加していきます。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0005.swift)
      }

      `NavigationStack` 内の各画面のロジックと振る舞いをカプセル化した単一の Reducer を作成しました。
      `NavigationStack` に新しく画面を追加する場合は、この Reducer にケースを追加するだけです。

      次に、 `Path` Reducer を `AppFeature` Reducer に統合します。

      @Step {
        `path` 変数を更新して、 `Path.State` の ``ComposableArchitecture/StackState`` を保持するようにします。

        > Important: 遷移先の `State` が `Equatable` であることを保証するために `Path.State` を型拡張して `Equatable` に準拠させます。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0006.swift)
      }

      @Step {
        `Action` 列挙型に ``ComposableArchitecture/StackAction`` をパラメータにとる `Path` のアクションケースを追加し、 `AppFeature` に統合します。
        ``ComposableArchitecture/StackActionOf`` を用いて `Path` Reducer の Action を単一のジェネリックなタイプエイリアスとして定義します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0007.swift)

        > Note: 現時点では `.path` アクションで実行するロジックがないため `.none` Effect を返しています。
      }

      ``ComposableArchitecture/StackAction`` は `NavigationStack` で発生する、以下のような基本的なアクションを表現する型です。
      - NavigationStack 内の要素がアクションを送信する(``ComposableArchitecture/StackAction/element(id:action:)``)
      - NavigationStack に要素をプッシュする(``ComposableArchitecture/StackAction/push(id:state:)``)
      - NavigationStack から要素をポップする(``ComposableArchitecture/StackAction/popFrom(id:)``)

      @Step {
        ``ComposableArchitecture/Reducer/forEach(_:action:)`` 演算子を用いて `Path` Reducer を `AppFeature` Reducer の `body` に統合します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-01-code-0008.swift)
      }

      ``ComposableArchitecture/Reducer/forEach(_:action:)`` 演算子は受信した ``ComposableArchitecture/StackAction`` を処理し、 NavigationStack 内の Reducer にルーティングし、機能が `NavigationStack` からポップした場合(= 遷移先の子画面が非表示になった場合)は自動的に実行中の Effect をキャンセルします。

      `AppFeature` Reducer を作成し `SyncUpDetail` を `NavigationStack` に統合したため、次に、ビュー階層を構築します。
    }
  }

  @Section(title: "アプリケーションビューの作成") {
    @ContentAndMedia {
      `NavigationStack` を保持するビューを作成します。
    }

    @Steps {
      @Step {
        SwiftUI の `View` プロトコルに準拠した `AppView` 構造体を作成します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0001.swift, previousFile: SyncUpDetailNavigation-02-code-0001-previous.swift)        
      }

      @Step {
        ビューに `@Bindable` を付与した `store` プロパティを追加し、 `NavigationStack` の機能とビューをバインドできるようにします。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0002.swift)
      }

      @Step {
        `NavigationStack` は TCA ライブラリの ``SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)`` イニシャライザを用いてビューの `body` を構築します。
        このイニシャライザは `NavigationStack` ドメインにスコープを限定した Store と2つの Trailing closure を取り、1つ目のクロージャは Root ビューを、2つ目のクロージャは `NavigationStack` にプッシュする遷移先ビューに適用する処理を記述します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0003.swift)
      }

      @Step {
        1つ目のクロージャに記述する Root ビューは、 ``ComposableArchitecture/Store/scope(state:action:)-90255`` を用いて `SyncUpsList` ドメインに分離した Store をもつ `SyncUpsListView` を構築します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0004.swift)
      }

      @Step {
        2つ目のクロージャには `path` にスコープが限定された `store` 列挙型オブジェクトが渡され、 `store.case` を通じて子機能の Store にアクセスできます。
        `Path` 列挙型に ``Reducer()`` マクロを付与しているため子 Store にアクセスできるようになっています。

        列挙型 Reducer の詳細については <doc:Reducer#Destination-and-path-reducers> を参照してください。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0005.swift)
      }

      @Step {
        `Path` 列挙型で定義した各 Store を遷移先ビューに渡し、子画面を構築します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0006.swift)
      }

      @Step {
        プレビューを追加します。

        @Code(name: "App.swift", file: SyncUpDetailNavigation-02-code-0007.swift)
      }

      `NavigationStack` を保持する Root ビューとなる `AppView` を構築しましたが、現時点では Sync-up リスト画面から詳細画面に画面遷移するためのボタンはありません。
    }
  }

  @Section(title: "Sync-up 詳細画面への遷移") {
    @ContentAndMedia {
      リスト画面から詳細画面に画面遷移するには `AppFeature` の `path` に `SyncUpDetail.State` をセットする必要がありますが、最も簡単なのは `NavigationLink` を用いてタップ時に自動的に `path` に状態をセットする方法です。
    }

    @Steps {
      @Step {
        `SyncUpListView` を定義した `SyncUpsList.swift` ファイルに移動するとリスト画面内に `Button` があるので、 TCA ライブラリの `NavigationLink` イニシャライザである ``SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)`` で置き換えます。

        @Code(name: "SyncUpsList.swift", file: SyncUpDetailNavigation-03-code-0001.swift, previousFile: SyncUpDetailNavigation-03-code-0001-previous.swift)
      }

      このイニシャライザでは、 Root 機能で定義した ``ComposableArchitecture/StackState`` が保持する型に一致する状態を指定します。
      今回の例では `AppFeature.Path.State` に一致する `SyncUpDetail` の状態を渡します。

      @Step {
        Sync-up 詳細機能への画面遷移であるため、 `NavigationLink` の `state` パラメータには `Path.State.detail` を渡します。

        @Code(name: "SyncUpsList.swift", file: SyncUpDetailNavigation-03-code-0002.swift)
      }

      ここで `SyncUpDetail.State` の構築時に `Shared<SyncUp>` 値が必要ですが `SyncUpsList.State` の `syncUps` を共有状態として指定することで、詳細機能から状態の編集と `SyncUpsList.State` への反映を可能にします。

      ``ComposableArchitecture/Shared/elements`` プロパティを通じて [`@Shared`](<doc:Shared>) アノテーションを付与した `Shared` のバインド値を使用できます。

      @Step {
        `ForEach` に ``ComposableArchitecture/Shared/elements`` プロパティを渡し、 `Shared<IdentifiedArrayOf<SyncUp>>` の要素である `Shared<SyncUp>` にアクセスできるようにします。

        @Code(name: "SyncUpsList.swift", file: SyncUpDetailNavigation-03-code-0003.swift)
      }

      @Step {
        `$syncUp` を `SyncUpDetail.State` に渡します。

        @Code(name: "SyncUpsList.swift", file: SyncUpDetailNavigation-03-code-0004.swift)
      }

      リスト機能から詳細機能に画面遷移が行われるようになりました。
      `NavigationLink` をタップすると SwiftUI はビュー階層上部から `NavigationStack` の `path` に `.detail` をセットすることで画面を遷移します。

      `NavigationLink` は画面遷移を行う最も簡単な方法ですが、いくつかの欠点があります。
      `NavigationLink` を構築するために遷移先の状態のみならず `AppFeature.State.Path` という全体の状態を参照するため、各機能が他の機能の状態を知ることになり、モジュール性が低下します。

      `NavigationLink` ではなく `Button` を用いて送信されたアクションを親機能である `AppFeature` で受信し、手動で `path` をセットする方法もあります。
      これにより `AppFeature` 機能だけが子機能について知ることができるため、各機能間で状態を共有する必要がなくなり、モジュール性が高まります。

      今回はこのリファクタリングは行わないため、読者自身で試してみてください。

      次に進む前に、詳細画面で実装した削除・編集ロジックが Sync-up リスト画面から詳細画面に画面遷移できるようになった現在でも正常に動作することを確認します。

      @Step {
        Sync-up 詳細画面への遷移後に Sync-up を削除して、期待通りに動作することを確認します。

        @Video(source: SyncUpDetailNavigation-03-video-0005.mov)
      }

      @Step {
        Sync-up 詳細画面に遷移後に Sync-up を編集してから Sync-up リスト画面に戻って変更が反映されていることを確認します。
        また、アプリを再起動してデータがディスクに永続化されていることを確認します。

        @Video(source: SyncUpDetailNavigation-03-video-0006.mov)
      }
    }
  }
}
