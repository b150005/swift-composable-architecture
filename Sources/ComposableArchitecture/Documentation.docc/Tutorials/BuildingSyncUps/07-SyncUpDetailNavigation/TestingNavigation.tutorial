@Tutorial(time: 10) {
  @Intro(title: "画面遷移のテスト") {
    アプリケーションの Root に `NavigationStack` を実装し、 Sync-up リスト表示(`SyncUpsList`)・ Sync-up 詳細(`SyncUpDetail`)・ミーティング(`MeetingView`)の3つの機能を統合しました。
    詳細画面から Sync-up を削除したタイミングで詳細画面を非表示にするなど、複雑なロジックが必要なものもあります。

    ここで、 `NavigationStack` を含むテストコードについて紹介します。
  }

  @Section(title: "Sync-up の削除") {
    @ContentAndMedia {
      詳細画面から Sync-up を削除すると、 Sync-up コレクションから要素が削除され、詳細画面が NavigationStack からポップすることを検査するテストコードを記述します。
    }

    @Steps {
      @Step {
        `AppFeatureTests.swift` というテストファイルを作成し、テストの土台をペーストします。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0001.swift)
      }

      通常テストコードを記述する際は、初期状態を構築してから ``ComposableArchitecture/TestStore`` を構築しますが、今回は [`@Shared`](<doc:Shared>) プロパティラッパーを付与してディスクに永続化される共有状態を初期状態として使用します。

      @Step {
        `.syncUps` 永続化戦略と共に [`@Shared`](<doc:Shared>) プロパティラッパーを用いて、1つの Sync-up を持った状態を初期状態とします。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0002.swift)
      }

      @Step {
        `AppFeature` Reducer を持つ ``ComposableArchitecture/TestStore`` を構築しますが、 `@Shared(.syncUps)` プロパティラッパーで初期状態を取得するため、明示的に初期状態を指定する必要はありません。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0003.swift)
      }

      @Step {
        ユーザによるリスト内の Sync-up のタップをエミュレートするために ``ComposableArchitecture/StackAction/push(id:state:)`` アクションを送信します。
        このときリスト内の Sync-up の ``ComposableArchitecture/Shared`` 値を渡します。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0004.swift)
      }

      @Step {
        `IdentifiedArray` の共有コレクションから `[id:]` サブスクリプトを用いて Sync-up の `Shared` 値を取得します。
        Trailing closure では `path` を変更して NavigationStack に詳細画面がプッシュされたことを検査します。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0005.swift)
      }

      @Step {
        ユーザによる詳細画面での "Delete" ボタンのタップをエミュレートし、アラートが表示されることを検査します。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0006.swift)
      }

      @Step {
        ユーザによる Sync-up 削除確認アラートの "Confirm" ボタンのタップをエミュレートします。
        アクション送信後のアラートの非表示(`destination` に `nil` をセット)や、 Sync-ups コレクションが空になることなど、あらゆる状態の変化を検査する必要があります。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0007.swift)
      }

      TestStore は Effect によって送信されるアクション受信後の振る舞いの検査を強制するため、テストは失敗します。
      Sync-up が削除されると、 NavigationStack から詳細画面が取り除かれることを期待します。

      @Step {
        ``ComposableArchitecture/StackAction/popFrom(id:)`` アクションを受信し `path` が空になることを検査します。

        @Code(name: "AppFeatureTests.swift", file: TestingNavigation-01-code-0008.swift)
      }

      @Step {
        テストはパスするようになり、ユーザが詳細画面から Sync-up を削除すると、リスト画面に戻ることを保証できました。
      }
    }
  }
}
