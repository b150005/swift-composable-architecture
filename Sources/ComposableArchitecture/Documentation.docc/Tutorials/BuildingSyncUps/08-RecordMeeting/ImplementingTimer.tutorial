@Tutorial(time: 25) {
  @Intro(title: "ミーティングタイマーの導入") {
    ミーティング記録機能にタイマーのロジックと振る舞いを導入します。
    タイマーは長時間並列実行する Effect であり、次の話者に移るタイミングを判定するロジックを実装する必要があります。
  }

  @Section(title: "基本的なタイマー") {
    @ContentAndMedia {
      タイマーによってシステムにアクションを送信する Effect を初めて扱うことになります。
      これまで扱った唯一の Effect は、機能を閉じるための `dismiss` Effectでした。
    }

    @Steps {
      Effect を開始するには、 SwiftUI の `onAppear` または `task` ビュー修飾子のいずれかを用いてプロセスを開始するアクションを送信します。

      @Step {
        `RecordMeeting.Action` 列挙型に `onAppear` アクションを追加し、ビューから送信します。

        > Note: コードスニペットを下にスクロールすると、ビューからアクションを送信していることがわかります。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0001.swift, previousFile: ImplementingTimer-01-code-0001-previous.swift)
      }

      @Step {
        Reducer に `body` プロパティを追加し、機能のロジックと振る舞いを定義する `Reduce` の土台を作成します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0002.swift)
      }

      `onAppear` アクションではタイマーを長期実行する Effect を開始します。
      タイマーは ``ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)`` ヘルパーによって提供される非同期コンテキスト内で処理されます。

      @Step {
        `onAppear` アクション受信時は `.run` Effect を返し、タイマーを実行するための非同期コンテキストを作成します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0003.swift)
      }

      @Step {
        非同期コンテキスト内で1秒ごとに無限に繰り返される `Task.sleep` を実行します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0004.swift)
      }

      作りは粗いですが、タイマーを作成しました。

      `Task.sleep` の発火ごとに追加ロジックを実行するために、 Effect からシステムに送信するアクションを追加します。

      @Step {
        ドメインに `timerTick` を追加して、タイマーで1秒が経過したことをアクションとして定義します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0005.swift)
      }

      @Step {
        タスクが1秒間待機した後、 Effect を通じて `timerTick` アクションを送信します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0006.swift)
      }

      機能にタイマーを導入したため、ビューの表示後に Reducer は1秒ごとに `timerTick` アクションを受信するようになり、`timerTick` アクション受信時のロジックを実行できるようになりました。

      @Step {
        `timerTick` ボタンタップ時に `secondsElapsed` をインクリメントします。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0007.swift)
      }

      @Step {
        ミーティングの経過秒数が各参加者に与えられる時間の倍数になると次の話者に遷移します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0008.swift)
      }

      @Step {
        最後の話者が自身の順番を終えると共有された Sync-up を変更し、コレクションに記録したミーティングを挿入します。

        > Note: このコードでは、テストコードで利用できない制御不能な `Date()` と `UUID()` の依存関係を使用しています。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0009.swift)
      }

      @Step {
        最後の話者が順番を終えるタイミングで `dismiss` Effect を実行することで、ミーティング記録画面を `NavigationStack` からポップして、詳細画面に遷移するようにします。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-01-code-0010.swift)
      }

      数行のコードで少し複雑なロジックと振る舞いを機能に導入することができました。
      並列実行されるタイマーの発火時に状態を更新し、終了条件を満たすとミーティングを Sync-up に保存し、子画面を NavigationStack からポップするように実装しました。

      Xcode プレビューで正しく動作するか確認する際、ミーティングの終了を最後まで待機する必要はありません。
      [`@Shared`](<doc:Shared>) プロパティラッパーを用いて、短時間の Sync-up スタブを作成しましょう。

      @Step {
        `AppFeature.swift` ファイルのプレビューに移動し、共有状態である Sync-up をオーバーライドして、3人の参加者を含む計6秒の Sync-up スタブを作成します。
        つまり、各参加者の持ち時間は2秒間です。

        @Code(name: "AppFeature.swift", file: ImplementingTimer-01-code-0011.swift, previousFile: ImplementingTimer-01-code-0011-previous.swift)
      }

      @Step {
        プレビューを実行して "Morning sync" の Sync-up 詳細画面に遷移し、 "Start meeting" ボタンをタップして6秒間待機します。
        参加者全員の順番を終えると、ミーティング画面が `NavigationStack` からポップし、記録したミーティング情報が Sync-up 詳細画面に挿入されています。

        @Video(source: ImplementingTimer-01-video-0012.mov)
      }
    }
  }

  @Section(title: "依存関係の早期制御") {
    @ContentAndMedia {
      `Date` や `UUID` 、 `Task.sleep` などのグローバルで制御不能な依存関係を利用しています。

      制御不能な依存関係を利用する場合、テストコードや Xcode プレビューと関わる際にデメリットが生じるため、早期段階で依存関係を制御可能なものに転換していきます。
    }

    @Steps {
      `Date` と `UUID` を制御可能にします。

      @Step {
        `\.date.now` と `\.uuid` 依存関係を機能に追加します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-02-code-0001.swift, previousFile: ImplementingTimer-02-code-0001-previous.swift)
      }

      @Step {
        制御不能な依存関係を利用していた部分を、追加した依存関係に置き換えます。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-02-code-0002.swift)
      }

      Reducer で使用した `Task.sleep` は時間に依存することになります。

      時間経過を待機する必要があり、テストに時間を要したり非決定論的になったりするため、テストに支障が出る可能性があります。
      また、 Xcode プレビューでも時間経過とともに機能の振る舞いを確認する必要があるため、手間がかかります。

      TCA では、時間に支配されるのではなく、時間を制御できるようにするツールを提供しています。

      @Step {
        `\.continuousClock` 依存関係を機能に追加します。

        > Note: `\.continuousClock` 依存関係によってテストとプレビューで時間を制御できるようになります。
        > `ImmediateClock` は時間の短縮、 `TestClock` は特定の瞬間への明示的なスキップを行います。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-02-code-0003.swift)
      }

      @Step {
        無限ループの `Task.sleep` ではなく `clock.timer(interval:)` 非同期シーケンスを用いてタイマーを発火します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-02-code-0004.swift)
      }

      依存関係が制御可能なものとなり、機能のロジックのテストコードを記述しやすくなりました。
    }
  }

  @Section(title: "ミーティングの早期終了") {
    @ContentAndMedia {
      ミーティングを早期終了する方法は2つあります。
      "Next" ボタンで現在の話者をスキップしていき、最後の話者がスキップされた時点で早期終了するか、左上に配置した "End meeting" ボタンを押下すると早期終了できるようにします。

      また、早期終了時はユーザに警告で終了確認を求めるようにします。
    }

    @Steps {
      @Step {
        `nextButtonTapped` アクションのロジックの実装から取りかかります。
        最後の話者でない限り次の話者に進み、 `secondsElapsed` を本来の経過時間に設定します。

        > Note: アラート表示箇所を TODO として追加しました。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0001.swift, previousFile: ImplementingTimer-03-code-0001-previous.swift)
      }

      @Step {
        プレビューを実行し、矢印ボタンをタップすると現在の話者をスキップできることを確認します。
      }

      次に、ユーザがミーティングを早期終了しようとした場合にアラートを表示するようにします。

      @Step {
        `RecordMeeting.State` にオプショナルの `AlertState` を追加し、アラートの表示状態を定義します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0002.swift)
      }

      @Step {
        `RecordMeeting.Action` にアラートで発生する可能性のあるアクションを表す ``ComposableArchitecture/PresentationAction`` ケースを追加します。
        早期終了に対する確認や、記録したミーティングの保存・破棄が該当します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0003.swift)
      }

      @Step {
        ``ComposableArchitecture/Reducer/ifLet(_:action:fileID:filePath:line:column:)-3ux09`` Reducer メソッドを使用してアラートロジックを Reducer に統合します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0004.swift)
      }

      @Step {
        SwiftUI の ``SwiftUI/View/alert(_:)`` ビュー修飾子を使用して Store を通じてアラートの表示状態を制御します。

        > Note: `RecordMeetingView` の下部に `alert` ビュー修飾子を挿入しています。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0005.swift)
      }

      機能にアラートを統合する基本的な手法を紹介しましたが、ドメインに追加したアラートアクションやアラートを表示するための `alert` のセットが未実装です。
      まずは `alert` をセットします。

      @Step {
        `AlertState` を型拡張して、タイトル・メッセージ・ボタンなどのアラートの詳細を定義したヘルパー変数を実装します。
        このヘルパー変数で "End meeting" ボタンタップ時と最後の話者がスキップされたときに早期終了を確認する `alert` を設定します。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0006.swift)
      }

      現在は `switch` 文を網羅的に処理しておらず Reducer がコンパイルできないため、ドメインに追加したアラートアクションを処理するようにします。

      @Step {
        ミーティングを破棄する場合は、画面を `dismiss()` メソッドで閉じるだけで完了します。
        ミーティングを保存する場合は、ミーティングを共有状態の Sync-up に挿入してから画面を閉じるようにします。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0007.swift)
      }

      ミーティングの早期終了ロジックを実装しましたが、改善点があります。

      現在、 "End meeting" ボタンをタップするとアラートが表示されますが、この間もタイマーはバックグラウンドで動作し続けているため、アラートの表示中もミーティングが進行することになっています。
      アラート表示中はタイマーを一時停止するようにしましょう。

      タイマーの一時停止は非常に簡単です。

      @Step {
        `timerTick` アクション受信時は `alert` が `nil` であることを保証することで、アラート表示中は `secondsElapsed` が増加しないようにします。

        @Code(name: "RecordMeeting.swift", file: ImplementingTimer-03-code-0008.swift)
      }

      @Step {
        `AppFeature.swift` でプレビューを再実行して、ミーティングを早期終了できるようになったことを確認します。

        @Video(source: ImplementingTimer-03-video-0009.mov)
      }
    }
  }

  @Section(title: "タイマーのテスト") {
    @ContentAndMedia {
      ミーティング記録機能に多くのロジックと振る舞いを導入したので、期待通りに動作することを検査するテストコードを記述します。
      テスト対象は複数ありますが、今回は主要な単一フローのテストに限定し、他のフローは読者への課題として残しておきます。
    }

    @Steps {
      ユーザがミーティング記録画面に遷移し、タイマーが最後まで進み、ミーティングが Sync-up に記録され、 NavigationStack からポップするまでの一連のフローを検証するテストコードを記述します。

      @Step {
        `RecordMeetingTests.swift` ファイルを作成し、ミーティング記録機能のテストコードを記述します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0001.swift)
      }

      @Step {
        初期状態とテスト対象の Reducer を指定して ``ComposableArchitecture/TestStore`` を作成します。

        > Note: Sync-up は2人の参加者に2秒ずつ計4秒の時間が設定されています。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0002.swift)
      }

      @Step {
        `onAppear` アクションを送信し、ユーザのミーティング記録画面への遷移をエミュレートします。
        このアクションでは状態を変更しないため、状態の変化を検査する Trailing closure を記述する必要はありません。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0003.swift)
      }

      @Step {
        テストは失敗します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0004.swift)
      }

      この失敗は、機能の振る舞いに未検証部分があることを示している点で有益です。
      テスト終了時点で実行中の Effect が残っていると、予期せぬアクションがシステムに送信されてしまう可能性があります。
      また、依存関係をオーバーライドせずに使用していることについてもエラーメッセージも出力されています。

      依存関係のエラーから修正しましょう。時間を制御するため、 `TestClock` でオーバーライドします。

      @Step {
        ``ComposableArchitecture/TestStore`` イニシャライザの `withDependencies` Trailing closure で `continuousClock` 依存関係を `TestClock` でオーバーライドします。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0005.swift)
      }

      @Step {
        `clock` の `advance(by:)` メソッドを用いてミーティングの経過時間を1秒進めます。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0006.swift)
      }

      @Step {
        テストを実行すると、 Effect がシステムにアクションを送信したにもかかわらずアクション結果が未検証であるという旨のエラーメッセージが出力されることを確認します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0007.swift)
      }

      @Step {
        ``ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic`` メソッドを用いて、 Store が `timerTick` アクションを受信したときに `secondsElapsed` が1に増加していることを検査します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0008.swift)
      }

      テストはまだパスしませんが、 Effect の実行とシステムに送信されたデータを検査するテストコードを記述しました。
      このテストコードのポイントは以下の2つです。

      - Effect で使用する依存関係を制御して、決定論的に振る舞いをエミュレートします。今回はタイマーに対してグローバルで制御不能な `Task.sleep` ではなく `TestClock` を用いています。
      - ``ComposableArchitecture/TestStore`` の `receive` メソッドを用いて、 Effect を通じてアクションを受信したときの状態の変化を検査します。

      `TestClock` と `receive` メソッドを用いてミーティングの経過と終了をエミュレートできます。

      @Step {
        クロックを1秒進め、 `timerTick` アクション受信後の状態の変化を検査します。
        このタイミングでは `secondsElapsed` が増加するだけでなく、次の話者に移るため `speakerIndex` も増加します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0009.swift)
      }

      @Step {
        次の周期では `secondsElapsed` のみが増加します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0010.swift)
      }

      @Step {
        最後の周期では `secondsElapsed` の増加と Sync-up へのミーティング記録の挿入を検査します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0011.swift)
      }

      ユーザアクションと Effect を通じたアクションの受信後の状態を検査しましたが、 ``ComposableArchitecture/TestStore`` はさらなる検証を要求します。
      現時点のテストコードで漏れている検証項目を明らかにするためにテストを再実行します。

      @Step {
        テストケースを実行すると失敗します。

        > Note: コードスニペットの下部までスクロールしてテストの失敗メッセージを確認できます。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0012.swift)
      }

      大量の失敗メッセージが出力されますが、すべて簡単に修正することができます。

      これらの失敗メッセージは全て関連しています。
      最初の2つは `\.date` と `\.uuid` の依存関係をオーバーライドしていないことを指摘しており、ユーザフローで使用している依存関係を把握することができます。
      最後のメッセージは依存関係をオーバーライドしなかったことで、正確な状態の予測ができないことが原因です。

      修正するには `\.uuid` と `\.date` の依存関係をオーバーライドして、機能のロジック内で生成される値を予測できるようにします。

      @Step {
        `withDependencies` Trailing closure で `date` と `uuid` の依存関係を設定します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0013.swift)
      }

      @Step {
        テストを再実行すると失敗メッセージが2つに減りました。

        > Note: 失敗メッセージを確認するには、コードスニペットの下部までスクロールしてください。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0014.swift)
      }

      最初の失敗メッセージは、タイマー Effect がテスト終了時点で実行中のままであることを示しています。
      ``ComposableArchitecture/TestStore`` は、予期せぬ振る舞いが生じないことを保証するために、テスト終了前に明示的にすべての Effect を終了させることを要求します。
      ここで、タイマー Effect はミーティング記録画面が NavigationStack からポップすると同時にキャンセルされます。
      今回は NavigationStack 全体ではなくミーティング記録機能に限定したテストであるため、 `onAppear` アクション送信時に作成された Effect を明示的に取得し、テストの最後で明示的にキャンセルすることができます。

      @Step {
        `store.send(.onAppear)` の実行結果を変数として保持し、テストの最後で Effect を明示的にキャンセルします。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0015.swift)
      }

      修正すべき2つ目の失敗メッセージは、タイマー終了時に `dismiss` 依存関係の振る舞いを検証していないことを示しています。
      これは、子画面が自身を非表示にしていることを保証する点で素晴らしい失敗だと言えます。

      テストコードを修正するには ``Dependencies/DependencyValues/dismiss`` 依存関係をオーバーライドします。

      @Step {
        `withDependencies` Trailing closure で `dismiss` 依存関係をオーバーライドします。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0016.swift)
      }

      テストはパスするようになりましたが、失敗メッセージを消去するために依存関係をオーバーライドしただけで、 `dismiss` 依存関係が呼び出されることを検査できていません。

      ``ComposableArchitecture/DismissEffect`` を用いることで、 `dismiss` Effect が呼び出されたことを検査することができます。

      @Step {
        ``TestStore/isDismissed`` プロパティを使用して、テストの最後に画面が閉じられたことを検査します。

        @Code(name: "RecordMeetingTests.swift", file: ImplementingTimer-04-code-0017.swift)
      }

      `dismiss` Effect が呼び出されることを検査したため、親である NavigationStack で機能同士が正しく接続されている限り、機能が確実に NavigationStack からポップされることを保証できるようになりました。

      親子機能が正しく統合されていることを証明するための非網羅的なテストコードの記述にも挑戦してみましょう。
    }
  }
}
