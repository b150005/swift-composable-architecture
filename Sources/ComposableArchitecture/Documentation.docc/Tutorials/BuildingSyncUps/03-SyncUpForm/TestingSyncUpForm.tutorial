@Tutorial(time: 10) {
  @Intro(title: "Sync-up フォーム機能のテスト") {
    Sync-up の詳細情報の入力機能である `SyncUpForm` Reducer を作成したので、今度はそのテストコードを記述しましょう。
    このチュートリアルでは、依存関係の制御システムについて紹介します。
  }

  @Section(title: "参加者の削除") {
    @ContentAndMedia {
      参加者の追加と削除機能は `SyncUpsList` 機能のテストコードと似ているので、参加者削除ロジックのテストコードから記述していきます。
    }

    @Steps {
      @Step {
        `SyncUpFormTests.swift` というファイルを作成し、テストコードの土台を作成します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-01-code-0001.swift)
      }

      @Step {
        ``ComposableArchitecture/TestStore`` を構築し、初期状態として2人の参加者をセットし、そのうちの1人を削除します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-01-code-0002.swift)
      }

      @Step {
        `onDeleteAttendees` アクションの送信によってユーザによる参加者の削除をエミュレートし、参加者が配列から削除されもう一方の参加者のみが配列に残っていることを検査します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-01-code-0003.swift)
      }

      テストスイートを実行すると、テストがパスします。

      参加者の削除機能をテストしましたが、フォーカスの変化についてはまだ検査できていないため、フォーカスロジックについてもテストコードを記述します。

      @Step {
        フォーカスされた参加者を削除した場合の振る舞いをテストするためのテストメソッドを追加します。
        変数で宣言された2人の参加者を初期状態としてセットし、1つ目の参加者をフォーカスするようにします。

        > Note: 前のステップで作成した `testRemoveAttendee` メソッドは折りたたんでいます。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-01-code-0004.swift, previousFile: TestingSyncUpForm-01-code-0004-previous.swift)
      }

      @Step {
        `onDeleteAttendees` アクションの送信によって、1つ目の参加者を削除するユーザ操作をエミュレートします。
        `attendees` 配列には2番目の参加者が残り、フォーカスも2番目の参加者に変更されることを検査します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-01-code-0005.swift)
      }

      テストスイートを実行して、すべてのテストがパスすることを確認します。

      参加者の削除時にフォーカスが正しく変更されることを検査しましたが、2人の参加者のどちらもフォーカスされていない状態で1人を削除する場合のエッジケースの検証はできていません。
      フォーカスは変更されないはずですが、動作するテストコードは読者の演習として残します。
    }
  }

  @Section(title: "参加者の追加") {
    @ContentAndMedia {
      参加者追加機能のテストコードを記述しますが、この機能では制御不能な UUID ジェネレータの依存関係を使用しています。
    }

    @Steps {
      @Step {
        参加者を追加する一連のフローをテストするテストメソッドを追加します。
        初期状態は参加者が未設定の状態として定義します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-02-code-0001.swift, previousFile: TestingSyncUpForm-02-code-0001-previous.swift)
      }

      @Step {
        `addAttendeeButtonTapped` アクションを送信することで "New attendee" ボタンをタップするユーザ操作をエミュレートします。
        アクションが送信されると `attendees` 配列に参加者が追加され、その参加者名のテキストフィールドにフォーカスが当たることを検査します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-02-code-0002.swift)
      }

      @Step {
        Reducer が参加者 ID を生成するのに制御不能な依存関係である UUID ジェネレータにアクセスしているため、このテストスイートは失敗します。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-02-code-0003.swift)
      }

      このテストを修正する方法は2つあります。
      1つ目は、 TCA ライブラリの非網羅的テストツール(詳細は <doc:Testing#Non-exhaustive-testing> を参照)を使用して ID 生成ロジックは検証しない方法です。
      ただし、非網羅的テストは `SyncUpForm` のような独立した末端のシンプルな機能に対しては適切ではなく、複数の機能が1つに統合された複雑な機能のテストで使用するべきです。

      2つ目は、 UUID 生成機能の依存関係を制御することで生成される UUID を予測可能なものにし、網羅的テストを行う方法です。
      TCA は依存関係制御システム(詳細は <doc:DependencyManagement> を参照)を提供しており、依存関係を簡単に制御しオーバーライドすることができます。

      @Step {
        `SyncUpForm.swift` に戻り、 `SyncUpForm` Reducer に `@Dependency` プロパティラッパーを付与して依存関係があることを示すためにUUIDジェネレータープロパティを追加します。
        また、 UUID 生成機能の依存関係を指定するために `\.uuid` の KeyPath を指定します。

        @Code(name: "SyncUpForm.swift", file: TestingSyncUpForm-02-code-0004.swift, previousFile: TestingSyncUpForm-02-code-0004-previous.swift)
      }

      @Step {
        次に、 Reducer のロジックで制御不能な UUID ジェネレータを呼び出していた `Attendee.ID()` を追加した `uuid` で置き換えます。

        @Code(name: "SyncUpForm.swift", file: TestingSyncUpForm-02-code-0005.swift)
      }

      テストスイートを再実行するとまだテストは失敗しますが、新しい失敗メッセージが追加されます。
      テストコンテキストで `uuid` 依存関係がオーバーライドされずにテストが実行されたことを知らせるメッセージが追加されました。
      この失敗メッセージは API クライアントやアナリティクスなどの本番用の依存関係をテスト時に誤って使用してしまうことを防ぎます。

      `TestStore` の構築時に `uuid` 依存関係をオーバーライドすることでこの失敗を解消します。

      @Step {
        ``ComposableArchitecture/TestStore`` イニシャライザには、テストで使用する依存関係をオーバーライドできる Trailing closure が利用可能です。
        `00000000-0000-0000-0000-000000000000` から順にインクリメントされた UUID 値を生成する UUID ジェネレータで `uuid` 依存関係をオーバーライドします。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-02-code-0006.swift, previousFile: TestingSyncUpForm-02-code-0006-previous.swift)
      }

      @Step {
        "New Attendee" ボタンのタップ時に参加者に適用される UUID を決定論的に予測できるようになりました。
        このオーバーライドでは `00000000-0000-0000-0000-0000000000000000` のような UUID 値になりますが、 TCA ライブラリには整数から UUID を生成する `UUID` ヘルパーも提供しています。

        @Code(name: "SyncUpFormTests.swift", file: TestingSyncUpForm-02-code-0007.swift)
      }

      テストスイートを実行して、参加者の追加と削除機能とフォーカスの変化についてのすべてのテストがパスするようになりました。
      しかし、1人しか参加者がいない状態でその参加者を削除した場合は参加者リストが空にならないよう新しく参加者を挿入するロジックについてはテストできていません。
      このシナリオのテストコードについては、読者の演習として残しておきます。
    }
  }
}
