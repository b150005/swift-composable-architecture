@Tutorial(time: 15) {
  @Intro(title: "Sync-up フォーム") {
    TCA を用いて Sync-up の詳細情報を登録できる機能を追加します。
    また、フォームのフィールドにはフォーカスの概念を導入します。
  }

  @Section(title: "Sync-up フォームの基礎") {
    @ContentAndMedia {
      まずは、 Sync-up フォーム機能の土台を作成し、 Sync-up の詳細情報を入力できるようにします。

      @Image(source: "SyncUpFormBasics-01-0000.png")
    }

    @Steps {
      @Step {
        `SyncUpForm.swift` というファイルを作成し、 Reducer のスタブを作成します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0001.swift)
      }

      @Step {
        ドメインモデリングから始めます。
        State には単一の可変な `SyncUp` のみを宣言します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0002.swift)
      }

      Action は、技術的にはフォーム内の各 UI コントロールに対して1つのアクションが必要です。
      具体的には、タイトルを入力する TextField 、時間を入力する Slider 、テーマを選択する Picker 、参加者名を入力する TextField に対してそれぞれ1つのアクションが必要です。
      しかしこれは冗長的であるため、 TCA ライブラリではこれを簡素化するためのツールが提供しています。
      詳細な情報については <doc:Bindings> を参照してください。

      この TCA ツールを利用するには、これから紹介する2つのステップを踏みます。

      @Step {
        まず、フォーム内の各 UI コントロールに対して個別に Action を定義するのではなく、機能内のあらゆるデータにバインドする単一 Action を定義します。
        そのためには、 Action を ``ComposableArchitecture/BindableAction`` に準拠させ、 ``ComposableArchitecture/BindingAction`` をパラメータにとる単一ケースを定義します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0003.swift)
      }

      @Step {
        そして2つ目のステップとして、 ``ComposableArchitecture/BindingReducer`` を親機能の ``ComposableArchitecture/Reducer/body-20w8t`` で統合します。
        これは `body` 内に統合したいすべての Reducer をリストアップするだけです。

        > Note: 統合した1つの Reducer を動作させるには、すべての Reducer が同一の State と Action を保持する必要があります。
        > TCA ライブラリには、他の Reducer と統合するために既存の Reducer を変換する演算子が用意されています。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0004.swift)
      }

      このビューで実行するアクションは参加者の行のスワイプによる削除と、参加者追加ボタンです。

      @Step {
        ビューの `onDelete` クロージャから送信する `onDeleteAttendees` アクションを追加します。
        これは `SyncUpsList` Reducer の記述と似ていますが、 Sync-up フォーム機能で中心となる概念は参加者ではなく Sync-up であるため、明示的に `onDeleteAttendees` と命名しています。

        また、参加者の配列が空にならないように追加ロジックを実装しています。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0005.swift)
      }

      @Step {
        `syncUp.attendees` コレクションの末尾に要素を追加する `addAttendeeButtonTapped` アクションを追加します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0006.swift)
      }

      Sync-up フォームの土台が完成したので、次はビューの実装に移ります。

      @Step {
        `SyncUpForm` Reducer と同じファイルにフォーム UI を定義するビューのスタブを追加します。

        > Note: ビューのソースコードに焦点を当てるため `SyncUpForm` Reducer のソースコードは折りたたみます。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0007.swift)
      }

      @Step {
        `SyncUpsListView` と同様、ビューに `store` プロパティを追加しますが、今回は SwiftUI の `@Bindable` プロパティラッパーを `store` 変数に付与することで Store とビューをバインドさせます。

        > Note: `@Bindable` プロパティラッパーは iOS 17 以降で使用可能であるため、古いプラットフォームをサポートしている場合は TCA ライブラリの `@Perception.Bindable` プロパティラッパーを使用してください。
        > 詳細については <doc:ObservationBackport> を参照してください。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0008.swift)
      }

      @Step {
        Store からバインドさせた状態をさまざまな UI コントロールに渡し、フォームビューの残りの部分を実装します。
        `$store` 構文を用いて Store への参照を取得し、ドット連鎖を用いて Store 内の各データへのバインド値を取得することができます。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-01-code-0009.swift)
      }

      Sync-up フォームのビューの土台が完成したので、任意のフィールドの入力と Sync-up への参加者の追加が可能になりました。
      Sync-up フォーム機能を Sync-up リスト機能に統合し Sync-up リストに追加できるようにする前に、ビュー内でのフォーカス状態の管理を行ってみましょう。
    }
  }

  @Section(title: "フォームのフォーカス: 単純なアプローチ") {
    @ContentAndMedia {
      現在、 Sync-up フォームはユーザ体験の課題を抱えています。
      フォームの初期表示時では何もフォーカスされておらず、ユーザは Sync-up の詳細を入力するためにタイトルを入力するテキストフィールドをタップしなければなりません。
      さらに、参加者を追加したときもテキストフィールドにフォーカスが当たっていないので、ユーザは再びテキストフィールドをタップする必要があります。

      このユーザ体験上の課題を解決するために、まずはすべてのロジックをビューに記述した後、より良いアプローチを紹介します。
    }

    @Steps {
      @Step {
        SwiftUI ビューのフォーカスは `@FocusState` プロパティで制御できます。
        フォーカス可能なすべてのフィールドを列挙型でモデル化し、現在フォーカスされているフィールド(`nil` はフォーカスされていない状態)を表すオプショナルな列挙型を宣言します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0001.swift, previousFile: SyncUpForm-02-code-0001-previous.swift)
      }

      @Step {
        SwiftUI の `.focused(_:equals:)` ビュー修飾子をフォーカスする UI コントロールに適用します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0002.swift)
      }

      ビューに `focus` を変更してフォーカス制御を行うロジックを追加しましたが、フォーカス制御以外のロジックは `SyncUpForm` Reducer で定義しています。
      ロジックをビューと Reducer の2箇所で定義するとどうなるか見ていきます。

      @Step {
        ビューの初期表示時に `.title` にフォーカスを当てる `onAppear` ビュー修飾子を適用します。

        `@FocusState` にはデフォルト値をセットできないため `onAppear` を用いて初期状態を指定する必要があります。

        > Important: `onAppear` クロージャはビューの表示ごとに呼び出され、子画面に遷移して再度 `SyncUpFormView` に戻ってくる機能を追加するとフォーカスが Sync-up タイトルのテキストフィールドに当たってしまいます。
        > この場合、独自の `onFirstAppear` ビュー修飾子を作成する必要があります。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0003.swift)
      }

      @Step {
        次に、参加者追加時のフォーカスロジックを実装します。
        `focus` を追加した参加者の ID を持つ `.attendee` ケースでセットします。

        > Important: Reducer によって参加者が確実に追加されると分かっているので強制アンラップを使用していますが、 Reducer のロジックが変更され参加者が追加されないケースが生じるようになった場合、クラッシュする可能性があります。
        > このロジックを強化してテストスイートに含めたいですが、ロジックがビューに閉じ込められているので不可能です。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0004.swift)
      }

      次に、参加者削除時のフォーカスロジックを実装します。
      フォーカスされている参加者を削除した場合、最も近い参加者にフォーカスを当てるようにしてみます。

      @Step {
        参加者削除後の再フォーカスロジックを実装するために、まずは削除される参加者の情報を取得します。
        次に、削除ロジックを実行するために `onDeleteAttendees` アクションを送信します。
        そして削除された参加者がフォーカスされていたかどうかをチェックし、フォーカスされていた場合は最も近い参加者のインデックスを計算してフォーカスを当てるようにします。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0005.swift)
      }

      @Step {
        フォーカスロジックが完成したので、プレビューを追加します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-02-code-0006.swift)
      }

      @Step {
        プレビューを実行して、ロジックが期待通りに動作することを確認します。
        プレビューの初期状態ではタイトルのテキストフィールドにフォーカスが当たっています。
        参加者を追加すると、参加者名のテキストフィールドに自動的にフォーカスが遷移します。
        そして、参加者を削除すると近接する参加者に自動的にフォーカスが遷移します。

        @Video(source: SyncUpForm-02-video-0007.mp4)
      }

      Sync-up フォーム機能のフォーカスロジックが完成しましたが、以下の改善点が残っています。

      - 参加者の追加・削除ロジックは `SyncUpForm` Reducer 、フォーカスのロジックはビューにあり、ロジックが複数箇所に散らばっています。

      - 強制アンラップや `guard` 文の使用など、ビューで Reducer のロジックを想定していますが、将来的に変更される可能性があります。

      - フォーカスロジックが複雑で、インデックス操作やコレクションの取得を行っていますが、ロジックに誤りがあるとクラッシュする可能性があります。

      Let's see what it takes to move all of the focus logic into the reducer, where it belongs.
    }
  }

  @Section(title: "フォームのフォーカス: 改善されたアプローチ") {
    @ContentAndMedia {
      フォーカスロジックを Reducer で定義するのが良いアプローチです。
      ただし、 `@FocusState` プロパティラッパーは SwiftUI ビューの外部で使用できないため、 SwiftUI ビューと Reducer を連携させる必要があります。
    }

    @Steps {
      @Step {
        `Field` 列挙型をビューから `SyncUpForm.State` に移動し、 State にオプショナルな `focus` フィールドを追加します。
        SwiftUI ビューでのみ使用可能な `@FocusState` プロパティラッパーは適用しないため、フォーカスにデフォルト値をセットできるようになりました。

        > Note: Reducer のソースコードを読みやすくするためにビューのソースコードを折りたたんでいます。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-03-code-0001.swift, previousFile: SyncUpForm-03-code-0001-previous.swift)
      }

      次に、フォーカスロジックをビューから Reducer に移動します。

      @Step {
        追加した参加者名のテキストフィールドにフォーカスを当てるロジックを実装します。
        Reducer のロジックに直接アクセスできるようになったため、強制アンラップや `guard` 文を使用した防御的プログラミングが不要になりました。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-03-code-0002.swift)
      }

      @Step {
        参加者削除時に最も近い参加者にフォーカスを当てるロジックを実装します。
        このロジックはビューで書いたものと似ていますが、参加者をコレクションから削除するロジックの直後に実装するため、想定する必要がなくなりました。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-03-code-0003.swift)
      }

      @Step {
        フォーカスロジックを Reducer に移動したため、ビューの `onDelete` アクションクロージャ と "New attendee" ボタンのフォーカスロジックと `onAppear` ビュー修飾子を削除します。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-03-code-0004.swift, previousFile: SyncUpForm-03-code-0004-previous.swift)
      }

      ビューが簡潔になり、すべてのロジックを1箇所にまとめて定義しましたが、フォーカスロジックが動作しなくなりました。
      `SyncUpForm` Reducer とビューはそれぞれ独自の `focus` を保持しておりこれらの State は完全に分離しているため、互いに影響を与えません。

      TCA ライブラリの `bind(_:to:)` というツールを用いて Reducer とビューの State をバインドさせることができます。
      これは、 `@FocusState` のような SwiftUI ビューでのみ使用可能な SwiftUI 標準のプロパティラッパーを扱う際に有用です。

      @Step {
        ビューの最後で `bind(_:to:)`ビュー修飾子を使用して、ストアからのフォーカスバインディング`$store.focus`とビュー内のフォーカスバインディング`$focus`を同期させます。

        @Code(name: "SyncUpForm.swift", file: SyncUpForm-03-code-0005.swift)
      }

      Reducer とビューのすべてのロジックが Reducer でまとめて定義され、プレビューが動作するようになったので、テストが実行できるようになりました。
    }
  }
}
