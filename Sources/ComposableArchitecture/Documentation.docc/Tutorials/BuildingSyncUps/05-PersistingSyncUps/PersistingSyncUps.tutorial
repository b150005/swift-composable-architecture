@Tutorial(time: 5) {
  @Intro(title: "Sync-up の永続化") {
    Sync-up の登録・削除機能の次はデータの永続化について紹介します。
    [`@Shared`](<doc:Shared>) や ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` といった、 TCA ライブラリの状態共有ツールを使用します。
  }

  @Section(title: "データをディスクに永続化する") {
    @ContentAndMedia {
      [`@Shared`](<doc:Shared>) プロパティラッパーを用いて、状態を外部システムに永続化することができます。
    }

    @Steps {
      @Step {
        `SyncUpsList.swift` ファイルに戻り、登録された Sync-up を配列で保持する `syncUps` フィールドに [`@Shared`](<doc:Shared>) プロパティラッパーを適用します。

        > Note: 現時点ではこのコードはコンパイルできません。

        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0001.swift, previousFile: PersistingSyncUps-01-code-0001-previous.swift)
      }

      `@Shared` なプロパティはアプリケーション内部で共有される状態を表します。
      状態の共有方法については <doc:SharingState> を参照してください。

      @Step {
        [`@Shared`](<doc:Shared>) プロパティラッパーと組み合わせ可能な TCA ライブラリの永続化戦略が提供されています。
        ここではデータ構造をディスクに保存するため、 ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` を使用します。

        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0002.swift)
      }

      ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` 永続化戦略では [`@Shared`](<doc:Shared>) プロパティの状態が変更されるたびに、ファイルシステムに過度な負担がかからない頻度でデータをディスクに保存しています。

      @Step {
        ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` 永続化戦略を使用する場合は `URL` の型拡張を行い、保存先 URL を指定します。

        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0003.swift)
      }

      これでコンパイル可能なソースコードになりました。
      ``ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)`` で永続化するデータは `Codable` 型に準拠させる必要があります。

      @Step {
        永続化先の URL とデータに型安全性をもたらしつつ、ソースを簡潔に記述することもできます。
        詳細については [Type-safe keys](<doc:SharingState#Type-safe-keys>) を参照してください。

        @Code(name: "SyncUpsList.swift", file: PersistingSyncUps-01-code-0004.swift)
      }

      永続化が正常に動作することを確認するために、アプリのエントリーポイントを更新します。

      @Step {
        `SyncUpsApp.swift` に移動し、 Root ビューを `SyncUpsListView` をラップした `NavigationStack` に変更します。

        > Note: ``ComposableArchitecture/Store`` を `static let` で宣言しているのは、一度だけ初期化することを保証するためです。

        @Code(name: "SyncUpsApp.swift", file: PersistingSyncUps-01-code-0005.swift)
      }

      @Step {
        シミュレータで Sync-up を登録してアプリケーションを再起動すると、登録した Sync-up が永続化されているのがわかります。

        @Video(source: PersistingSyncUps-01-video-0006.mov)
      }
    }
  }

  @Section(title: "永続化のテスト") {
    @ContentAndMedia {
      `.fileStorage` 永続化戦略を持つ [`@Shared`](<doc:Shared>) な状態のテストは [`@Shared`](<doc:Shared>) でない状態のテストと同じです。
      ``ComposableArchitecture/TestStore`` は、すべての状態の変化を徹底的に検査することを強制します。
    }

    @Steps {
      @Step {
        テストスイートを実行して、これまでのテストが正しく動作することを確認します。
      }

      @Step {
        `SyncUpsListTests.swift` に移動し、 `testAddSyncUp` 内部での状態の検査を不正確なものに変更します。

        @Code(name: "SyncUpsListTests.swift", file: PersistingSyncUps-02-code-0001.swift, previousFile: PersistingSyncUps-02-code-0001-previous.swift)
      }

      @Step {
        テストスイートを再実行すると、詳細な失敗メッセージとともにテストが失敗します。
      }

      これは、ディスクに永続化される状態を扱う場合であっても、 TCA ライブラリのテストツールが状態変化の徹底的な検査を強制していることを示しています。
      状態の共有と永続化についての詳細な情報は <doc:SharingState> を必ず参照してください。
    }
  }
}
