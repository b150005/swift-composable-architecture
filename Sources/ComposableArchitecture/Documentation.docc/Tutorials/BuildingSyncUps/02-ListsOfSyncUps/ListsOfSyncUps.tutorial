@Tutorial(time: 10) {
  @Intro(title: "Sync-up リスト") {
    SyncUps アプリを TCA ライブラリを用いて構築していきますが、 Sync-up リストを表示する機能の実装から始めます。
    はじめは単純な機能ですが、チュートリアルが進むにつれて複雑な機能になっていきます。
  }

  @Section(title: "ドメインモデル") {
    @ContentAndMedia {
      Sync-up リストを表示するビューを構築するために `SyncUp` を表すデータモデルを定義します。
    }

    @Steps {
      @Step {
        `Models.swift` ファイルを作成し、データモデルを定義していきます。

        @Code(name: "Models.swift", file: ListsOfSyncUps-01-code-0001.swift)
      }

      @Step {
        Apple の Scrumdinger プロジェクトを参考にして作られたデータモデルを `Models.swift` にペーストします。

        `SyncUp` 型は参加者を持ち、定期的に行われるミーティングを表します。
        `Meeting` 型は過去のミーティングを表し、文字起こし機能によって生成されたトランスクリプトを含みます。

        @Code(name: "Models.swift", file: ListsOfSyncUps-01-code-0002.swift)
      }

      これらのデータモデルは SyncUps アプリケーションで十分に動作しますが、いくつか改善点があります。
      まず、ドメイン内で単純な配列を保持してしまうと `Identifiable` プロトコルによって与えられる固有の ID ではなく、配列のインデックスを指定しなければならず、非同期 Effect を実行する際に問題になります。
      Effect の実行中に要素のインデックスが変更される可能性があるため、間違った値を参照したり、バグを引き起こしたり、存在しない値を参照してクラッシュを引き起こしたりする可能性があります。

      そのため、配列ではなく [`IdentifiedArray`][identified-array-gh] 型を使用することで、インデックスではなく ID で要素を参照するようにします。

      [identified-array-gh]: http://github.com/pointfreeco/swift-identified-collections

      @Step {
        すべての配列を `IdentifiedArray` に置き換えます。
        この型は [IdentifiedCollections][identified-array-gh] ライブラリによって提供されていますが、 TCA ライブラリ内に依存関係を持っています。

        [identified-array-gh]: http://github.com/pointfreeco/swift-identified-collections

        @Code(name: "Models.swift", file: ListsOfSyncUps-01-code-0003.swift)
      }
    }
  }

  @Section(title: "SyncUpsList 機能") {
    @ContentAndMedia {
      コアドメインのデータモデルを定義したので、最初の機能である SyncUps リスト機能を実装します。
      この機能はすべての Sync-up を表示し、最終的に Sync-up の追加や詳細表示など、他の機能を追加していきます。

      まずは Sync-up リストの表示と、スワイプによる Sync-up の削除機能を追加します。

      @Image(source: "ListsOfSyncUps-cover.png")
    }

    @Steps {
      @Step {
        `SyncUpsList.swift` というファイルを作成し、 TCA と SwiftUI ライブラリをインポートします。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0001.swift)
      }

      Reducer とビューの実装が必要ですが、ここでは Reducer の実装を先に進めます。

      @Step {
        `SyncUpsList` 構造体を追加し、 ``ComposableArchitecture/Reducer()`` マクロのアノテーションを付与します。
        `SyncUpsList` 構造体は機能のドメイン(State と Action を含む Reducer)をカプセル化し、そのロジックと振る舞いを定義します。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0002.swift)
      }

      @Step {
        機能を動作させるために必要なデータを表す `State` を `SyncUpsList` 構造体の内部に追加しますが、現時点では `SyncUp` の配列だけ宣言します。
        また、 SwiftUI ビューが状態の変更を監視できるように `State` 型に ``ComposableArchitecture/ObservableState`` マクロを付与します。

        > Note: テストに向けて `State` は予め `Equatable` に準拠させます。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0003.swift)
      }

      次に、ユーザが UI 上で実行するすべてのアクションを定義する `Action` 列挙型を追加しますが、現時点では以下の3つのアクションのみ宣言します。
      - ナビゲーションツールバーの "+" ボタンのタップ
      - リストの Sync-up のタップ
      - リストの任意の行のスワイプによる削除

      @Step {
        ユーザが UI 上で実行する各アクションケースを `Action` 列挙型に追加します。

        > Important: <doc:MeetComposableArchitecture> で紹介したように、アクション名は実行したいロジックではなく、ビューで起こる現象に基づいて命名することを推奨します。
        > 例えば、 "+" ボタンタップのアクション名は `showAddSheet` ではなく `addSyncUpButtonTapped` にします。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0004.swift)
      }

      @Step {
        Reducer の ``ComposableArchitecture/Reducer/body-20w8t`` プロパティでは ``ComposableArchitecture/Reduce`` 型を使用して各アクションに対する振る舞いを実装します。
        `addSyncUpButtonTapped` と `syncUpTapped` アクションについては、シートを表示したり Sync-up 詳細画面に遷移したりと追加作業が生まれるので、現時点では何も実装しません。

        > Note: Swift コンパイラのバグによって `Reduce` 内で型推論が行われないことがありますが、その場合はジェネリクスとして `Reduce<State, Action>` を指定することで型推論とオートコンプリートが行われるようにできます。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0005.swift)
      }

      `SyncUpsList` Reducer の土台が完成しましたが、後で別の Reducer を統合します。

      次に、 `SyncUpsList` Reducer を動作させるためのビューを実装します。
      本来であればリストビューは複雑なビューなのでヘルパー関数を作成する必要がありますが、 Apple の Scrumdinger プロジェクトから流用します。

      @Step {
        リストの各 Sync-up を表示するための `CardView` を追加します。

        > Note: Reducer とビューを別々のファイルに配置することもできますが、扱いきれなくなるまでは同じファイルに記述することを推奨します。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0006.swift, previousFile: ListsOfSyncUps-02-code-0006-previous.swift)
      }

      @Step {
        `SyncUpsList` ドメインの ``ComposableArchitecture/Store`` を保持する `SyncUpsListView` を追加します。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0007.swift)
      }

      @Step {
        ビューの `body` は Sync-up コレクションを反復的に表示する `List` ビューにします。
        また、 Sync-up を追加するためのシートを表示するボタンをツールバーに追加します。
        `State` に ``ComposableArchitecture/ObservableState`` マクロを付与したので、このビューは `store` が保持する State を直接参照し、 Action を送信することができます。

        > Note: 完成後の SyncUps デモプロジェクトから [Assets.xcassets][assets] をコピーすることで、 `Theme` の色を取得できます。

        [assets]: https://github.com/pointfreeco/swift-composable-architecture/tree/main/Examples/SyncUps/SyncUps/Assets.xcassets

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0008.swift)
      }

      @Step {
        ファイル下部に `#Preview` マクロを追加してプレビューを構築します。
        `SyncUpsListView` を構築するには `SyncUpsList` 機能の ``ComposableArchitecture/Store`` と Reducer を指定する必要があります。
        また、 `SyncUpsList` 機能の初期状態として `SyncUp` の配列をセットすることもできます。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-02-code-0009.swift)
      }

      @Step {
        プレビューを実行して、1つの Sync-up が追加された状態で Sync-up リストが表示されることを確認します。
        行をスワイプしてその Sync-up を削除することもできます。

        @Video(source: ListsOfSyncUps-02-code-0010.mp4)
      }
    }
  }

  @Section(title: "便利なデバッグツール") {
    @ContentAndMedia {
      状態変化を検知し、フォーマットされた差分を出力する TCA のデバッグツールを紹介します。
    }

    @Steps {
      @Step {
        `#Preview` で指定した `SyncUpsList` Reducer に `_printChanges()` 演算子を適用します。

        @Code(name: "SyncUpsList.swift", file: ListsOfSyncUps-03-code-0001.swift, previousFile: ListsOfSyncUps-03-code-0001-previous.swift)
      }

      @Step {
        プレビューで再度 Sync-up を削除すると、コンソールのログには送信された Action と State の変化点が出力されるようになりました。

        @Code(name: "console-output.diff", file: ListsOfSyncUps-03-code-0002.diff)
      }
    }
  }
}
