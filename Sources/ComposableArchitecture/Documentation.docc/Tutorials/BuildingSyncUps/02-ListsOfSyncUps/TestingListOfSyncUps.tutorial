@Tutorial(time: 5) {
  @Intro(title: "Sync-up リスト表示機能のテスト") {
    現時点での SyncUpsList 機能は Sync-up をコレクションから削除することだけであるため、それほど複雑ではありません。
    しかし、機能を追加するごとにテストコードを書くのはいい習慣であるため、テストコードの書き方を紹介します。
  }

  @Section(title: "はじめてのテストコード") {
    @ContentAndMedia {
      TCA ライブラリのテストツールである `TestStore` を用いて、 `onDelete` アクション送信時にアクションに紐づく Sync-up が削除されることを検査するテストコードを記述します。
    }

    @Steps {
      @Step {
        まず、テストターゲットに `SyncUpsListTests.swift` ファイルを作成し、削除ロジックを検査するためのテストメソッドを追加します。

        @Code(name: "SyncUpsListTests.swift", file: TestingListOfSyncUps-01-code-0001.swift)
      }

      テストコードを記述する際の最初のステップは、「機能のテスト可能なランタイム」である ``ComposableArchitecture/TestStore`` の構築です。
      ユーザ操作によって送信される一連のアクションをエミュレートし、各アクションで生じる状態の変化と Effect の振る舞いを検査します。

      @Step {
        `Store` の構築と同様、機能の初期状態とテスト対象の Reducer を指定して ``ComposableArchitecture/TestStore`` を構築します。
        削除を行うため、初期状態として1つの Sync-up を要素に持つ配列を指定します。

        @Code(name: "SyncUpsListTests.swift", file: TestingListOfSyncUps-01-code-0002.swift)
      }

      @Step {
        ユーザ操作をエミュレートするために、 TestStore に Action を送信します。
        この場合、 `onDelete` アクションを送信することで、ユーザによる行のスワイプと "Delete" ボタンのタップをシミュレートします。
        また、先頭行の削除を表す `IndexSet` を指定します。

        @Code(name: "SyncUpsListTests.swift", file: TestingListOfSyncUps-01-code-0003.swift)
      }

      現時点ではこのテストは失敗します。

      テストをパスさせるには Trailing closure にアクション受信後に期待される State を記述する必要があります。
      このクロージャにはアクション送信前の State が単一の可変引数として渡されるため、この引数を Reducer によって処理された後の状態に変更してください。

      @Step {
        ``ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8f2pl`` に Trailing closure を追記し、期待される最終的な状態に変更します。
        ここでは、 `syncUps` の配列が空になり、他の変更が起こらないことを期待します。

        @Code(name: "SyncUpsListTests.swift", file: TestingListOfSyncUps-01-code-0004.swift)
      }

      TCA における基本的なテストコードを紹介しましたが、現時点では機能のロジックがまだシンプルであるため、テストコードもシンプルになっています。
      機能のロジックと振る舞いが複雑になったときに、テストコードは複雑な機能であっても整合性を担保してくれる存在になります。
    }
  }
}
