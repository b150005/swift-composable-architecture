{"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"type":"codeVoice","code":"nil"},{"text":" or not, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"then","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"unwrap","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"text":"Store","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" () -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"kind":"text","text":" = {}) -> any "},{"text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"kind":"text","text":"?"}],"languages":["swift"],"platforms":["macOS"]}]},{"kind":"parameters","parameters":[{"name":"unwrap","content":[{"inlineContent":[{"text":"A function that is called with a store of non-optional state when the store’s","type":"text"},{"type":"text","text":" "},{"text":"state is non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", or whenever it goes from ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to non-"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"}]},{"name":"else","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A function that is called when the store’s optional state is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", or whenever it"},{"text":" ","type":"text"},{"type":"text","text":"goes from non-"},{"type":"codeVoice","code":"nil"},{"text":" to ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]}]}]},{"content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":"A cancellable that maintains a subscription to updates whenever the store’s state"},{"type":"text","text":" "},{"type":"text","text":"goes from "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" to non-"},{"code":"nil","type":"codeVoice"},{"text":" and vice versa, so that the caller can react to these changes.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","type":"heading","level":2,"anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the store’s state is non-"},{"code":"nil","type":"codeVoice"},{"text":", it will safely unwrap the value and bundle it into a new","type":"text"},{"type":"text","text":" "},{"text":"store of non-optional state that is passed to the first closure. If the store’s state is","type":"text"},{"type":"text","text":" "},{"code":"nil","type":"codeVoice"},{"text":", the second closure is called instead.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This method is useful for handling navigation in UIKit. The state for a screen the user wants","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to navigate to can be held as an optional value in the parent, and when that value goes from"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"text":" to non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", or non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" to "},{"type":"codeVoice","code":"nil"},{"text":", you can update the navigation stack accordingly:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class ParentViewController: UIViewController {","  let store: Store<ParentState, ParentAction>","  var cancellables: Set<AnyCancellable> = []","  \/\/ ...","  func viewDidLoad() {","    \/\/ ...","    store","      .scope(state: \\.optionalChild, action: \\.child)","      .ifLet(","        then: { [weak self] childStore in","          self?.navigationController?.pushViewController(","            ChildViewController(store: childStore),","            animated: true","          )","        },","        else: { [weak self] in","          guard let self else { return }","          navigationController?.popToViewController(self, animated: true)","        }","      )","      .store(in: &cancellables)","  }","}"]}],"kind":"content"}],"seeAlsoSections":[{"title":"Combine integration","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher"],"anchor":"Combine-integration"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store\/iflet(then:else:)"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","interfaceLanguage":"swift"},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":">("},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":") -> any ","kind":"text"},{"text":"Cancellable","kind":"typeIdentifier","preciseIdentifier":"s:7Combine11CancellableP"}],"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"ifLet(then:else:)","platforms":[],"symbolKind":"method","extendedModule":"ComposableArchitecture","externalID":"s:22ComposableArchitecture5StoreC5ifLet4then4else7Combine11Cancellable_pyACyqd__q_Gc_yyctqd__SgRszlF","role":"symbol"},"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use 'observe' and 'if let store.scope', instead."}],"type":"paragraph"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/ifLet(then:else:)":{"kind":"symbol","deprecated":true,"title":"ifLet(then:else:)","type":"topic","url":"\/documentation\/composablearchitecture\/store\/iflet(then:else:)","abstract":[{"type":"text","text":"Calls one of two closures depending on whether a store’s optional state is "},{"code":"nil","type":"codeVoice"},{"text":" or not, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"whenever this condition changes for as long as the cancellable lives."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/ifLet(then:else:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"ifLet"},{"kind":"text","text":"<"},{"text":"Wrapped","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Wrapped"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":", "},{"text":"else","kind":"externalParam"},{"kind":"text","text":": () -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> any ","kind":"text"},{"kind":"typeIdentifier","text":"Cancellable","preciseIdentifier":"s:7Combine11CancellableP"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/publisher":{"kind":"symbol","deprecated":true,"title":"publisher","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/publisher","abstract":[{"type":"text","text":"A publisher that emits when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/publisher":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/publisher","kind":"symbol","abstract":[{"text":"A publisher that emits when state changes.","type":"text"}],"title":"publisher","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/publisher","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StorePublisherV","text":"StorePublisher"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":">"}]}}}