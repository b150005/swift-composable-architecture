{"schemaVersion":{"patch":0,"major":0,"minor":3},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"Deriving bindings directly from stores using '@ObservableState'. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#BindingState","type":"text"}]}],"topicSections":[{"title":"Initializers","anchor":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)"],"generated":true},{"title":"Instance Properties","anchor":"Instance-Properties","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue"]},{"title":"Default Implementations","anchor":"Default-Implementations","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"]}],"sections":[],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"type":"text","text":"in SwiftUI views."}],"kind":"symbol","variants":[{"paths":["\/documentation\/composablearchitecture\/bindingstate"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"generated":true,"title":"Bindings","anchor":"Bindings"}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@propertyWrapper","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Along with an action type that conforms to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"text":" protocol, this type can be","type":"text"},{"text":" ","type":"text"},{"text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple","type":"text"},{"type":"text","text":" "},{"text":"mutable fields on state.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"It is not necessary to annotate ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"every","type":"text"}]},{"text":" field with ","type":"text"},{"type":"codeVoice","code":"@BindingState"},{"text":", and in fact it is","type":"text"},{"text":" ","type":"text"},{"text":"not recommended. Marking a field with the property wrapper makes it instantly mutable from the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"outside, which may hurt the encapsulation of your feature. It is best to limit the usage of"},{"text":" ","type":"text"},{"type":"text","text":"the property wrapper to only those fields that need to have bindings derived for handing to"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI components."}]}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Read "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"type":"text","text":" for more information."}]}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To"}],"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingState","kind":"identifier"}],"navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"title":"BindingState","roleHeading":"Structure","externalID":"s:22ComposableArchitecture12BindingStateV","platforms":[],"modules":[{"name":"ComposableArchitecture"}],"role":"symbol","symbolKind":"struct"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Decodable-Implementations":{"kind":"article","title":"Decodable Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/decodable-implementations","role":"collectionGroup","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","type":"topic"},"doc://ComposableArchitecture/SH":{"identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable","title":"Swift.Hashable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/wrappedValue":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/bindingstate\/wrappedvalue","type":"topic","kind":"symbol","title":"wrappedValue","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue","abstract":[{"text":"The underlying value wrapped by the binding state.","type":"text"}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"wrappedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","title":"Deprecations","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"type":"topic","url":"\/documentation\/composablearchitecture\/swiftuideprecations"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","title":"BindableAction","role":"symbol","type":"topic","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Equatable-Implementations":{"role":"collectionGroup","kind":"article","title":"Equatable Implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/equatable-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Hashable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations","type":"topic","abstract":[],"role":"collectionGroup","kind":"article","title":"Hashable Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/hashable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDumpRepresentable-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingstate\/customdumprepresentable-implementations","title":"CustomDumpRepresentable Implementations","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","kind":"article","role":"collectionGroup","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomReflectable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/customreflectable-implementations","role":"collectionGroup","type":"topic","kind":"article","title":"CustomReflectable Implementations","abstract":[]},"doc://ComposableArchitecture/SE":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SE","title":"Swift.Encodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","title":"SwiftUI Integration"},"doc://ComposableArchitecture/s17CustomReflectableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","title":"Swift.CustomReflectable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Encodable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/encodable-implementations","role":"collectionGroup","type":"topic","kind":"article","abstract":[],"title":"Encodable Implementations"},"doc://ComposableArchitecture/10CustomDump0aB13RepresentableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","title":"CustomDump.CustomDumpRepresentable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"type":"topic","abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"title":"BindingViewState","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingviewstate","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/init(wrappedValue:fileID:filePath:line:column:)":{"url":"\/documentation\/composablearchitecture\/bindingstate\/init(wrappedvalue:fileid:filepath:line:column:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","title":"init(wrappedValue:fileID:filePath:line:column:)","abstract":[{"text":"Creates bindable state from the value of another bindable state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)","role":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"title":"BindingViewStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","url":"\/documentation\/composablearchitecture\/bindingviewstore","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingViewStore","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"type":"text","text":" values for a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","title":"ViewStore","deprecated":true,"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/projectedValue":{"title":"projectedValue","abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"deprecated":true,"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"projectedValue","kind":"identifier"},{"text":": ","kind":"text"},{"text":"BindingState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate\/projectedvalue","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"role":"symbol","title":"BindingAction","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","title":"Swift.Sendable"},"doc://ComposableArchitecture/Se":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/Se","title":"Swift.Decodable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDebugStringConvertible-Implementations":{"abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/customdebugstringconvertible-implementations","type":"topic","title":"CustomDebugStringConvertible Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","type":"topic","kind":"article","title":"Working with SwiftUI bindings","url":"\/documentation\/composablearchitecture\/bindings","role":"article","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"text":" ","type":"text"},{"text":"in SwiftUI views.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingState"}],"deprecated":true,"kind":"symbol","title":"BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingstate"}}}