{"metadata":{"role":"article","roleHeading":"Article","title":"Migrating to 1.11","modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.11"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"kind":"article","primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"text":"APIs and deprecated 1 API.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Before following this migration guide be sure you have fully migrated to the newest","type":"text"},{"text":" ","type":"text"},{"text":"tools of version 1.10. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","isActive":true},{"text":" for more information.","type":"text"}]}],"name":"Important","style":"important"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Mutating-shared-state-concurrently","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#Supplying-mock-read-only-state-to-previews","type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Migrating-to-1112","isActive":true}],"type":"paragraph"}]}]},{"text":"Mutating shared state concurrently","type":"heading","anchor":"Mutating-shared-state-concurrently","level":2},{"inlineContent":[{"text":"Version 1.10 of the Composable Architecture introduced a powerful tool for","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"sharing state","overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},{"text":" amongst your features. And you can mutate a piece of shared","type":"text"},{"type":"text","text":" "},{"text":"state directly, as if it were just a normal property on a value type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do."},{"text":" ","type":"text"},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"type":"text","text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible"},{"text":" ","type":"text"},{"type":"text","text":"to do this directly:"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now, "},{"code":"Shared","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"type":"text","text":" "},{"text":"to it from two different threads. However, allowing direct mutation does make the value susceptible","type":"text"},{"type":"text","text":" "},{"text":"to race conditions. If you were to perform ","type":"text"},{"type":"codeVoice","code":"count += 1"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"text":" ","type":"text"},{"text":"the final value to not be 1,000.","type":"text"}]},{"inlineContent":[{"text":"We wanted the ","type":"text"},{"overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference","overridingTitle":"@Shared"},{"text":" type to be as ergonomic as possible, and that is why we make","type":"text"},{"type":"text","text":" "},{"text":"it directly mutable, but we should not be allowing these mutations to happen from asynchronous","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"contexts. And so now the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue","isActive":true},{"type":"text","text":" setter has been marked unavailable from"},{"text":" ","type":"text"},{"text":"asynchronous contexts, with a helpful message of how to fix:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"],"type":"codeListing"},{"inlineContent":[{"text":"To fix this deprecation you can use the new ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)"},{"text":" method on the projected value of","type":"text"},{"type":"text","text":" "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"type":"codeListing","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"text":"shared state as possible in a single ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference"},{"type":"text","text":". That will make sure that the full unit"},{"text":" ","type":"text"},{"type":"text","text":"of work is guarded by a lock."}],"type":"paragraph"},{"level":2,"anchor":"Supplying-mock-read-only-state-to-previews","type":"heading","text":"Supplying mock read-only state to previews"},{"type":"paragraph","inlineContent":[{"text":"A new ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)"},{"type":"text","text":" helper on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader"},{"text":" has been introduced to simplify","type":"text"},{"type":"text","text":" "},{"text":"supplying mock data to Xcode previews. It works like SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"Binding.constant"},{"text":", but for shared","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"references:"}]},{"syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"],"type":"codeListing"},{"anchor":"Migrating-to-1112","type":"heading","level":2,"text":"Migrating to 1.11.2"},{"inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}],"type":"paragraph"},{"type":"heading","level":3,"anchor":"withLock-is-now-MainActor","text":"`withLock` is now `@MainActor`"},{"inlineContent":[{"type":"text","text":"In "},{"overridingTitle":"version 1.11","isActive":true,"overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"reference"},{"type":"text","text":" of the library we deprecated mutating shared state from"},{"type":"text","text":" "},{"text":"asynchronous contexts, such as effects, and instead recommended using the new","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true},{"type":"text","text":" method. Doing so made it possible to lock all mutations to the shared state"},{"type":"text","text":" "},{"text":"and prevent race conditions (see the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"reference","overridingTitle":"migration guide","overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"isActive":true},{"type":"text","text":" for more info)."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"text":"to on different threads. To fix this we have now restricted ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true},{"text":" to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"text":", and so you will now need to ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" its usage:","type":"text"}]},{"code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"],"type":"codeListing","syntax":"diff"},{"inlineContent":[{"type":"text","text":"The compiler should suggest this fix-it for you."}],"type":"paragraph"},{"text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","level":3,"type":"heading","anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored"},{"type":"paragraph","inlineContent":[{"text":"When the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true,"type":"reference"},{"type":"text","text":" property wrapper was first introduced, its dynamic member lookup was overloaded"},{"type":"text","text":" "},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}]},{"syntax":"swift","type":"codeListing","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"This unfortunately made dynamic member lookup a little more difficult to understand:","type":"text"}]},{"code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}]},{"inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"type":"text","text":" "},{"text":"removed entirely. Instead, you can use ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","type":"reference"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"text":"value.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard let"},{"text":" expressions, where Swift does not select the optional overload automatically. To","type":"text"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","type":"reference"},{"text":":","type":"text"}]},{"code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"syntax":"diff","type":"codeListing"}],"kind":"content"}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"text":" method for mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"type":"topic","title":"Migrating to 1.11","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"title":"Migrating to 1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true,"type":"reference"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","type":"topic","title":"Migrating to 1.6","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"abstract":[{"type":"text","text":"Learn techniques for sharing state throughout many parts of your application, and how to persist"},{"type":"text","text":" "},{"type":"text","text":"data to user defaults, the file system, and other external mediums."}],"kind":"article","url":"\/documentation\/composablearchitecture\/sharingstate","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","title":"Sharing state","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"type":"topic","role":"article","title":"Migrating to 1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference"},{"type":"text","text":" "},{"text":"property wrapper, and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","type":"reference","isActive":true},{"text":" persistence strategies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","abstract":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","type":"topic","title":"Migrating to 1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"deprecated":true,"title":"ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"_CaseKeyPath","preciseIdentifier":"s:22ComposableArchitecture12_CaseKeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}],"kind":"symbol","type":"topic","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"abstract":[{"text":"A property wrapper type that shares a value with multiple parts of an application.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SharedReader"}],"kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"SharedReader"}],"url":"\/documentation\/composablearchitecture\/sharedreader","title":"SharedReader","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"#Migrating-to-1112":{"identifier":"#Migrating-to-1112","url":"#Migrating-to-1112","type":"link","titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}],"title":"Migrating to 1.11.2"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/wrappedValue":{"url":"\/documentation\/composablearchitecture\/shared\/wrappedvalue","role":"symbol","title":"wrappedValue","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"wrappedValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"text":"The underlying value referenced by the shared variable.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/wrappedValue","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","role":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"FileStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/filestoragekey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":" operation on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"type":"topic","title":"Migrating to 1.5","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"type":"topic","role":"article","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"title":"AppStorageKey","role":"symbol","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AppStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/appstoragekey","navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","role":"article","title":"Migrating to 1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article"},"#Supplying-mock-read-only-state-to-previews":{"identifier":"#Supplying-mock-read-only-state-to-previews","url":"#Supplying-mock-read-only-state-to-previews","type":"link","titleInlineContent":[{"type":"text","text":"Supplying mock read-only state to previews"}],"title":"Supplying mock read-only state to previews"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"kind":"article","type":"topic","title":"Migrating to 1.13","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.13"},"#Mutating-shared-state-concurrently":{"identifier":"#Mutating-shared-state-concurrently","url":"#Mutating-shared-state-concurrently","type":"link","titleInlineContent":[{"type":"text","text":"Mutating shared state concurrently"}],"title":"Mutating shared state concurrently"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"type":"text","text":", and more."}],"kind":"article","type":"topic","title":"Migrating to 1.7","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/init(_:)":{"kind":"symbol","abstract":[{"type":"text","text":"Unwraps a shared reference to an optional value."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/shared\/init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/init(_:)","type":"topic","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"?("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6SharedV","text":"Shared"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":"?>)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"kind":"article","type":"topic","title":"Migrating to 1.15","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader/constant(_:)":{"url":"\/documentation\/composablearchitecture\/sharedreader\/constant(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader\/constant(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"constant"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"text":"SharedReader","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture12SharedReaderV"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"constant(_:)","abstract":[{"type":"text","text":"Constructs a read-only shared value that remains constant."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"type":"topic","role":"symbol","title":"withLock(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withLock"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","title":"WithViewStore","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"type":"topic","role":"symbol","title":"send(_:assert:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","title":"dependency(_:)","type":"topic","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"type":"topic","title":"Migrating to 1.9","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9"}}}