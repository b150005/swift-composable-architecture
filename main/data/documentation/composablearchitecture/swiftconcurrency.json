{"seeAlsoSections":[{"anchor":"Integrations","generated":true,"title":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"metadata":{"role":"article","roleHeading":"Article","title":"Adopting Swift concurrency","modules":[{"name":"ComposableArchitecture"}]},"kind":"article","primaryContentSections":[{"content":[{"anchor":"overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"text":" ","type":"text"},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"text":" ","type":"text"},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There primary way to create an "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":" in the library is via"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":". It takes a "},{"type":"codeVoice","code":"@Sendable"},{"text":", asynchronous closure,","type":"text"},{"type":"text","text":" "},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"type":"text","text":" "},{"text":"only capture ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" variables that are bound with ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":". Mutable variables and non-"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"types are simply not allowed to be passed to ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closures.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"type":"text","text":" "},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"within an effect."}]},{"level":3,"anchor":"Accessing-state-in-an-effect","text":"Accessing state in an effect","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Reducers are executed with a mutable, ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":" state variable, and such variables cannot be accessed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"from within "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures:"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"text":" ","type":"text"},{"text":"closure:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"]},{"type":"paragraph","inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"variable name for the capture:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"]},{"level":3,"text":"Accessing dependencies in an effect","anchor":"Accessing-dependencies-in-an-effect","type":"heading"},{"inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"library. In particular, when extending "},{"code":"DependencyValues","type":"codeVoice"},{"text":" to provide the computed property:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"]},{"inlineContent":[{"type":"text","text":"If "},{"code":"FactClient","type":"codeVoice"},{"text":" is not ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"code":"get","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" lines:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"syntax":null},{"inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":". This usually just means making sure"},{"type":"text","text":" "},{"type":"text","text":"that the interface type only holds onto "},{"code":"Sendable","type":"codeVoice"},{"text":" data, and in particular, any closure-based","type":"text"},{"type":"text","text":" "},{"type":"text","text":"endpoints should be annotated as "},{"type":"codeVoice","code":"@Sendable"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"syntax":"swift"},{"inlineContent":[{"text":"This will restrict the kinds of closures that can be used when constructing ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"text":" values, thus","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"code":"FactClient","type":"codeVoice"},{"type":"text","text":" sendable itself."}],"type":"paragraph"}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"title":"UIKit Integration","url":"\/documentation\/composablearchitecture\/uikit","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"title":"Effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"role":"symbol","type":"topic","kind":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","kind":"article","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"title":"Observation backport","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/observationbackport"}}}