{"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To","type":"conformsTo","kind":"relationships"}],"seeAlsoSections":[{"anchor":"Creating-an-effect","generated":true,"title":"Creating an effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"]}],"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":"."}],"deprecationSummary":[{"inlineContent":[{"text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult","type":"text"}],"type":"paragraph"}],"metadata":{"platforms":[],"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}],"symbolKind":"enum","role":"symbol","title":"TaskResult","modules":[{"name":"ComposableArchitecture"}],"externalID":"s:22ComposableArchitecture10TaskResultO","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"roleHeading":"Enumeration"},"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"topicSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"],"anchor":"Representing-a-task-result","title":"Representing a task result"},{"title":"Converting a throwing expression","anchor":"Converting-a-throwing-expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"],"title":"Accessing a result’s value","anchor":"Accessing-a-results-value"},{"title":"Transforming results","anchor":"Transforming-results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"]},{"title":"Default Implementations","generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TaskResult"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Success"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"text":" : ","kind":"text"},{"text":"Sendable","kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"This type is needed because Swift’s concurrency tools can only express untyped errors, such as"},{"type":"text","text":" "},{"type":"codeVoice","code":"async"},{"type":"text","text":" functions and "},{"type":"codeVoice","code":"AsyncSequence"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Result<_, any Error>"},{"type":"text","text":". However, "},{"type":"codeVoice","code":"Result<_, any Error>"},{"type":"text","text":" is never "},{"type":"codeVoice","code":"Equatable"},{"text":" since ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is not","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", and equatability is very important for testing in the Composable Architecture. By","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"defining our own type we get the ability to recover equatability in most situations."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If someday Swift gets typed "},{"type":"codeVoice","code":"throws"},{"text":", then we can eliminate this type and rely solely on","type":"text"},{"type":"text","text":" "},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"type":"text","text":" "},{"text":"effect:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can model your dependency as using simple ","type":"text"},{"type":"codeVoice","code":"async"},{"type":"text","text":" and "},{"code":"throws","type":"codeVoice"},{"text":" functionality:","type":"text"}]},{"code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally you can use "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"text":" to construct an","type":"text"},{"text":" ","type":"text"},{"text":"effect in the reducer that invokes the ","type":"text"},{"type":"codeVoice","code":"numberFact"},{"type":"text","text":" endpoint and wraps its response in a"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" by using its catching initializer, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"]},{"text":"Equality","level":2,"anchor":"Equality","type":"heading"},{"inlineContent":[{"text":"The biggest downside to using an untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" in a result type is that the result will not"},{"type":"text","text":" "},{"text":"be equatable even if the success type is. This negatively affects your ability to test features","type":"text"},{"type":"text","text":" "},{"text":"that use ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" in their actions with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"text":" does extra work to try to maintain equatability when possible. If the underlying","type":"text"},{"text":" ","type":"text"},{"text":"type masked by the ","type":"text"},{"type":"codeVoice","code":"Error"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", then it will use that "},{"code":"Equatable","type":"codeVoice"},{"text":" conformance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on two failures. Luckily, most errors thrown by Apple’s frameworks are already equatable, and"},{"type":"text","text":" "},{"text":"because errors are typically simple value types, it is usually possible to have the compiler","type":"text"},{"type":"text","text":" "},{"type":"text","text":"synthesize a conformance for you."}]},{"inlineContent":[{"text":"If you are testing the unhappy path of a feature that feeds a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" back into the"},{"text":" ","type":"text"},{"text":"system, be sure to conform the error to equatable, or the test will fail:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ 🛑","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ 🛑 'RefreshFailure' is not equatable"]},{"inlineContent":[{"text":"To get a passing test, explicitly conform your custom error to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ 👈","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ✅","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"],"type":"codeListing"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"conformance":{"constraints":[{"type":"codeVoice","code":"Success"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Failure"},{"text":" is ","type":"text"},{"code":"any Error","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol","type":"topic","kind":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":" into a "},{"code":"Result","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":">)"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"title":"Effect","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"text":"Returns a new task result, mapping any success value using the given transformation.","type":"text"}],"title":"map(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"NewSuccess"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"text":") -> ","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","type":"unresolvable","title":"CasePaths.CasePathable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"role":"symbol","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"An effect that does nothing and completes immediately. Useful for situations where you must"},{"type":"text","text":" "},{"text":"return an effect, but you don’t need to do anything.","type":"text"}],"title":"none","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/none"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"role":"symbol","type":"topic","deprecated":true,"kind":"symbol","title":"value","abstract":[{"type":"text","text":"Returns the success value as a throwing property."}],"url":"\/documentation\/composablearchitecture\/taskresult\/value","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"text":"Success","kind":"typeIdentifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","type":"topic","abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}],"title":"send(_:)","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/send(_:)"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","title":"Equatable Implementations","abstract":[],"url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","type":"topic","abstract":[{"type":"text","text":"A convenience type alias for referring to an effect of a given reducer’s domain."}],"title":"EffectOf","kind":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EffectOf"}],"navigatorTitle":[{"kind":"identifier","text":"EffectOf"}],"url":"\/documentation\/composablearchitecture\/effectof"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"role":"symbol","type":"topic","deprecated":true,"kind":"symbol","title":"TaskResult.failure(_:)","abstract":[{"type":"text","text":"A failure, storing an error."}],"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"failure","kind":"identifier"},{"kind":"text","text":"(any "},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"kind":"text","text":")"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","type":"topic","abstract":[{"type":"text","text":"A success, storing a "},{"type":"codeVoice","code":"Success"},{"text":" value.","type":"text"}],"title":"TaskResult.success(_:)","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"text":"success","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":")"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"role":"symbol","type":"topic","kind":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:ScP","text":"TaskPriority","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"operation"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","preciseIdentifier":"s:s5ErrorP","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","type":"topic","abstract":[],"title":"Hashable Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"role":"symbol","type":"topic","deprecated":true,"kind":"symbol","title":"flatMap(_:)","abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation and"},{"text":" ","type":"text"},{"type":"text","text":"unwrapping the produced result."}],"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"text":">) -> ","kind":"text"},{"text":"TaskResult","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewSuccess"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"role":"collectionGroup","type":"topic","url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","abstract":[],"kind":"article","title":"CasePathable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"TaskResult","kind":"identifier"}],"title":"TaskResult","type":"topic","deprecated":true,"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"type":"codeVoice","code":"Result"},{"type":"text","text":" "},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","navigatorTitle":[{"kind":"identifier","text":"TaskResult"}]},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","type":"topic","abstract":[{"text":"Creates a new task result by evaluating an async throwing closure, capturing the returned","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value as a success, or any thrown error as a failure."}],"title":"init(catching:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"catching"},{"kind":"text","text":": () "},{"text":"async","kind":"keyword"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"role":"symbol","type":"topic","deprecated":true,"kind":"symbol","title":"init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" into a "},{"code":"TaskResult","type":"codeVoice"},{"type":"text","text":", erasing its "},{"type":"codeVoice","code":"Failure"},{"text":" to ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Failure","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Success"},{"text":", ","kind":"text"},{"text":"Failure","kind":"typeIdentifier"},{"text":">)","kind":"text"}]}}}