{"abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"text":" ","type":"text"},{"type":"text","text":"APIs such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":", and more."}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"text":" ","type":"text"},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.6. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","type":"reference","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","isActive":true},{"type":"text","text":", and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","isActive":true,"type":"reference"},{"text":" for","type":"text"},{"text":" ","type":"text"},{"text":"more information.","type":"text"}]}],"style":"important","name":"Important"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The following migration guide mostly assumes you are targeting iOS 17, macOS 14, tvOS 17,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"watchOS 10 or higher, but the tools do work for older platforms too. See the dedicated"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","isActive":true,"type":"reference"},{"text":" article for more information on how to use the new observation tools if","type":"text"},{"type":"text","text":" "},{"text":"you are targeting older platforms.","type":"text"}]}]},{"anchor":"Topics","type":"heading","level":3,"text":"Topics"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"#Using-ObservableState","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Replacing-IfLetStore-with-if-let","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Replacing-ForEachStore-with-ForEach"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Replacing-PresentationState-with-Presents"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Updating-alert-and-confirmationDialog"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Replacing-NavigationStackStore-with-NavigationStack","type":"reference","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#BindingState","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#ViewStorebinding"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Computed-view-state"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#View-actions"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Observing-for-UIKit","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Incrementally-migrating"}]}]}],"type":"unorderedList"},{"level":2,"type":"heading","anchor":"Using-ObservableState","text":"Using @ObservableState"},{"inlineContent":[{"type":"text","text":"There are two ways to update existing code to use the new "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference"},{"type":"text","text":" macro depending on"},{"type":"text","text":" "},{"type":"text","text":"your minimum deployment target. Take, for example, the following scaffolding of a typical feature"},{"type":"text","text":" "},{"type":"text","text":"built with the Composable Architecture prior to version 1.7 and the new observation tools:"}],"type":"paragraph"},{"code":["@Reducer","struct Feature {","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  var body: some ReducerOf<Self> {","    \/\/ ...","  }","}","","struct FeatureView: View {","  let store: StoreOf<Feature>","","  struct ViewState: Equatable {","    \/\/ ...","    init(state: Feature.State) { \/* ... *\/ }","  }","","  var body: some View {","    WithViewStore(store, observe: ViewState.init) { viewStore in","      Form {","        Text(viewStore.count.description)","        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This feature is manually managing a "},{"type":"codeVoice","code":"ViewState"},{"text":" struct and using ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":" in order to"},{"type":"text","text":" "},{"type":"text","text":"minimize the state being observed in the view."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If you are still targeting iOS 16, macOS 13, tvOS 16, watchOS 9 or ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"lower"}]},{"type":"text","text":", then you can update the"},{"type":"text","text":" "},{"type":"text","text":"code in the following way:"}]},{"type":"codeListing","syntax":"diff","code":[" @Reducer"," struct Feature {","+  @ObservableState","   struct State { \/* ... *\/ }","   enum Action { \/* ... *\/ }","   var body: some ReducerOf<Self> {","     \/\/ ...","   }"," }"," "," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","-  struct ViewState: Equatable {","-    \/\/ ...","-    init(state: Feature.State) { \/* ... *\/ }","-  }"," ","   var body: some View {","-    WithViewStore(store, observe: ViewState.init) { viewStore in","+    WithPerceptionTracking {","       Form {","-        Text(viewStore.count.description)","-        Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+        Text(store.count.description)","+        Button(\"+\") { store.send(.incrementButtonTapped) }","       }","     }","   }"," }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In particular, the following changes must be made:"}]},{"items":[{"content":[{"inlineContent":[{"text":"Mark your ","type":"text"},{"code":"State","type":"codeVoice"},{"type":"text","text":" with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Delete any view state type you have defined.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Replace the use of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", and the trailing closure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"does not take an argument. The view constructed inside the trailing closure will automatically"},{"type":"text","text":" "},{"text":"observe state accessed inside the closure.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Access state directly in the "},{"code":"store","type":"codeVoice"},{"type":"text","text":" rather than in the "},{"type":"codeVoice","code":"viewStore"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Send actions directly to the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" rather than to the "},{"type":"codeVoice","code":"viewStore"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"If you are able to target iOS 17, macOS 14, tvOS 17, watchOS 10 or "},{"type":"emphasis","inlineContent":[{"text":"higher","type":"text"}]},{"text":", then you will still","type":"text"},{"text":" ","type":"text"},{"text":"apply all of the updates above, but with one additional simplification to the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view:","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":[" var body: some View {","-  WithViewStore(store, observe: ViewState.init) { viewStore in","     Form {","-      Text(viewStore.count.description)","-      Button(\"+\") { viewStore.send(.incrementButtonTapped) }","+      Text(store.count.description)","+      Button(\"+\") { store.send(.incrementButtonTapped) }","     }","-  }"," }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You no longer need the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" views at all."}],"type":"paragraph"},{"level":2,"anchor":"Replacing-IfLetStore-with-if-let","text":"Replacing IfLetStore with ‘if let’","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":" view was a helper for transforming a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" of optional state into a store of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"non-optional state so that it can be handed off to a child view. It is no longer needed when using"},{"type":"text","text":" "},{"text":"the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var child: Child.State?","  }","  enum Action {","    case child(Child.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would make use of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":" in the view like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["IfLetStore(store: store.scope(state: \\.child, action: \\.child)) { childStore in","  ChildView(store: childStore)","} else: {","  Text(\"Nothing to show\")","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be updated to use plain "},{"type":"codeVoice","code":"if let"},{"text":" syntax with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["if let childStore = store.scope(state: \\.child, action: \\.child) {","  ChildView(store: childStore)","} else {","  Text(\"Nothing to show\")","}"]},{"type":"heading","level":2,"anchor":"Replacing-ForEachStore-with-ForEach","text":"Replacing ForEachStore with ForEach"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference","isActive":true},{"type":"text","text":" view was a helper for deriving a store for each element of a collection. It is"},{"text":" ","type":"text"},{"text":"no longer needed when using the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    var rows: IdentifiedArrayOf<Child.State> = []","  }","  enum Action {","    case rows(IdentifiedActionOf<Child>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you would have made use of "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","isActive":true},{"type":"text","text":" in the view like this:"}]},{"type":"codeListing","code":["ForEachStore(","  store.scope(state: \\.rows, action: \\.rows)",") { childStore in","  ChildView(store: childStore)","}"],"syntax":"swift"},{"inlineContent":[{"text":"This can now be updated to use the vanilla ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" view in SwiftUI, along with","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"text":", identified by the state of each row:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["ForEach(","  store.scope(state: \\.rows, action: \\.rows),","  id: \\.state.id",") { childStore in","  ChildView(store: childStore)","}"],"syntax":"swift"},{"inlineContent":[{"text":"If your usage of ","type":"text"},{"type":"codeVoice","code":"ForEachStore"},{"text":" did not depend on the identity of the state of each row (","type":"text"},{"inlineContent":[{"text":"e.g.","type":"text"}],"type":"emphasis"},{"type":"text","text":", the"},{"text":" ","type":"text"},{"text":"state’s ","type":"text"},{"code":"id","type":"codeVoice"},{"text":" is not associated with a selection binding), you can omit the ","type":"text"},{"type":"codeVoice","code":"id"},{"text":" parameter, as the","type":"text"},{"text":" ","type":"text"},{"code":"Store","type":"codeVoice"},{"type":"text","text":" type is identifiable by its object identity:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" ForEach(","-  store.scope(state: \\.rows, action: \\.rows),","-  id: \\.state.id,","+  store.scope(state: \\.rows, action: \\.rows)"," ) { childStore in","   ChildView(store: childStore)"," }"]},{"name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"text":"You can now use collection-based operators with store scoping. For example, use","type":"text"},{"type":"text","text":" "},{"code":"Array.enumerated","type":"codeVoice"},{"type":"text","text":" in order to enumerate the rows so that you can provide custom styling based on"},{"text":" ","type":"text"},{"type":"text","text":"the row being even or odd:"}]},{"type":"codeListing","code":["ForEach(","  Array(store.scope(state: \\.rows, action: \\.rows).enumerated()),","  id: \\.element",") { position, childStore in","  ChildView(store: childStore)","    .background {","      position.isMultiple(of: 2) ? Color.white : Color.gray","    }","}"],"syntax":"swift"}],"type":"aside"},{"anchor":"Replacing-SwitchStore-and-CaseLet-with-switch-and-case","level":2,"type":"heading","text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"type":"text","text":" views are helpers for driving a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" for each case of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an enum. These views are no longer needed when using the new observation tools, and so they are"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}]},{"inlineContent":[{"text":"For example, if your feature’s reducer looks roughly like this:","type":"text"}],"type":"paragraph"},{"code":["@Reducer ","struct Feature {","  @ObservableState","  enum State {","    case activity(ActivityFeature.State)","    case settings(SettingsFeature.State)","  }","  enum Action {","    case activity(ActivityFeature.Action)","    case settings(SettingsFeature.Action)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then you would have used ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","isActive":true},{"text":" in the view like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["SwitchStore(store) {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be updated to use a vanilla "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" and "},{"code":"case","type":"codeVoice"},{"type":"text","text":" in the view:"}]},{"code":["switch store.state {","case .activity:","  if let store = store.scope(state: \\.activity, action: \\.activity) {","    ActivityView(store: store)","  }","case .settings:","  if let store = store.scope(state: \\.settings, action: \\.settings) {","    SettingsView(store: store)","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":2,"text":"Replacing @PresentationState with @Presents","anchor":"Replacing-PresentationState-with-Presents"},{"type":"paragraph","inlineContent":[{"text":"It is a well-known limitation of Swift macros that they cannot be used with property wrappers.","type":"text"},{"type":"text","text":" "},{"text":"This means that if your feature uses ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"text":" you will get compiler errors when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"applying the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":" macro:"}]},{"code":["@ObservableState ","struct State {","  @PresentationState var child: Child.State?  \/\/ 🛑","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Instead of using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true},{"text":" property wrapper you can now use the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference","isActive":true},{"type":"text","text":""},{"type":"text","text":" "},{"text":"macro:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@ObservableState ","struct State {","  @Presents var child: Child.State?  \/\/ ✅","}"]},{"level":2,"text":"Replacing navigation view modifiers with SwiftUI modifiers","type":"heading","anchor":"Replacing-navigation-view-modifiers-with-SwiftUI-modifiers"},{"inlineContent":[{"text":"The library has shipped many navigation view modifiers that mimic what SwiftUI provides, but are","type":"text"},{"type":"text","text":" "},{"text":"tuned specifically for driving navigation from a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":". All of these view modifiers can be"},{"type":"text","text":" "},{"text":"updated to instead use the vanilla SwiftUI version of the view modifier, and so the modifier that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"ship with this library are now soft-deprecated."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var child: Child.State?","  }","  enum Action {","    case child(PresentationAction<Child.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"inlineContent":[{"type":"text","text":"Then previously you would drive a sheet presentation from the view like so:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":[".sheet(store: store.scope(state: \\.$child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now replace "},{"type":"codeVoice","code":"sheet(store:)"},{"type":"text","text":" with the vanilla SwiftUI modifier, "},{"type":"codeVoice","code":"sheet(item:)"},{"text":". First you","type":"text"},{"text":" ","type":"text"},{"text":"must hold onto the store in your view in a bindable manner, using the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"inlineContent":[{"text":"…or, if you’re targeting older platforms, using ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["@Perception.Bindable var store: StoreOf<Feature>"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you can use "},{"code":"sheet(item:)","type":"codeVoice"},{"text":" like so:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":[".sheet(item: $store.scope(state: \\.child, action: \\.child)) { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the state key path is simply "},{"type":"codeVoice","code":"state: \\.child"},{"type":"text","text":", and not "},{"type":"codeVoice","code":"state: \\.$child"},{"text":". The projected","type":"text"},{"type":"text","text":" "},{"type":"text","text":"value of the presentation state is no longer needed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This also applies to popovers, full screen covers, and navigation destinations."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Also, if you are driving navigation from an enum of destinations, then currently your code may"},{"type":"text","text":" "},{"text":"look something like this:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":[".sheet(","  store: store.scope(","    state: \\.$destination.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be changed to this:"}]},{"type":"codeListing","syntax":"swift","code":[".sheet(","  item: $store.scope(","    state: \\.destination?.editForm,","    action: \\.destination.editForm","  )",") { store in","  ChildView(store: store)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the state key path is now simply "},{"type":"codeVoice","code":"\\.destination?.editForm"},{"type":"text","text":", and not"},{"type":"text","text":" "},{"type":"codeVoice","code":"\\.$destination.editForm"},{"text":".","type":"text"}]},{"inlineContent":[{"type":"text","text":"Also note that "},{"code":"navigationDestination(item:)","type":"codeVoice"},{"type":"text","text":" is not available on older platforms, but can be made"},{"text":" ","type":"text"},{"text":"available as far back as iOS 15 using a wrapper. See","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability","isActive":true,"type":"reference"},{"type":"text","text":" for more information."}],"type":"paragraph"},{"anchor":"Updating-alert-and-confirmationDialog","level":2,"text":"Updating alert and confirmationDialog","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"SwiftUI\/View\/alert(store:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SwiftUI\/View\/confirmationDialog(store:)","type":"codeVoice"},{"type":"text","text":" modifiers have"},{"text":" ","type":"text"},{"text":"been used to drive alerts and dialogs from stores, but new modifiers are now available that can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"drive alerts and dialogs from the same store binding scope operation that can power vanilla SwiftUI"},{"text":" ","type":"text"},{"text":"presentation, like ","type":"text"},{"type":"codeVoice","code":"sheet(item:)"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"For example, if your feature’s reducer presents an alert:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    @Presents var alert: AlertState<Action.Alert>?","  }","  enum Action {","    case alert(PresentationAction<Alert>)","    enum Alert { \/* ... *\/ }","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then previously you would drive it from the feature’s view like so:"}]},{"type":"codeListing","syntax":"swift","code":[".alert(store: store.scope(state: \\.$alert, action: \\.alert))"]},{"type":"paragraph","inlineContent":[{"text":"You can now replace ","type":"text"},{"type":"codeVoice","code":"alert(store:)"},{"type":"text","text":" with a new modifier, "},{"code":"SwiftUI\/View\/alert(_:)","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":[".alert($store.scope(state: \\.alert, action: \\.alert))"]},{"text":"Replacing NavigationStackStore with NavigationStack","anchor":"Replacing-NavigationStackStore-with-NavigationStack","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","isActive":true},{"text":" view was a helper for driving a navigation stack from a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":". It"},{"text":" ","type":"text"},{"text":"is no longer needed when using the new observation tools, and so it is ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, if your feature’s reducer looks roughly like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    var path: StackState<Path.State> = []","  }","  enum Action {","    case path(StackAction<Path.State, Path.Action>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"inlineContent":[{"type":"text","text":"Then you would have made use of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"},{"type":"text","text":" in the view like this:"}],"type":"paragraph"},{"syntax":"swift","code":["NavigationStackStore(store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: {","  switch $0 {","  case .activity:","    CaseLet(\/Feature.State.activity, action: Feature.Action.activity) { store in","      ActivityView(store: store)","    }","  case .settings:","    CaseLet(\/Feature.State.settings, action: Feature.Action.settings) { store in","      SettingsView(store: store)","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To update this code, first mark your feature’s state with ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"text":":","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As well as the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer’s state:"}]},{"code":["@Reducer","struct Path {","  @ObservableState","  enum State {","    \/\/ ...","  }","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Then in the view you must start holding onto the ","type":"text"},{"type":"codeVoice","code":"store"},{"text":" in a bindable manner, using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" ","type":"text"},{"type":"text","text":"property wrapper:"}],"type":"paragraph"},{"code":["@Bindable var store: StoreOf<Feature>"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…or using "},{"type":"codeVoice","code":"@Perception.Bindable"},{"type":"text","text":" if targeting older platforms:"}]},{"type":"codeListing","syntax":"swift","code":["@Perception.Bindable var store: StoreOf<Feature>"]},{"inlineContent":[{"type":"text","text":"And the original code can now be updated to our custom initializer"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)"},{"text":" on ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["NavigationStack(path: $store.scope(state: \\.path, action: \\.path)) {","  RootView()","} destination: { store in","  switch store.state {","  case .activity:","    if let store = store.scope(state: \\.activity, action: \\.activity) {","      ActivityView(store: store)","    }","  case .settings:","    if let store = store.scope(state: \\.settings, action: \\.settings) {","      SettingsView(store: store)","    }","  }","}"]},{"level":2,"type":"heading","anchor":"BindingState","text":"@BindingState"},{"inlineContent":[{"type":"text","text":"Bindings in the Composable Architecture have historically been handled by a zoo of types, including"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState"},{"type":"text","text":" and"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"},{"type":"text","text":". For example, if your view needs to be able to derive bindings to many fields"},{"type":"text","text":" "},{"type":"text","text":"on your state, you may have the reducer built somewhat like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct Feature {","  struct State {","    @BindingState var text = \"\"","    @BindingState var isOn = false","  }","  enum Action: BindableAction {","    case binding(BindingAction<State>)","  }","  var body: some ReducerOf<Self> { \/* ... *\/ }","}"]},{"inlineContent":[{"text":"And in the view you derive bindings using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh","isActive":true},{"type":"text","text":" defined on"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["WithViewStore(store, observe: { $0 }) { viewStore in","  Form {","    TextField(\"Text\", text: viewStore.$text)","    Toggle(isOn: viewStore.$isOn)","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you have view state in your view, then you have a lot more steps to take:"}]},{"code":["struct ViewState: Equatable {","  @BindingViewState var text: String","  @BindingViewState var isOn: Bool","  init(store: BindingViewStore<Feature.State>) {","    self._text = store.$text","    self._isOn = store.$isOn","  }","}","","var body: some View {","  WithViewStore(store, observe: ViewState.init) { viewStore in","    Form {","      TextField(\"Text\", text: viewStore.$text)","      Toggle(isOn: viewStore.$isOn)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Most of this goes away when using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()"},{"type":"text","text":" macro. You can start by annotating"},{"type":"text","text":" "},{"type":"text","text":"your feature’s state with "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"text":" and removing all instances of ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},{"text":":","type":"text"}]},{"code":["+@ObservableState"," struct State {","-  @BindingState var text = \"\"","-  @BindingState var isOn = false","+  var text = \"\"","+  var isOn = false"," }"],"type":"codeListing","syntax":"diff"},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"text":"Do not remove the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" conformance from your feature’s "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" or the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer"},{"type":"text","text":" from your reducer. Those are still required for bindings."}]}],"style":"important","type":"aside"},{"inlineContent":[{"type":"text","text":"In the view you must start holding onto the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" in a bindable manner, which means using the"},{"type":"text","text":" "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" property wrapper:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If targeting older Apple platforms where ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" is not available, you can use our"},{"type":"text","text":" "},{"type":"text","text":"backport of the property wrapper:"}]},{"type":"codeListing","code":["@Perception.Bindable var store: StoreOf<Feature>"],"syntax":"swift"}],"style":"note"},{"inlineContent":[{"text":"Then in the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view you can stop using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" and instead derive bindings"},{"text":" ","type":"text"},{"text":"directly from the store:","type":"text"}],"type":"paragraph"},{"code":["var body: some View {","  Form {","    TextField(\"Text\", text: $store.text)","    Toggle(isOn: $store.isOn)","  }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"type":"heading","anchor":"ViewStorebinding","text":"ViewStore.binding"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There’s another way to derive bindings from a view store that involves fewer tools than"},{"type":"text","text":" "},{"type":"codeVoice","code":"@BindingState"},{"type":"text","text":" as shown above, but does involve more boilerplate. You can add an explicit action"},{"text":" ","type":"text"},{"text":"for the binding to your domain, such as an action for setting the tab in a tab-based application:","type":"text"}]},{"code":["@Reducer ","struct Feature {","  struct State {","    var tab = 0","  }","  enum Action {","    case tabChanged(Int)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case let .tabChanged(tab):","        state.tab = tab","        return .none","      }","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then in the view you can use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","isActive":true,"type":"reference"},{"text":" to derive a binding from","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"tab"},{"type":"text","text":" state and the "},{"type":"codeVoice","code":"tabChanged"},{"text":" action:","type":"text"}],"type":"paragraph"},{"code":["TabView(","  selection: viewStore.binding(get: \\.tab, send: { .tabChanged($0) })",") {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Since the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" type is now soft-deprecated, you can update this code to do something much"},{"type":"text","text":" "},{"type":"text","text":"simpler. If you make your feature’s state observable with the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","isActive":true},{"type":"text","text":" macro:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer ","struct Feature {","  @ObservableState","  struct State {","    \/\/ ...","  }","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"In the view you must start holding onto the ","type":"text"},{"code":"store","type":"codeVoice"},{"text":" in a bindable manner, which means using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" (or "},{"code":"@Perception.Bindable","type":"codeVoice"},{"type":"text","text":") property wrapper:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Bindable var store: StoreOf<Feature>"]},{"inlineContent":[{"text":"Then you can derive a binding directly from a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" binding like so:"}],"type":"paragraph"},{"type":"codeListing","code":["TabView(selection: $store.tab.sending(\\.tabChanged)) {","  \/\/ ...","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"If the binding depends on more complex business logic, you can define a custom "},{"type":"codeVoice","code":"get"},{"text":"-","type":"text"},{"type":"codeVoice","code":"set"},{"text":" property","type":"text"},{"type":"text","text":" "},{"text":"(or subscript, if this logic depends on external state) on the store to incorporate this logic. For","type":"text"},{"text":" ","type":"text"},{"text":"example:","type":"text"}],"type":"paragraph"},{"type":"row","numberOfColumns":2,"columns":[{"size":1,"content":[{"type":"codeListing","syntax":"swift","code":["\/\/ Before","","\/\/ In the view:","ForEach(Flag.allCases) { flag in","  Toggle(","    flag.description,","    isOn: viewStore.binding(","      get: { $0.featureFlags.contains(flag) }","      send: { .flagToggled(flag, isOn: $0) }","    )","  )","}"]}]},{"content":[{"type":"codeListing","syntax":"swift","code":["\/\/ After","","\/\/ In the file:","extension StoreOf<Feature> {","  subscript(hasFeatureFlag flag: Flag) -> Bool {","    get { featureFlags.contains(flag) }","    set {","      send(.flagToggled(flag, isOn: newValue))","    }","  }","}","","\/\/ In the view:","ForEach(Flag.allCases) { flag in","  Toggle(","    flag.description,","    isOn: $store[hasFeatureFlag: flag]","  )","}"]}],"size":1}]},{"style":"tip","type":"aside","name":"Tip","content":[{"type":"paragraph","inlineContent":[{"text":"When possible, consider moving complex binding logic into the reducer so that it can be more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"easily tested."}]}]},{"level":2,"anchor":"Computed-view-state","type":"heading","text":"Computed view state"},{"inlineContent":[{"type":"text","text":"If you are using the "},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" pattern in your application, then you may be computing values"},{"type":"text","text":" "},{"type":"text","text":"inside the initializer to be used in the view like so:"}],"type":"paragraph"},{"code":["struct ViewState: Equatable {","  let fullName: String","  init(state: Feature.State) {","    self.fullName = \"\\(state.firstName) \\(state.lastName)\"","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In version 1.7 of the library the ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"text":" struct goes away, and so you can move these kinds of","type":"text"},{"type":"text","text":" "},{"text":"computations to be directly on your feature’s state:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct State {","  \/\/ State fields","  ","  var fullName: String {","    \"\\(self.firstName) \\(self.lastName)\"","  }","}"],"syntax":"swift"},{"text":"View actions","type":"heading","anchor":"View-actions","level":2},{"type":"paragraph","inlineContent":[{"text":"There is a common pattern in the Composable Architecture community to separate actions that are","type":"text"},{"type":"text","text":" "},{"text":"sent in the view from actions that are used internally in the feature, such as emissions of effects.","type":"text"},{"text":" ","type":"text"},{"text":"Typically this looks like the following:","type":"text"}]},{"code":["@Reducer","struct Feature","  struct State { \/* ... *\/ }","  enum Action {","    case loginResponse(Bool)","    case view(View)","","    enum View {","      case loginButtonTapped","    }","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"And then in the view you would use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":" with the "},{"code":"send","type":"codeVoice"},{"type":"text","text":" argument to specify which"},{"type":"text","text":" "},{"type":"text","text":"actions the view has access to:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithViewStore(","      store, ","      observe: { $0 }, ","      send: Feature.Action.view  \/\/ 👈","    ) { viewStore in","      Button(\"Login\") {","        viewStore.send(.loginButtonTapped) ","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That makes it so that you can send "},{"type":"codeVoice","code":"view"},{"type":"text","text":" actions without wrapping the action in "},{"code":".view(…)","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"it makes it so that you can only send "},{"type":"codeVoice","code":"view"},{"text":" actions. For example, the view cannot send the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"loginResponse"},{"text":" action:","type":"text"}]},{"code":["viewStore.send(.loginResponse(false))","\/\/ 🛑 Type 'Feature.Action.View' has no member 'loginResponse'"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This pattern is still possible with version 1.7 of the library, but requires a few small changes."},{"type":"text","text":" "},{"type":"text","text":"First, you must make your "},{"code":"View","type":"codeVoice"},{"type":"text","text":" action enum conform to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction"},{"type":"text","text":" protocol:"}]},{"code":["@Reducer","struct Feature {","  \/\/ ...","  enum Action: ViewAction {  \/\/ 👈","    \/\/ ...","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And second, you can use the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)"},{"type":"text","text":" macro on your view by specifying the reducer that"},{"type":"text","text":" "},{"text":"powers the view. This gives you access to a ","type":"text"},{"type":"codeVoice","code":"send"},{"type":"text","text":" method in the view for sending view actions"},{"text":" ","type":"text"},{"text":"rather than going through ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":["+@ViewAction(for: Feature.self)"," struct FeatureView: View {","   let store: StoreOf<Feature>"," ","   var body: some View {","-    WithViewStore(","-      store, ","-      observe: { $0 }, ","-      send: Feature.Action.view","-    ) { viewStore in","       Button(\"Login\") { ","-        viewStore.send(.loginButtonTapped) ","+        send(.loginButtonTapped)","       }","     }","-  }"," }"],"type":"codeListing"},{"anchor":"Observing-for-UIKit","text":"Observing for UIKit","level":2,"type":"heading"},{"anchor":"Replacing-Storepublisher","text":"Replacing Store.publisher","level":3,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to the observation tools one would typically subscribe to changes in the store via a Combine"},{"text":" ","type":"text"},{"text":"publisher in the entry point of a view, such as ","type":"text"},{"code":"viewDidLoad","type":"codeVoice"},{"type":"text","text":" in a "},{"type":"codeVoice","code":"UIViewController"},{"text":" subclass:","type":"text"}]},{"code":["func viewDidLoad() {","  super.viewDidLoad()","","  store.publisher.count","    .sink { [weak self] in self?.countLabel.text = \"\\($0)\" }","    .store(in: &cancellables)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This can now be done more simply using the "},{"type":"codeVoice","code":"ObjectiveC\/NSObject\/observe(_:)"},{"text":" method defined on","type":"text"},{"text":" ","type":"text"},{"text":"all ","type":"text"},{"type":"codeVoice","code":"NSObject"},{"type":"text","text":"s:"}],"type":"paragraph"},{"type":"codeListing","code":["func viewDidLoad() {","  super.viewDidLoad()","","  observe { [weak self] in ","    guard let self ","    else { return }","","    self.countLabel.text = \"\\(self.store.count)\"","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Be sure to read the documentation for "},{"type":"codeVoice","code":"ObjectiveC\/NSObject\/observe(_:)"},{"type":"text","text":" to learn how to best"},{"text":" ","type":"text"},{"type":"text","text":"wield this tool."}],"type":"paragraph"},{"type":"heading","level":3,"text":"Replacing Store.ifLet","anchor":"Replacing-StoreifLet"},{"inlineContent":[{"type":"text","text":"Prior to the observation tools one would typically subscribe to optional child stores via a Combine"},{"type":"text","text":" "},{"type":"text","text":"operation provided by the library:"}],"type":"paragraph"},{"code":["store","  .scope(state: \\.child, action: \\.child)","  .ifLet { childStore in","    \/\/ Use child store, _e.g._ create a child view controller","  } else: {","    \/\/ Perform clean up work, _e.g._ dismiss child view controller","  }","  .store(in: &cancellables)"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can now be done more simply using the "},{"code":"observe","type":"codeVoice"},{"type":"text","text":" method and"},{"type":"text","text":" "},{"code":"Store\/scope(state:action:fileID:filePath:line:column:)-2ck1n","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["observe {","  if let childStore = store.scope(state: \\.child, action: \\.child) {","    \/\/ Use child store, _e.g._ create a child view controller","  } else {","    \/\/ Perform clean up work, _e.g._ dismiss child view controller","  }","}"],"syntax":"swift","type":"codeListing"},{"text":"Incrementally migrating","anchor":"Incrementally-migrating","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You are most likely going to want to incrementally migrate your application to the new observation tools,"},{"text":" ","type":"text"},{"text":"rather than doing everything all at once. That is possible, but there are some gotchas to be aware","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of when mixing “legacy” features ("},{"type":"emphasis","inlineContent":[{"type":"text","text":"i.e."}]},{"type":"text","text":" features using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":") with"},{"text":" ","type":"text"},{"type":"text","text":"“modern” features ("},{"inlineContent":[{"text":"i.e.","type":"text"}],"type":"emphasis"},{"type":"text","text":" features using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"type":"text","text":")."}]},{"type":"paragraph","inlineContent":[{"text":"The most common problem one will encounter is that when legacy and modern features are mixed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"together, their view bodies can be re-computed more often than necessary. This is due to the"},{"type":"text","text":" "},{"type":"text","text":"mixed modes of observation. Legacy features use the "},{"type":"codeVoice","code":"objectWillChange"},{"type":"text","text":" publisher to synchronously"},{"text":" ","type":"text"},{"type":"text","text":"invalidate the view, whereas modern features use"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","isActive":true,"type":"reference"},{"type":"text","text":". These are two fundamentally different tools,"},{"text":" ","type":"text"},{"type":"text","text":"and it can create a situation where views are invalidated multiple times separated by a thread hop,"},{"text":" ","type":"text"},{"text":"making it impossible to coalesce the validations into a single one. That is what causes the body","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to re-compute multiple times."}]},{"type":"paragraph","inlineContent":[{"text":"Typically a few extra body re-computations shouldn’t be a big deal, but they can put strain on","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI’s ability to figure out what state changed in a view, and can cause glitchiness and","type":"text"},{"type":"text","text":" "},{"text":"exacerbate navigation bugs. If you are noticing problems after converting one feature to use","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true},{"text":", then we recommend trying to convert a few more features that it interacts","type":"text"},{"text":" ","type":"text"},{"text":"with to see if the problems go away.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We have also found that modern features that contain legacy features as child features tend to","type":"text"},{"type":"text","text":" "},{"text":"behave better than the opposite. For this reason we recommend updating your features to use","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"reference","isActive":true},{"text":" from the outside in. That is, start with the root feature, update it to","type":"text"},{"type":"text","text":" "},{"text":"use the new observation tools, and then work you way towards the leaf features.","type":"text"}]}]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"]}],"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.7"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.7"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","interfaceLanguage":"swift"},"kind":"article","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","abstract":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","type":"topic","title":"Migrating to 1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol"},"#Replacing-ForEachStore-with-ForEach":{"identifier":"#Replacing-ForEachStore-with-ForEach","title":"Replacing ForEachStore with ForEach","titleInlineContent":[{"text":"Replacing ForEachStore with ForEach","type":"text"}],"url":"#Replacing-ForEachStore-with-ForEach","type":"link"},"https://developer.apple.com/documentation/observation/withobservationtracking(_:onchange:)":{"identifier":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","title":"withObservationTracking","titleInlineContent":[{"code":"withObservationTracking","type":"codeVoice"}],"url":"https:\/\/developer.apple.com\/documentation\/observation\/withobservationtracking(_:onchange:)","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"type":"topic","role":"article","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article"},"#BindingState":{"identifier":"#BindingState","title":"@BindingState","titleInlineContent":[{"text":"@BindingState","type":"text"}],"url":"#BindingState","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","abstract":[],"role":"symbol","title":"ObservableState","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ObservableState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/observablestate","navigatorTitle":[{"text":"ObservableState","kind":"identifier"}]},"#Observing-for-UIKit":{"identifier":"#Observing-for-UIKit","title":"Observing for UIKit","titleInlineContent":[{"text":"Observing for UIKit","type":"text"}],"url":"#Observing-for-UIKit","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"text":" ","type":"text"},{"text":"in SwiftUI views.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingState"}],"deprecated":true,"kind":"symbol","title":"BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindingstate"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"url":"\/documentation\/composablearchitecture\/bindingreducer","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"topic","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingReducer","kind":"identifier"}],"title":"BindingReducer","kind":"symbol","navigatorTitle":[{"text":"BindingReducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"title":"PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"title":"BindingViewStore","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","url":"\/documentation\/composablearchitecture\/bindingviewstore","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingViewStore","kind":"identifier"}],"abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"type":"text","text":" values for a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":"."}]},"#Using-ObservableState":{"type":"link","identifier":"#Using-ObservableState","title":"Using @ObservableState","url":"#Using-ObservableState","titleInlineContent":[{"text":"Using @ObservableState","type":"text"}]},"#Incrementally-migrating":{"type":"link","identifier":"#Incrementally-migrating","title":"Incrementally migrating","url":"#Incrementally-migrating","titleInlineContent":[{"text":"Incrementally migrating","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","url":"\/documentation\/composablearchitecture\/viewaction","role":"symbol","abstract":[{"text":"Defines the actions that can be sent from a view.","type":"text"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewAction"}],"title":"ViewAction","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ViewAction"}],"type":"topic"},"#ViewStorebinding":{"type":"link","identifier":"#ViewStorebinding","title":"ViewStore.binding","url":"#ViewStorebinding","titleInlineContent":[{"text":"ViewStore.binding","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"title":"Migrating to 1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/subscript(dynamicMember:)-3q4xh":{"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/subscript(dynamicMember:)-3q4xh","type":"topic","abstract":[],"title":"subscript(dynamicMember:)","kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"dynamicMember","kind":"externalParam"},{"kind":"text","text":" _: "},{"text":"_WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16_WritableKeyPatha"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"preciseIdentifier":"s:22ComposableArchitecture12BindingStateV","text":"BindingState","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">>) -> "},{"text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/viewstore\/subscript(dynamicmember:)-3q4xh","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"text":" is ","type":"text"},{"code":"ViewAction.State","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"ViewAction"},{"type":"text","text":" conforms to "},{"code":"BindableAction","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"type":"topic","abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"title":"BindingViewState","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingviewstate","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingViewState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","title":"dependency(_:)","type":"topic","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","title":"WithViewStore","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"type":"topic","url":"\/documentation\/composablearchitecture\/caselet","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","type":"reference","isActive":true},{"type":"text","text":"."}],"role":"symbol","deprecated":true,"title":"CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"reference"},{"text":".","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","title":"BindableAction","role":"symbol","type":"topic","navigatorTitle":[{"text":"BindableAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/bindableaction","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"deprecated":true,"title":"ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"type":"topic","role":"article","title":"Migrating to 1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference"},{"type":"text","text":" "},{"text":"property wrapper, and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","type":"reference","isActive":true},{"text":" persistence strategies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","kind":"article"},"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case":{"type":"link","identifier":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case","title":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","url":"#Replacing-SwitchStore-and-CaseLet-with-switch-and-case","titleInlineContent":[{"text":"Replacing SwitchStore and CaseLet with ‘switch’ and ‘case’","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","kind":"article","abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"title":"Observation backport","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/observationbackport"},"#Replacing-NavigationStackStore-with-NavigationStack":{"type":"link","identifier":"#Replacing-NavigationStackStore-with-NavigationStack","title":"Replacing NavigationStackStore with NavigationStack","url":"#Replacing-NavigationStackStore-with-NavigationStack","titleInlineContent":[{"text":"Replacing NavigationStackStore with NavigationStack","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","role":"article","title":"Migrating to 1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/binding(get:send:)-65xes":{"kind":"symbol","abstract":[{"text":"Derives a binding from the store that prevents direct writes to state and instead sends","type":"text"},{"type":"text","text":" "},{"text":"actions to the store.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/binding(get:send:)-65xes","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"binding"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"get","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"send","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":") -> ","kind":"text"},{"text":"Binding","preciseIdentifier":"s:7SwiftUI7BindingV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"deprecated":true,"title":"binding(get:send:)","url":"\/documentation\/composablearchitecture\/viewstore\/binding(get:send:)-65xes","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","title":"ViewStore","deprecated":true,"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Backwards-compatible-availability":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Backwards-compatible-availability","title":"Backwards compatible availability","url":"\/documentation\/composablearchitecture\/treebasednavigation#Backwards-compatible-availability","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"type":"topic","role":"symbol","title":"withLock(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withLock"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"title":"AppStorageKey","role":"symbol","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AppStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/appstoragekey","navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol"},"#Computed-view-state":{"type":"link","identifier":"#Computed-view-state","title":"Computed view state","url":"#Computed-view-state","titleInlineContent":[{"text":"Computed view state","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Root"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","title":"init(path:root:destination:fileID:filePath:line:column:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier","text":"StackAction"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">>>, "},{"text":"root","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Wraps a property with "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"type":"text","text":" and observes it."}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"Presents","kind":"identifier"},{"kind":"text","text":"()"}],"title":"Presents()","url":"\/documentation\/composablearchitecture\/presents()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/navigationstackstore","title":"NavigationStackStore","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"url":"\/documentation\/composablearchitecture\/bindingaction","abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"role":"symbol","title":"BindingAction","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"BindingAction","kind":"identifier"}]},"#Replacing-PresentationState-with-Presents":{"type":"link","identifier":"#Replacing-PresentationState-with-Presents","title":"Replacing @PresentationState with @Presents","url":"#Replacing-PresentationState-with-Presents","titleInlineContent":[{"text":"Replacing @PresentationState with @Presents","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"type":"topic","title":"Migrating to 1.9","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol"},"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers":{"type":"link","identifier":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","title":"Replacing navigation view modifiers with SwiftUI modifiers","url":"#Replacing-navigation-view-modifiers-with-SwiftUI-modifiers","titleInlineContent":[{"text":"Replacing navigation view modifiers with SwiftUI modifiers","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"kind":"article","type":"topic","title":"Migrating to 1.13","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.13"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","role":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"FileStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/filestoragekey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","type":"topic","kind":"symbol","title":"send(_:)","url":"\/documentation\/composablearchitecture\/store\/send(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask"}],"abstract":[{"type":"text","text":"Sends an action to the store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","role":"symbol","deprecated":true,"title":"SwitchStore","url":"\/documentation\/composablearchitecture\/switchstore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference"},{"type":"text","text":" views."}],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"type":"topic","role":"symbol","title":"send(_:assert:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewAction(for:)":{"title":"ViewAction(for:)","kind":"symbol","abstract":[{"type":"text","text":"Provides a view with access to a feature’s "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction","type":"reference","isActive":true},{"type":"text","text":"s."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/viewaction(for:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewAction(for:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ViewAction"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"for"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":".Type)"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"role":"symbol","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","title":"ObservableState()","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/observablestate()"},"#Replacing-IfLetStore-with-if-let":{"type":"link","identifier":"#Replacing-IfLetStore-with-if-let","title":"Replacing IfLetStore with ‘if let’","url":"#Replacing-IfLetStore-with-if-let","titleInlineContent":[{"text":"Replacing IfLetStore with ‘if let’","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"kind":"article","type":"topic","title":"Migrating to 1.15","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"text":" method for mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"type":"topic","title":"Migrating to 1.11","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"#Updating-alert-and-confirmationDialog":{"identifier":"#Updating-alert-and-confirmationDialog","title":"Updating alert and confirmationDialog","titleInlineContent":[{"text":"Updating alert and confirmationDialog","type":"text"}],"url":"#Updating-alert-and-confirmationDialog","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","kind":"article","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":" operation on "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}],"type":"topic","title":"Migrating to 1.5","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.5"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true,"type":"reference"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","type":"topic","title":"Migrating to 1.6","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"_CaseKeyPath","preciseIdentifier":"s:22ComposableArchitecture12_CaseKeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}],"kind":"symbol","type":"topic","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","role":"symbol"},"#View-actions":{"identifier":"#View-actions","title":"View actions","titleInlineContent":[{"text":"View actions","type":"text"}],"url":"#View-actions","type":"link"}}}