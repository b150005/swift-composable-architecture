{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"abstract":[{"text":"A view helper that transforms a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"seeAlsoSections":[{"generated":true,"anchor":"View-containers","title":"View containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"]}],"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"type":"conformsTo","title":"Conforms To","kind":"relationships"}],"metadata":{"role":"symbol","symbolKind":"struct","title":"WithViewStore","platforms":[],"externalID":"s:22ComposableArchitecture13WithViewStoreV","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"roleHeading":"Structure","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"topicSections":[{"title":"Creating a view","anchor":"Creating-a-view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"],"title":"Debugging view updates","anchor":"Debugging-view-updates"},{"title":"Instance Properties","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"anchor":"Default-Implementations","title":"Default Implementations"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}]}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"WithViewStore","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Content"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI4ViewP","text":"View","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"This helper is an alternative to observing the view store manually on your view, which requires","type":"text"},{"type":"text","text":" "},{"text":"the boilerplate of a custom initializer.","type":"text"}]},{"style":"important","name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to properly leverage the "},{"type":"codeVoice","code":"observe"},{"text":" argument in order to observe","type":"text"},{"text":" ","type":"text"},{"text":"only the state that your view needs to do its job. See the “Performance” section below for more","type":"text"},{"text":" ","type":"text"},{"text":"information.","type":"text"}]}],"type":"aside"},{"inlineContent":[{"type":"text","text":"For example, the following view, which manually observes the store it is handed by constructing"},{"type":"text","text":" "},{"type":"text","text":"a view store in its initializer:"}],"type":"paragraph"},{"type":"codeListing","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"],"syntax":"swift"},{"inlineContent":[{"text":"…can be written more simply using ","type":"text"},{"code":"WithViewStore","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"There may be times where the slightly more verbose style of observing a store is preferred","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead of using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":":"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":" wraps complex views the Swift compiler can quickly become bogged","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing"},{"text":" ","type":"text"},{"type":"text","text":"such instability you should consider manually setting up observation with an"},{"type":"text","text":" "},{"code":"@ObservedObject","type":"codeVoice"},{"text":" property as described above.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Sometimes you may want to observe the state in a store in a context that is not a view"},{"text":" ","type":"text"},{"text":"builder. In such cases ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":" will not work since it is intended only for"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI views."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"text":" protocol, which uses a separate","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@SceneBuilder"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"@ViewBuilder"},{"text":". In this case you must use an ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"type":"text","text":":"}]},{"syntax":"swift","code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Note that it is highly discouraged for you to observe ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" of your root store’s state.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It is almost never needed and will cause many view recomputations leading to poor"},{"text":" ","type":"text"},{"text":"performance. This is why we construct a separate ","type":"text"},{"code":"SceneState","type":"codeVoice"},{"text":" type that holds onto only the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state that the view needs for rendering. See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","isActive":true},{"type":"text","text":" for more information on this"},{"type":"text","text":" "},{"type":"text","text":"topic."}]}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"If your view does not need access to any state in the store and only needs to be able to send"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":" at all. Instead, you can send","type":"text"},{"text":" ","type":"text"},{"text":"actions directly to a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" like so:","type":"text"}],"type":"paragraph"},{"code":["Button(\"Tap me\") {","  self.store.send(.buttonTapped)","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Performance","anchor":"Performance","type":"heading"},{"inlineContent":[{"type":"text","text":"A common performance pitfall when using the library comes from constructing "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":"s and","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":"s. When constructed naively, using either view store’s initializer"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y"},{"text":" or the SwiftUI helper ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":", it  will observe"},{"text":" ","type":"text"},{"text":"every change to state in the store:","type":"text"}],"type":"paragraph"},{"code":["WithViewStore(self.store, observe: { $0 }) { viewStore in","  \/\/ This is executed for every action sent into the system","  \/\/ that causes self.store.state to change.","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Most of the time this observes far too much state. A typical feature in the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture holds onto not only the state the view needs to present UI, but also state that the"},{"text":" ","type":"text"},{"text":"feature only needs internally, as well as state of child features embedded in the feature.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Changes to the internal and child state should not cause the view’s body to re-compute since"},{"type":"text","text":" "},{"text":"that state is not needed in the view.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if the root of our application was a tab view, then we could model that in state"},{"text":" ","type":"text"},{"type":"text","text":"as a struct that holds each tab’s state as a property:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"If the view only needs to construct the views for each tab, then no view store is even needed","type":"text"},{"text":" ","type":"text"},{"text":"because we can pass scoped stores to each child feature view:","type":"text"}]},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: \\.activity)","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: \\.search)","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: \\.profile)","      )","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means "},{"code":"AppView","type":"codeVoice"},{"type":"text","text":" does not actually need to observe any state changes. This view will only be"},{"type":"text","text":" "},{"text":"created a single time, whereas if we observed the store then it would re-compute every time a single","type":"text"},{"type":"text","text":" "},{"type":"text","text":"thing changed in either the activity, search or profile child features."}]},{"inlineContent":[{"type":"text","text":"If sometime in the future we do actually need some state from the store, we can start to observe"},{"type":"text","text":" "},{"text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need access to the currently selected tab in state:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct AppFeature {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"Then we can observe this state so that we can construct a binding to "},{"type":"codeVoice","code":"selectedTab"},{"text":" for the tab view:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: \\.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: \\.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: \\.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, this style of state observation is terribly inefficient since "},{"type":"emphasis","inlineContent":[{"text":"every","type":"text"}]},{"type":"text","text":" change to"},{"text":" ","type":"text"},{"code":"AppFeature.State","type":"codeVoice"},{"type":"text","text":" will cause the view to re-compute even though the only piece of state we"},{"text":" ","type":"text"},{"text":"actually care about is the ","type":"text"},{"type":"codeVoice","code":"selectedTab"},{"text":". The reason we are observing too much state is because","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we use "},{"code":"observe: { $0 }","type":"codeVoice"},{"type":"text","text":" in the construction of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":", which means the view"},{"type":"text","text":" "},{"type":"text","text":"store will observe all of state."}],"type":"paragraph"},{"inlineContent":[{"text":"To chisel away at the observed state you can provide a closure for that argument that plucks out","type":"text"},{"text":" ","type":"text"},{"text":"the state the view needs. In this case the view only needs a single field:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"In the future, the view may need access to more state. For example, suppose ","type":"text"},{"type":"codeVoice","code":"Activity.State"},{"type":"text","text":" "},{"text":"holds onto an ","type":"text"},{"code":"unreadCount","type":"codeVoice"},{"type":"text","text":" integer to represent how many new activities you have. There’s no"},{"type":"text","text":" "},{"type":"text","text":"need to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of "},{"type":"codeVoice","code":"Activity.State"},{"text":" to get access to this one field. You can observe just","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the one field."}]},{"inlineContent":[{"type":"text","text":"Technically you can do this by mapping your state into a tuple, but because tuples are not"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" you will need to provide an explicit ","type":"text"},{"type":"codeVoice","code":"removeDuplicates"},{"type":"text","text":" argument:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["WithViewStore(","  self.store,","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: \\.activity)","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, and recommended, you can introduce a lightweight, equatable "},{"type":"codeVoice","code":"ViewState"},{"text":" struct","type":"text"},{"type":"text","text":" "},{"text":"nested inside your view whose purpose is to transform the ","type":"text"},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"type":"text","text":" "},{"text":"essentials of what the view needs:","type":"text"}]},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: \\.activity)","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"This gives you maximum flexibility in the future for adding new fields to ","type":"text"},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" without"},{"text":" ","type":"text"},{"text":"making your view convoluted.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This technique for reducing view re-computations is most effective towards the root of your app"},{"type":"text","text":" "},{"text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lots of state that its view does not need, such as child features, and leaf features tend to"},{"text":" ","type":"text"},{"type":"text","text":"only hold what’s necessary. If you are going to employ this technique you will get the most"},{"text":" ","type":"text"},{"type":"text","text":"benefit by applying it to views closer to the root. At leaf features and views that need access"},{"text":" ","type":"text"},{"type":"text","text":"to most of the state, it is fine to continue using "},{"type":"codeVoice","code":"observe: { $0 }"},{"text":" to observe all of the state","type":"text"},{"text":" ","type":"text"},{"text":"in the store.","type":"text"}],"type":"paragraph"},{"text":"Overview","anchor":"Overview","level":2,"type":"heading"}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","title":"Performance","role":"article","url":"\/documentation\/composablearchitecture\/performance","abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"text":"Content","kind":"typeIdentifier"}],"kind":"symbol","deprecated":true,"abstract":[],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/body","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body","title":"body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwitchStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","role":"symbol","deprecated":true,"title":"SwitchStore","url":"\/documentation\/composablearchitecture\/switchstore","navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","type":"reference"},{"type":"text","text":" views."}],"kind":"symbol","type":"topic"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","type":"unresolvable","title":"SwiftUICore.DynamicViewContent"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"_printChanges","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"text":") -> ","kind":"text"},{"text":"WithViewStore","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Content"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","role":"symbol","abstract":[{"type":"text","text":"Prints debug information to the console whenever the view is computed."}],"deprecated":true,"title":"_printChanges(_:)"},"doc://ComposableArchitecture/s8SendableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable","title":"Swift.Sendable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","title":"Deprecations","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"type":"topic","url":"\/documentation\/composablearchitecture\/swiftuideprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","title":"WithViewStore","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"type":"topic","url":"\/documentation\/composablearchitecture\/caselet","navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CaseLet"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","type":"reference","isActive":true},{"type":"text","text":"."}],"role":"symbol","deprecated":true,"title":"CaseLet"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"deprecated":true,"title":"ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","title":"ViewStore","deprecated":true,"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"ViewStore"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"url":"\/documentation\/composablearchitecture\/navigationlinkstore","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"navigatorTitle":[{"text":"NavigationLinkStore","kind":"identifier"}],"deprecated":true,"type":"topic","title":"NavigationLinkStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/navigationstackstore","title":"NavigationStackStore","navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"abstract":[{"text":"A navigation stack that is driven by a store.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NavigationStackStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","type":"topic","abstract":[],"title":"DynamicViewContent Implementations","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"url":"\/documentation\/composablearchitecture\/swiftuiintegration","abstract":[{"text":"Integrating the Composable Architecture into a SwiftUI application.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","title":"SwiftUI Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"role":"collectionGroup","kind":"article","title":"View Implementations","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","kind":"symbol","abstract":[{"text":"Initializes a view store from a store which observes changes to state.","type":"text"}],"role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y","title":"init(_:observe:)","conformance":{"constraints":[{"code":"ViewState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"text":"observe","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ViewState"},{"text":")","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"title":"init(_:observe:content:file:line:)","abstract":[{"type":"text","text":"Initializes a structure that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" into an observable ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"text":" in order","type":"text"},{"type":"text","text":" "},{"text":"to compute views from state.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":">(","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"text":">, ","kind":"text"},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"content","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","kind":"typeIdentifier","text":"ViewStore"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":")","kind":"text"}],"conformance":{"constraints":[{"code":"ViewState","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"role":"symbol"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP","type":"unresolvable","title":"SwiftUICore.View"}}}