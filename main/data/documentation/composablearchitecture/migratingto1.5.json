{"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"sections":[],"abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" operation on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"title":"Migrating to 1.5","roleHeading":"Article","role":"article"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"},"variants":[{"paths":["\/documentation\/composablearchitecture\/migratingto1.5"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"type":"text","text":" "},{"type":"text","text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest"},{"text":" ","type":"text"},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}]},{"name":"Important","style":"important","type":"aside","content":[{"inlineContent":[{"text":"Many APIs have been soft-deprecated in this release and will be hard-deprecated in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a future minor release. We highly recommend updating your use of deprecated APIs to their newest"},{"type":"text","text":" "},{"text":"version as quickly as possible.","type":"text"}],"type":"paragraph"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Store-scoping-with-key-paths","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Scoping-performance"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Enum-driven-navigation-APIs","isActive":true,"type":"reference"}]}]}]},{"level":3,"text":"Store scoping with key paths","type":"heading","anchor":"Store-scoping-with-key-paths"},{"type":"paragraph","inlineContent":[{"text":"Prior to version 1.5 of the Composable Architecture, one was allowed to","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"text":" a store with any kind of closures that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"transform the parent state to the child state, and child actions into parent actions:"}]},{"syntax":"swift","type":"codeListing","code":["store.scope(","  state: (State) -> ChildState,","  action: (ChildAction) -> Action",")"]},{"inlineContent":[{"text":"In practice you could typically use key paths for the ","type":"text"},{"code":"state","type":"codeVoice"},{"type":"text","text":" transformation since key path literals"},{"type":"text","text":" "},{"type":"text","text":"can be promoted to closures. That means often scoping looked something like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["\/\/ ⚠️ Deprecated API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: { .child($0) }","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, as of version 1.5 of the Composable Architecture, the version of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","isActive":true},{"type":"text","text":" that takes two closures is"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"text":"soft-deprecated","type":"text"}]},{"type":"text","text":". Instead, you are to use the version of"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"text":" that takes a key path for the ","type":"text"},{"type":"codeVoice","code":"state"},{"text":"","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"argument, and a case key path for the "},{"code":"action","type":"codeVoice"},{"text":" argument.","type":"text"}]},{"inlineContent":[{"text":"This is easiest to do when you are using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro with your","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature because then case key paths are automatically generated for each case of your action enum."},{"type":"text","text":" "},{"type":"text","text":"The above construction of "},{"code":"ChildView","type":"codeVoice"},{"type":"text","text":" now becomes:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ✅ New API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: \\.child","  )",")"],"type":"codeListing"},{"inlineContent":[{"text":"The syntax is now shorter and more symmetric, and there is a hidden benefit too. Because key paths","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are "},{"type":"codeVoice","code":"Hashable"},{"text":", we are able to cache the store created by ","type":"text"},{"code":"scope","type":"codeVoice"},{"text":". This means if the store is scoped","type":"text"},{"text":" ","type":"text"},{"text":"again with the same ","type":"text"},{"type":"codeVoice","code":"state"},{"type":"text","text":" and "},{"code":"action","type":"codeVoice"},{"type":"text","text":" arguments, we can skip creating a new store and instead"},{"text":" ","type":"text"},{"text":"return the previously created one. This provides a lot of benefits, such as better performance, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a stable identity for features."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are some times when changing to this new scoping operator may be difficult. For example, if"},{"type":"text","text":" "},{"type":"text","text":"you perform additional work in your scoping closure so that a simple key path does not work:"}],"type":"paragraph"},{"code":["ChildView(","  store: store.scope(","    state: { ChildFeature(state: $0.child) }, ","    action: { .child($0) }","  )",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be handled by moving the work in the closure to a computed property on your state:"}]},{"syntax":"swift","code":["extension State {","  var childFeature: ChildFeature {","    ChildFeature(state: self.child) ","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And now the key path syntax works just fine:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["ChildView(","  store: store.scope(","    state: \\.childFeature, ","    action: \\.child","  )",")"]},{"inlineContent":[{"text":"Another complication is if you are using data from ","type":"text"},{"inlineContent":[{"type":"text","text":"outside"}],"type":"emphasis"},{"text":" the closure, ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"inside"}]},{"type":"text","text":" the closure:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["ChildView(","  store: store.scope(","    state: { ","      ChildFeature(","        settings: viewStore.settings,","        state: $0.child","      ) ","    }, ","    action: { .child($0) }","  )",")"]},{"inlineContent":[{"text":"In this situation you can add a subscript to your state so that you can pass that data into it:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension State {","  subscript(settings settings: Settings) -> ChildFeature {","    ChildFeature(","      settings: settings,","      state: self.child","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then you can use a subscript key path to perform the scoping:"}]},{"code":["ChildView(","  store: store.scope(","    state: \\.[settings: viewStore.settings], ","    action: \\.child","  )",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Another common case you may encounter is when dealing with collections. It is common in the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture to use an "},{"type":"codeVoice","code":"IdentifiedArray"},{"text":" in your feature’s state and an","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference"},{"text":" in your feature’s actions (see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},{"text":" for more","type":"text"},{"type":"text","text":" "},{"type":"text","text":"info on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference"},{"type":"text","text":"). If you needed to scope your store down to one specific row of the"},{"type":"text","text":" "},{"text":"identified domain, previously you would have done so like this:","type":"text"}],"type":"paragraph"},{"code":["store.scope(","  state: \\.rows[id: id],","  action: { .rows(.element(id: id, action: $0)) }",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"With case key paths it can be done simply like this:","type":"text"}]},{"code":["store.scope(","  state: \\.rows[id: id],","  action: \\.rows[id: id]",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These tricks should be enough for you to rewrite all of your store scopes using key paths, but if"},{"text":" ","type":"text"},{"text":"you have any problems feel free to open a","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},{"text":" on the repo.","type":"text"}]},{"level":2,"anchor":"Scoping-performance","text":"Scoping performance","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The performance characteristics for store scoping have changed in this release. The primary (and"},{"text":" ","type":"text"},{"type":"text","text":"intended) way of scoping is along "},{"type":"emphasis","inlineContent":[{"type":"text","text":"stored"}]},{"type":"text","text":" properties of child features. A very basic example of this"},{"type":"text","text":" "},{"type":"text","text":"is the following:"}]},{"syntax":"swift","code":["ChildView(","  store: store.scope(state: \\.child, action: \\.child)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"A less common (and less supported) form of scoping is along ","type":"text"},{"inlineContent":[{"text":"computed","type":"text"}],"type":"emphasis"},{"type":"text","text":" properties, for example like"},{"text":" ","type":"text"},{"text":"this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension ParentFeature.State {","  var computedChild: ChildFeature.State {","    ChildFeature.State(","      \/\/ Heavy computation here...","    )","  }","}","","ChildView(","  store: store.scope(state: \\.computedChild, action: \\.child)",")"]},{"type":"paragraph","inlineContent":[{"text":"This style of scoping will incur a bit of a performance cost in 1.5 and moving forward. The cost","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is greater the closer your scoping is to the root of your application. Leaf node features will not"},{"type":"text","text":" "},{"text":"incur as much of a cost.","type":"text"}]},{"inlineContent":[{"type":"text","text":"See the dedicated article "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping"},{"type":"text","text":" for more information."}],"type":"paragraph"},{"anchor":"Enum-driven-navigation-APIs","text":"Enum-driven navigation APIs","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Prior to version 1.5 of the library, using enum state with navigation view modifiers, such as","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"sheet"},{"type":"text","text":", "},{"type":"codeVoice","code":"popover"},{"type":"text","text":", "},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":", etc, was quite verbose. You first needed to supply a"},{"text":" ","type":"text"},{"type":"text","text":"store scoped to the destination domain, and then further provide transformations for isolating the"},{"type":"text","text":" "},{"type":"text","text":"case of the state enum to drive the navigation, as well as a transformation for embedding child"},{"text":" ","type":"text"},{"type":"text","text":"actions back into the destination domain:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ⚠️ Deprecated API",".sheet(","  store: store.scope(state: \\.$destination, action: { .destination($0) }),","  state: \\.editForm,","  action: { .editForm($0) }",")"]},{"inlineContent":[{"type":"text","text":"The navigation view modifiers that take "},{"type":"codeVoice","code":"store"},{"type":"text","text":", "},{"code":"state","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"action"},{"type":"text","text":" arguments are now deprecated,"},{"text":" ","type":"text"},{"text":"and instead you can do it all with a single ","type":"text"},{"type":"codeVoice","code":"store"},{"type":"text","text":" argument:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ New API",".sheet(","  store: store.scope(","    state: \\.$destination.editForm, ","    action: \\.destination.editForm","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All navigation APIs that take 3 arguments for the "},{"code":"store","type":"codeVoice"},{"text":", ","type":"text"},{"code":"state","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"action"},{"type":"text","text":" have been"},{"type":"text","text":" "},{"inlineContent":[{"type":"text","text":"soft-deprecated"}],"type":"strong"},{"type":"text","text":" and instead you should make use of the version of the APIs that take a single"},{"type":"text","text":" "},{"type":"codeVoice","code":"store"},{"text":" argument. This includes:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"alert(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"confirmationDialog(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fullScreenCover(store:state:action:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"navigationDestination(store:state:action)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"popover(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"sheet(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"type":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"text":".","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","type":"reference","isActive":true}]}]}]}]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true,"type":"reference"},{"type":"text","text":" method when you need to"},{"text":" ","type":"text"},{"type":"text","text":"assert on the payload inside an action received."}],"kind":"article","type":"topic","title":"Migrating to 1.6","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference","isActive":true},{"text":" method for mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"type":"topic","title":"Migrating to 1.11","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"type":"topic","role":"article","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","kind":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"type":"text","text":" method for overriding dependencies."}],"type":"topic","title":"Migrating to 1.9","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"url":"\/documentation\/composablearchitecture","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","kind":"symbol","role":"collection","title":"ComposableArchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"type":"text","text":", and more."}],"kind":"article","type":"topic","title":"Migrating to 1.7","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}],"kind":"article","type":"topic","title":"Migrating to 1.15","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"TestStore","kind":"identifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:)":{"fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"text":"IfContent","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","kind":"typeIdentifier","text":"PresentationState"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"state"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"kind":"text","text":") -> "},{"text":"State","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"DestinationAction","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"then","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"IfContent","kind":"typeIdentifier"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:)","deprecated":true,"role":"symbol","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Initializes an "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"type":"text","text":" view that computes content depending on if a store of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"code":"nil","type":"codeVoice"},{"text":" and state can further","type":"text"},{"type":"text","text":" "},{"text":"be extracted from the destination state, ","type":"text"},{"inlineContent":[{"text":"e.g.","type":"text"}],"type":"emphasis"},{"type":"text","text":" it matches a particular case of an enum."}],"title":"init(_:state:action:then:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","title":"Identified actions","kind":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","kind":"symbol","type":"topic","title":"scope(state:action:)","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":") -> "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"deprecated":true,"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"navigatorTitle":[{"kind":"identifier","text":"Store"}],"fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Store"}],"url":"\/documentation\/composablearchitecture\/store","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","role":"symbol","title":"Store"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","abstract":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","type":"topic","title":"Migrating to 1.14","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","title":"PresentationAction","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"url":"\/documentation\/composablearchitecture\/presentationaction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#Store-scoping":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping","url":"\/documentation\/composablearchitecture\/performance#Store-scoping","abstract":[],"kind":"section","title":"Store scoping","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","kind":"article","type":"topic","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"type":"topic","role":"symbol","title":"send(_:assert:fileID:file:line:column:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV"}],"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}],"deprecated":true,"title":"ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ForEachStore"}]},"#Enum-driven-navigation-APIs":{"identifier":"#Enum-driven-navigation-APIs","titleInlineContent":[{"type":"text","text":"Enum-driven navigation APIs"}],"url":"#Enum-driven-navigation-APIs","title":"Enum-driven navigation APIs","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","role":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"FileStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/filestoragekey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","kind":"symbol"},"#Scoping-performance":{"identifier":"#Scoping-performance","titleInlineContent":[{"type":"text","text":"Scoping performance"}],"url":"#Scoping-performance","title":"Scoping performance","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"type":"topic","role":"symbol","title":"withLock(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"withLock"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:else:)":{"abstract":[{"text":"Initializes an ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":" view that computes content depending on if a store of"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and state can further"},{"type":"text","text":" "},{"type":"text","text":"be extracted from the destination state, "},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":" it matches a particular case of an enum."}],"kind":"symbol","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"IfContent"},{"text":", ","kind":"text"},{"text":"ElseContent","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"state"},{"text":": (","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"State"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"then"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"IfContent"},{"text":", ","kind":"text"},{"text":"else","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"ElseContent"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:else:)","deprecated":true,"title":"init(_:state:action:then:else:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"title":"AppStorageKey","role":"symbol","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"AppStorageKey","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/appstoragekey","navigatorTitle":[{"text":"AppStorageKey","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"title":"PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","abstract":[{"type":"text","text":"A property wrapper for state that can be presented."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"type":"topic","role":"article","title":"Migrating to 1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","abstract":[{"type":"text","text":"Update your code to make use of the new capabilities of the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"fulfillment of requirements for destination reducers and path reducers."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"type":"topic","title":"WithViewStore","deprecated":true,"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" into a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference","isActive":true},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"receive"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"_CaseKeyPath","preciseIdentifier":"s:22ComposableArchitecture12_CaseKeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"timeout","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Duration","preciseIdentifier":"s:s8DurationV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") "},{"text":"async","kind":"keyword"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}],"kind":"symbol","type":"topic","title":"receive(_:_:timeout:assert:fileID:file:line:column:)","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","titleInlineContent":[{"type":"text","text":"discussion"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","title":"discussion","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}],"kind":"article","type":"topic","title":"Migrating to 1.13","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.13"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"url":"\/documentation\/composablearchitecture\/identifiedaction","kind":"symbol","navigatorTitle":[{"text":"IdentifiedAction","kind":"identifier"}],"role":"symbol","title":"IdentifiedAction","abstract":[{"text":"A wrapper type for actions that can be presented in a list.","type":"text"}],"type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"type":"topic","role":"article","title":"Migrating to 1.10","url":"\/documentation\/composablearchitecture\/migratingto1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference"},{"type":"text","text":" "},{"text":"property wrapper, and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","type":"reference","isActive":true},{"text":" persistence strategies.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","role":"article","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"title":"Migrating to 1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","title":"IfLetStore","deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"IfLetStore","kind":"identifier"}],"type":"topic","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","title":"dependency(_:)","type":"topic","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}]},"#Store-scoping-with-key-paths":{"identifier":"#Store-scoping-with-key-paths","titleInlineContent":[{"type":"text","text":"Store scoping with key paths"}],"url":"#Store-scoping-with-key-paths","title":"Store scoping with key paths","type":"link"}}}