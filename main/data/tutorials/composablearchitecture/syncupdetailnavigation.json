{"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","paths":[["doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail"]],"modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-"},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing"}]}]},{"projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","kind":"task"}]}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer"},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer"}]}]},"sections":[{"estimatedTimeInMinutes":20,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will wrap the application built so far in a "},{"type":"codeVoice","code":"NavigationStack"},{"text":" so that we can navigate to","type":"text"},{"type":"text","text":" "},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}]}],"title":"Navigating to a sync-up detail","chapter":"Navigating to sync-up detail","kind":"hero"},{"kind":"tasks","tasks":[{"anchor":"Creating-the-app-feature","title":"Creating the app feature","stepsSection":[{"runtimePreview":null,"type":"step","code":"SyncUpDetailNavigation-01-code-0001.swift","caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may already have an App.swift in your project that holds the entry point of"},{"type":"text","text":" "},{"type":"text","text":"the application (i.e. "},{"type":"codeVoice","code":"@main"},{"type":"text","text":"). If so, you can name this file AppFeature.swift, or you can"},{"text":" ","type":"text"},{"text":"rename the entry point to Main.swift.","type":"text"}]},{"inlineContent":[{"text":"We often leave out suffixing reducers with names like “feature” or “reducer”, but in this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case we must avoid conflicting with SwiftUI’s"},{"type":"text","text":" "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/app","type":"reference"},{"type":"text","text":" protocol, so we’ll use"},{"type":"text","text":" "},{"code":"AppFeature","type":"codeVoice"},{"text":", instead.","type":"text"}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"}],"content":[{"inlineContent":[{"type":"text","text":"Create a new file called App.swift and paste in the basic scaffolding of a new"},{"text":" ","type":"text"},{"text":"Composable Architecture feature.","type":"text"}],"type":"paragraph"}],"media":null},{"inlineContent":[{"type":"text","text":"This feature’s primary responsibility will be to integrate all the features that can be"},{"type":"text","text":" "},{"text":"presented in the navigation stack. Currently that is only the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"type":"text","text":" feature, which"},{"text":" ","type":"text"},{"type":"text","text":"is always at the root of the stack, and the "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature. Soon there will be more","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"features that can be presented in the stack, such as the record meeting feature and the past"},{"type":"text","text":" "},{"type":"text","text":"meeting feature."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The sync-ups list feature is a little different from all of those other features, though.","type":"text"},{"text":" ","type":"text"},{"text":"It is at the root of the stack, and it can not be dismissed. For that reason it is composed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"into the "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" by simply holding onto its state and actions, and using the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","isActive":true},{"text":" reducer to compose it into ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"text":"’s ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":"."}]},{"code":"SyncUpDetailNavigation-01-code-0002.swift","caption":[],"type":"step","media":null,"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Integrate the ","type":"text"},{"type":"codeVoice","code":"SyncUpsList"},{"text":" reducer into the ","type":"text"},{"type":"codeVoice","code":"AppFeature"},{"text":" by holding onto its state and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actions, and using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","type":"reference","isActive":true},{"type":"text","text":" reducer to compose the two"},{"text":" ","type":"text"},{"text":"reducers together.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we want to integrate the "},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" reducer into the "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":". The library comes"},{"text":" ","type":"text"},{"text":"with specific tools to do this for navigation stacks. It starts by using","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","isActive":true},{"text":", which is a collection type provided by the library","type":"text"},{"text":" ","type":"text"},{"text":"specifically tuned for dealing with navigation stacks.","type":"text"}]},{"caption":[],"runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"Integrate the state of ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" in "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" by holding onto"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"text":". We like to call this variable ","type":"text"},{"type":"codeVoice","code":"path"},{"text":" since it mimics","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"NavigationStack(path:)"},{"type":"text","text":" API in SwiftUI."}],"type":"paragraph"}],"type":"step","code":"SyncUpDetailNavigation-01-code-0003.swift"},{"inlineContent":[{"text":"However, this is not quite right. We don’t want to ","type":"text"},{"inlineContent":[{"text":"only","type":"text"}],"type":"emphasis"},{"text":" show the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" in the"},{"text":" ","type":"text"},{"text":"navigation stack. Soon we will have a ","type":"text"},{"type":"codeVoice","code":"RecordMeeting"},{"text":" feature, and a ","type":"text"},{"type":"codeVoice","code":"Meeting"},{"text":" feature,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and in the future there may be more."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For this reason it is best to do some upfront work to model a feature that can handle any"},{"text":" ","type":"text"},{"type":"text","text":"number of features on the stack. This works much like the "},{"type":"codeVoice","code":"Destination"},{"text":" reducer we created","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer inside "},{"code":"AppFeature","type":"codeVoice"},{"text":". Like the ","type":"text"},{"type":"codeVoice","code":"Destination"},{"type":"text","text":" reducer we defined for the"},{"type":"text","text":" "},{"type":"text","text":"sync-up detail screen, "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" type will be an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enum"}]},{"type":"text","text":" so that it can compose all of the"},{"type":"text","text":" "},{"text":"screens you can navigate to into a single reducer.","type":"text"}]}],"type":"step","media":null,"runtimePreview":null,"code":"SyncUpDetailNavigation-01-code-0004.swift"},{"caption":[],"code":"SyncUpDetailNavigation-01-code-0005.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"Add a case to the path for the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature. In the future more cases will be"},{"type":"text","text":" "},{"type":"text","text":"added to this enum for each kind of feature that can be pushed onto the stack."}],"type":"paragraph"}],"type":"step","media":null},{"inlineContent":[{"type":"text","text":"That’s all it takes to create a single reducer that encapsulates all of the logic and behavior"},{"type":"text","text":" "},{"text":"of each screen in the navigation stack. In the future as we add more screens to the stack","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we will just add more cases to this reducer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Next we will integrate the "},{"code":"Path","type":"codeVoice"},{"text":" reducer into the ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"text":" reducer.","type":"text"}],"type":"paragraph"},{"media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Update the ","type":"text"},{"type":"codeVoice","code":"path"},{"text":" variable to hold onto ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":" of"},{"type":"text","text":" "},{"type":"codeVoice","code":"Path.State"},{"type":"text","text":"."}]}],"caption":[{"name":"Important","style":"important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"In order to maintain "},{"type":"codeVoice","code":"State"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Equatable"},{"text":", we must conform ","type":"text"},{"code":"Path.State","type":"codeVoice"},{"type":"text","text":" to be"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" as well.","type":"text"}],"type":"paragraph"}]}],"code":"SyncUpDetailNavigation-01-code-0006.swift","runtimePreview":null},{"media":null,"caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Right now we don’t need to perform any logic in the "},{"code":".path","type":"codeVoice"},{"type":"text","text":" action so we can return"},{"type":"text","text":" "},{"code":".none","type":"codeVoice"},{"type":"text","text":" in it."}]}],"type":"aside","style":"note"}],"code":"SyncUpDetailNavigation-01-code-0007.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":"’s actions into "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" by adding a case to its "},{"type":"codeVoice","code":"Action"},{"text":" enum, and using","type":"text"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","type":"reference","isActive":true},{"type":"text","text":". We can use the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","isActive":true},{"type":"text","text":" type alias to specify a single generic of the path"},{"text":" ","type":"text"},{"type":"text","text":"reducer."}]}],"runtimePreview":null},{"inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":" is a type that represents the most","type":"text"},{"text":" ","type":"text"},{"text":"fundamental things that can happen in a stack: an element in the stack can send an action","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","type":"reference","isActive":true},{"type":"text","text":"), or it can push an element"},{"text":" ","type":"text"},{"type":"text","text":"onto the stack ("},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","type":"reference"},{"type":"text","text":"), or it can"},{"text":" ","type":"text"},{"text":"pop an element from the stack (","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","isActive":true},{"text":").","type":"text"}],"type":"paragraph"},{"media":null,"code":"SyncUpDetailNavigation-01-code-0008.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" reducer into the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" reducer by using the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","isActive":true},{"type":"text","text":" operator."}]}],"type":"step","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","type":"reference"},{"text":"","type":"text"},{"type":"text","text":" "},{"type":"text","text":"operator takes care of processing an incoming "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","isActive":true},{"text":", routing","type":"text"},{"type":"text","text":" "},{"text":"it to the current reducer in the stack, and automatically cancelling effects when a feature","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is popped from the stack."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to create the "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" reducer and integrate the "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" into the"},{"type":"text","text":" "},{"type":"text","text":"stack. Next We will create the view layer."}]}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s create a new feature to hold the "},{"type":"codeVoice","code":"NavigationStack"},{"text":".","type":"text"}]}]}]},{"stepsSection":[{"caption":[],"type":"step","content":[{"inlineContent":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"AppView"},{"text":" struct to conform to the ","type":"text"},{"type":"codeVoice","code":"View"},{"type":"text","text":" protocol in SwiftUI."}],"type":"paragraph"}],"code":"SyncUpDetailNavigation-02-code-0001.swift","media":null,"runtimePreview":null},{"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"code":"store","type":"codeVoice"},{"text":" property to the view. We are going to be proactive and make the property","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" because we will need to derive a binding to it for the ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"."}]}],"type":"step","code":"SyncUpDetailNavigation-02-code-0002.swift","media":null},{"code":"SyncUpDetailNavigation-02-code-0003.swift","caption":[],"content":[{"inlineContent":[{"type":"text","text":"Implement the "},{"type":"codeVoice","code":"body"},{"text":" of the view by constructing a ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":", but we will be using"},{"text":" ","type":"text"},{"text":"special initializer that comes with the library:","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","type":"reference","isActive":true},{"type":"text","text":". This initializer takes"},{"text":" ","type":"text"},{"text":"a binding to a store focused on the stack domain, as well as two trailing closures. The","type":"text"},{"type":"text","text":" "},{"text":"first for the root view that is always present, and the second for the destinations that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be  pushed onto the stack."}],"type":"paragraph"}],"media":null,"type":"step","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"For the root view we can construct the ","type":"text"},{"type":"codeVoice","code":"SyncUpsListView"},{"type":"text","text":" by using"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"type":"text","text":" on the "},{"type":"codeVoice","code":"store"},{"type":"text","text":" to isolate"},{"type":"text","text":" "},{"type":"text","text":"the "},{"code":"SyncUpsList","type":"codeVoice"},{"text":" domain.","type":"text"}]}],"runtimePreview":null,"caption":[],"type":"step","media":null,"code":"SyncUpDetailNavigation-02-code-0004.swift"},{"runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers"},{"type":"text","text":" for more information on this tool."}]}],"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" trailing closure is handed a "},{"type":"codeVoice","code":"store"},{"type":"text","text":" focused on the path’s state, which"},{"text":" ","type":"text"},{"text":"is an enum. Because we are using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" macro on a "},{"type":"codeVoice","code":"Path"},{"type":"text","text":" enum we get access"},{"type":"text","text":" "},{"type":"text","text":"to a special super power of enum reducers. We can switch on "},{"code":"store.case","type":"codeVoice"},{"type":"text","text":" to destructure"},{"type":"text","text":" "},{"text":"a child store for each case of the enum.","type":"text"}]}],"type":"step","media":null,"code":"SyncUpDetailNavigation-02-code-0005.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For each case in the enum we will destructure the store and construct the corresponding"},{"type":"text","text":" "},{"text":"destination view by handing the store to the view.","type":"text"}]}],"runtimePreview":null,"media":null,"type":"step","caption":[],"code":"SyncUpDetailNavigation-02-code-0006.swift"},{"type":"step","caption":[],"code":"SyncUpDetailNavigation-02-code-0007.swift","runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview to the bottom of the file."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That’s all it takes to build the root "},{"code":"AppView","type":"codeVoice"},{"type":"text","text":" that holds onto a "},{"type":"codeVoice","code":"NavigationStack"},{"text":". But","type":"text"},{"text":" ","type":"text"},{"text":"currently we do not have any buttons to actually navigate to the detail screen from the list","type":"text"},{"type":"text","text":" "},{"type":"text","text":"screen."}]}],"anchor":"Creating-the-app-view","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s create the view that holds onto the ","type":"text"},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":"."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Creating the app view"},{"anchor":"Navigating-to-the-detail","stepsSection":[{"runtimePreview":null,"type":"step","caption":[],"media":null,"code":"SyncUpDetailNavigation-03-code-0001.swift","content":[{"inlineContent":[{"type":"text","text":"Go to the SyncUpsList.swift file where the "},{"code":"SyncUpListView","type":"codeVoice"},{"text":" is defined. In that view we","type":"text"},{"type":"text","text":" "},{"type":"text","text":"currently have a "},{"type":"codeVoice","code":"Button"},{"type":"text","text":" in the list. Let’s now replace it with a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", but"},{"text":" ","type":"text"},{"text":"using the special initializer that comes with this library:","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"This special initializer takes a piece of state that matches the type that is held in the"},{"text":" ","type":"text"},{"text":"root feature’s ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState"},{"type":"text","text":". In our case, that is "},{"type":"codeVoice","code":"AppFeature.Path.State"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which is an enum of all the possible destinations that can be navigated to."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"code":"Path.State.detail","type":"codeVoice"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":" to indicate that we want to"},{"type":"text","text":" "},{"type":"text","text":"navigate to the detail feature."}],"type":"paragraph"}],"code":"SyncUpDetailNavigation-03-code-0002.swift","runtimePreview":null,"media":null,"caption":[],"type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, to construct "},{"code":"SyncUpDetail.State","type":"codeVoice"},{"text":" we need to provide a ","type":"text"},{"code":"Shared<SyncUp>","type":"codeVoice"},{"text":" value.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This needs to be derived from the shared sync-ups held in "},{"type":"codeVoice","code":"SyncUpsList.State"},{"text":" so that the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"detail feature can be allowed to make edits to the state have those edits be automatically"},{"type":"text","text":" "},{"text":"made to ","type":"text"},{"code":"SyncUpsList.State","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"One can use the projected value of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true,"overridingTitle":"@Shared","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}]},{"type":"text","text":" along with the"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","isActive":true,"type":"reference"},{"type":"text","text":" property defined on shared collections in order to"},{"text":" ","type":"text"},{"type":"text","text":"derive a "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" value for each element in the collection."}]},{"code":"SyncUpDetailNavigation-03-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","isActive":true,"type":"reference"},{"text":" property in the ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"text":" to derive a","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Shared<SyncUp>"},{"text":" for each element in the ","type":"text"},{"code":"Shared<IdentifiedArrayOf<SyncUp>>","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"type":"step","media":null},{"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Pass the projected value ","type":"text"},{"type":"codeVoice","code":"$syncUp"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":"."}]}],"caption":[],"type":"step","code":"SyncUpDetailNavigation-03-code-0004.swift"},{"inlineContent":[{"text":"That is all it takes to perform a navigation from the list feature to the detail feature.","type":"text"},{"type":"text","text":" "},{"text":"When the navigation link is tapped, SwiftUI will search up the view hierarchy to find the","type":"text"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"text":" powering the view, find its ","type":"text"},{"code":"path","type":"codeVoice"},{"type":"text","text":" binding, and append the new "},{"type":"codeVoice","code":".detail"},{"text":" ","type":"text"},{"type":"text","text":"state to the path, thus triggering a drill-down animation."}],"type":"paragraph"},{"inlineContent":[{"text":"This is the easiest way to navigate to one screen to another, but it does have some drawbacks.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Because we need to reference all of "},{"code":"AppFeature.State.Path","type":"codeVoice"},{"text":" to construct a navigation link, it can","type":"text"},{"type":"text","text":" "},{"text":"make modularization difficult. Every navigation link will need access to every feature’s","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An alternative is to use a plain "},{"code":"Button","type":"codeVoice"},{"type":"text","text":" instead of "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", and send an action"},{"type":"text","text":" "},{"text":"from that button. Then the parent ","type":"text"},{"code":"App","type":"codeVoice"},{"text":" feature can intercept that action and manually append","type":"text"},{"text":" ","type":"text"},{"text":"state to its ","type":"text"},{"code":"path","type":"codeVoice"},{"text":". This fully decouples the features from one another, and only the ","type":"text"},{"code":"App","type":"codeVoice"},{"text":" ","type":"text"},{"text":"feature needs to have knowledge about all of the child features.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"We will not do that refactor now, but it would be instructive for the reader to try it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"themselves."}]},{"inlineContent":[{"type":"text","text":"Before moving on let’s make sure that the deletion and editing logic that we implemented in"},{"text":" ","type":"text"},{"text":"the detail screens properly works now that we can navigate to the detail screen from the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"sync-ups list screen."}],"type":"paragraph"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Navigate to the detail screen of a sync-up and delete it to confirm that it works as","type":"text"},{"type":"text","text":" "},{"text":"expected.","type":"text"}]}],"type":"step","media":"SyncUpDetailNavigation-03-video-0005.mov","code":null,"runtimePreview":null},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Navigate to the detail screen of a sync-up, edit it, and then navigate back to the list"},{"text":" ","type":"text"},{"type":"text","text":"screen to verify that changes were made. Also relaunch the app to confirm that the data"},{"type":"text","text":" "},{"type":"text","text":"was persisted to disk."}]}],"caption":[],"code":null,"runtimePreview":null,"media":"SyncUpDetailNavigation-03-video-0006.mov"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"To navigate to the detail screen from the list screen we need to append some","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail.State"},{"type":"text","text":" to the "},{"code":"path","type":"codeVoice"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"App"},{"text":" feature. The easiest way to do this is with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"codeVoice","code":"NavigationLink"},{"type":"text","text":", which will automatically append some state to the path when tapped."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Navigating to the detail"}]},{"abstract":[{"text":"Now that we have a navigation stack in place we can start navigating to other features in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"type":"text","text":" "},{"text":"previous recorded meeting.","type":"text"}],"featuredEyebrow":"Tutorial","action":{"isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation"},"kind":"callToAction","title":"Navigating to a meeting"}],"kind":"project","identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","interfaceLanguage":"swift"},"variants":[{"paths":["\/tutorials\/composablearchitecture\/syncupdetailnavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"category":"Building SyncUps","title":"Navigating to a sync-up detail","categoryPathComponent":"BuildingSyncUps","role":"project"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackActionOf":{"url":"\/documentation\/composablearchitecture\/stackactionof","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackActionOf","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"StackActionOf","kind":"identifier"}],"navigatorTitle":[{"text":"StackActionOf","kind":"identifier"}],"title":"StackActionOf","abstract":[{"type":"text","text":"A convenience type alias for referring to a stack action of a given reducer’s domain."}],"type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Presenting-the-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Presenting-the-sync-up-form","type":"topic","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/presenting-the-sync-up-form","title":"Presenting the sync-up form"},"SyncUpDetailNavigation-01-code-0004.swift":{"identifier":"SyncUpDetailNavigation-01-code-0004.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @Reducer","  enum Path {","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"highlights":[{"line":6},{"line":7},{"line":8}]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"type":"text","text":" "},{"type":"text","text":"domain modeling, controlling dependencies, and testability."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","kind":"overview","url":"\/tutorials\/buildingsyncups","title":"Building SyncUps","type":"topic","role":"overview"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#A-basic-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#A-basic-timer","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/implementingtimer#A-basic-timer","title":"A basic timer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/element(id:action:)":{"abstract":[{"type":"text","text":"An action sent to the associated stack element at a given identifier."}],"role":"symbol","title":"StackAction.element(id:action:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"element","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/element(id:action:)","type":"topic","url":"\/documentation\/composablearchitecture\/stackaction\/element(id:action:)","kind":"symbol"},"SyncUpDetailNavigation-01-code-0008.swift":{"identifier":"SyncUpDetailNavigation-01-code-0008.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":31}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case path(StackActionOf<Path>)","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .path:","        return .none","      case .syncUpsList:","        return .none","      }","    }","    .forEach(\\.path, action: \\.path)","  }","}","extension AppFeature.Path.State: Equatable {}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/whatissyncups","title":"What is SyncUps?"},"https://developer.apple.com/documentation/swiftui/app":{"type":"link","titleInlineContent":[{"type":"text","text":"App"}],"url":"https:\/\/developer.apple.com\/documentation\/swiftui\/app","title":"App","identifier":"https:\/\/developer.apple.com\/documentation\/swiftui\/app"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","type":"topic","url":"\/documentation\/composablearchitecture\/reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","role":"symbol"},"SyncUpDetailNavigation-03-video-0006.mov":{"type":"video","alt":null,"identifier":"SyncUpDetailNavigation-03-video-0006.mov","poster":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/SyncUpDetailNavigation-03-video-0006.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm":{"abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm","url":"\/tutorials\/composablearchitecture\/testingsyncupform","kind":"project","title":"Testing the sync-up form","estimatedTime":"10min","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm":{"abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"title":"Sync-up form","estimatedTime":"15min","url":"\/tutorials\/composablearchitecture\/syncupform","type":"topic","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation":{"abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"text":"fragile.","type":"text"}],"type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation","kind":"project","title":"Testing the add sync-up flow","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation","role":"project","estimatedTime":"10min"},"SyncUpDetailNavigation-03-code-0001.swift":{"identifier":"SyncUpDetailNavigation-03-code-0001.swift","syntax":"swift","type":"file","fileName":"SyncUpsList.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        NavigationLink(","          state: ","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"highlights":[{"line":15},{"line":16},{"line":17}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#Domain-models":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#Domain-models","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#Domain-models","title":"Domain models"},"SyncUpDetailNavigation-03-code-0002.swift":{"identifier":"SyncUpDetailNavigation-03-code-0002.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"SyncUpsList.swift","highlights":[{"line":16}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.syncUps) { syncUp in","        NavigationLink(","          state: AppFeature.Path.State.detail(SyncUpDetail.State(syncUp: <#Shared<SyncUp>#>))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Testing-the-timer":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Testing-the-timer","url":"\/tutorials\/composablearchitecture\/implementingtimer#Testing-the-timer","kind":"section","title":"Testing the timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp":{"abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"text":" ","type":"text"},{"type":"text","text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns."}],"type":"topic","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup","kind":"project","title":"Editing and deleting a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp","role":"project","estimatedTime":"30min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationStack/init(path:root:destination:fileID:filePath:line:column:)":{"abstract":[{"text":"Drives a navigation stack with a store.","type":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Root"},{"text":" conforms to ","type":"text"},{"code":"View","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationStack\/init(path:root:destination:fileID:filePath:line:column:)","kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/navigationstack\/init(path:root:destination:fileid:filepath:line:column:)","title":"init(path:root:destination:fileID:filePath:line:column:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Action"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7SwiftUI7BindingV","text":"Binding","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","text":"StackState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":">, "},{"preciseIdentifier":"s:22ComposableArchitecture11StackActionO","kind":"typeIdentifier","text":"StackAction"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">>>, "},{"text":"root","kind":"externalParam"},{"kind":"text","text":": () -> "},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": (","kind":"text"},{"text":"Store","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Destination"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"type":"topic"},"SyncUpDetailNavigation-03-code-0004.swift":{"identifier":"SyncUpDetailNavigation-03-code-0004.swift","syntax":"swift","type":"file","fileName":"SyncUpsList.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.$syncUps.elements) { $syncUp in","        NavigationLink(","          state: AppFeature.Path.State.detail(SyncUpDetail.State(syncUp: $syncUp))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"],"highlights":[{"line":16}]},"SyncUpDetailNavigation-01-code-0003.swift":{"identifier":"SyncUpDetailNavigation-01-code-0003.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":8}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Persisting-data-to-disk":{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","type":"reference"},{"text":".","type":"text"}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Persisting-data-to-disk","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Persisting-data-to-disk","kind":"section","title":"Persisting data to disk","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/popFrom(id:)":{"abstract":[{"type":"text","text":"An action sent to dismiss the associated stack element at a given identifier."}],"title":"StackAction.popFrom(id:)","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"popFrom","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/stackaction\/popfrom(id:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/popFrom(id:)","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-feature":{"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-feature","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"role":"pseudoSymbol","title":"Creating the app feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-feature","kind":"section","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#A-tour-of-SyncUps":{"abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"type":"text","text":"recreation of Apple’s Scrumdinger demo application."}],"type":"section","url":"\/tutorials\/composablearchitecture\/whatissyncups#A-tour-of-SyncUps","kind":"section","title":"A tour of SyncUps","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#A-tour-of-SyncUps","role":"pseudoSymbol"},"SyncUpDetailNavigation-01-code-0001.swift":{"fileName":"App.swift","type":"file","fileType":"swift","identifier":"SyncUpDetailNavigation-01-code-0001.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @ObservableState","  struct State: Equatable {","  }","  enum Action {","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      }","    }","  }","}"],"highlights":[]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/What-is-SyncUps-":{"url":"\/tutorials\/buildingsyncups\/what-is-syncups-","abstract":[],"role":"article","title":"What is SyncUps?","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/What-is-SyncUps-","type":"topic"},"SyncUpDetailNavigation-03-video-0005.mov":{"type":"video","alt":null,"identifier":"SyncUpDetailNavigation-03-video-0005.mov","poster":null,"variants":[{"url":"\/videos\/ComposableArchitecture\/SyncUpDetailNavigation-03-video-0005.mov","traits":["1x","light"]}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Navigating-to-the-detail":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Navigating-to-the-detail","kind":"section","title":"Navigating to the detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Navigating-to-the-detail","role":"pseudoSymbol"},"SyncUpDetailNavigation-02-code-0004.swift":{"identifier":"SyncUpDetailNavigation-02-code-0004.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      ","    }","  }","}"],"highlights":[{"line":16},{"line":17},{"line":18}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Ending-the-meeting-early":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","url":"\/tutorials\/composablearchitecture\/implementingtimer#Ending-the-meeting-early","kind":"section","title":"Ending the meeting early","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Ending-the-meeting-early","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-a-better-approach":{"abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"type":"text","text":"feature to make things a little more interesting."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-a-better-approach","kind":"section","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-a-better-approach","title":"Form focus: a better approach","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps":{"abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"text":" ","type":"text"},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","type":"reference"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps","url":"\/tutorials\/composablearchitecture\/persistingsyncups","kind":"project","title":"Persisting sync-ups","estimatedTime":"5min","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/listsofsyncups","title":"Lists of sync-ups"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/New-sync-up-form":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/New-sync-up-form","type":"topic","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/new-sync-up-form","title":"New sync-up form"},"SyncUpDetailNavigation-02-code-0003.swift":{"identifier":"SyncUpDetailNavigation-02-code-0003.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":11},{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","","    } destination: { store in","      ","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#The-meeting-screen":{"url":"\/tutorials\/composablearchitecture\/meetingnavigation#The-meeting-screen","title":"The meeting screen","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"role":"pseudoSymbol","type":"section","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#The-meeting-screen"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Record-meeting":{"url":"\/tutorials\/buildingsyncups\/record-meeting","abstract":[],"role":"article","title":"Record meeting","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Record-meeting","type":"topic"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Persisting-sync-ups-to-disk":{"abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Persisting-sync-ups-to-disk","kind":"article","url":"\/tutorials\/buildingsyncups\/persisting-sync-ups-to-disk","title":"Persisting sync-ups to disk","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Navigating-to-the-record-meeting-feature":{"abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"type":"text","text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer."}],"type":"section","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Navigating-to-the-record-meeting-feature","kind":"section","title":"Navigating to the record meeting feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Navigating-to-the-record-meeting-feature","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation":{"abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" so that we can navigate to"},{"text":" ","type":"text"},{"type":"text","text":"the detail screen. To do this we will create a new root-level feature that will be responsible"},{"text":" ","type":"text"},{"text":"for implementing the logic of the stack and integrating all of the features together.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation","url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation","kind":"project","title":"Navigating to a sync-up detail","estimatedTime":"20min","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Sync-up-form-basics":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Sync-up-form-basics","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the","type":"text"},{"text":" ","type":"text"},{"text":"feature to make things a little more interesting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/syncupform#Sync-up-form-basics","title":"Sync-up form basics"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Adding-a-new-sync-up-to-the-list","kind":"section","title":"Adding a new sync-up to the list","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Adding-a-new-sync-up-to-the-list","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction/push(id:state:)":{"abstract":[{"type":"text","text":"An action sent to present the given state at a given identifier in a navigation stack. This"},{"text":" ","type":"text"},{"text":"action is typically sent from the view via the ","type":"text"},{"type":"codeVoice","code":"NavigationLink(value:)"},{"type":"text","text":" initializer."}],"title":"StackAction.push(id:state:)","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"text":"push","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture14StackElementIDV","text":"StackElementID"},{"kind":"text","text":", "},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"State","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/composablearchitecture\/stackaction\/push(id:state:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction\/push(id:state:)","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Shared"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","url":"\/documentation\/composablearchitecture\/shared","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps#Writing-your-first-test":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps#Writing-your-first-test","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"text":" ","type":"text"},{"text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice","type":"text"},{"text":" ","type":"text"},{"text":"to test new features as you add them, and in the future we will have much more complicated","type":"text"},{"type":"text","text":" "},{"type":"text","text":"behavior to test."}],"url":"\/tutorials\/composablearchitecture\/testinglistofsyncups#Writing-your-first-test","title":"Writing your first test"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)":{"kind":"symbol","title":"fileStorage(_:decoder:encoder:)","type":"topic","abstract":[{"text":"Creates a persistence key that can read and write to a ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" value in the file system."}],"url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:decoder:encoder:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"fileStorage","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:10Foundation3URLV","text":"URL"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"kind":"text","text":": "},{"text":"JSONDecoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONDecoderC"},{"text":", ","kind":"text"},{"text":"encoder","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"JSONEncoder","kind":"typeIdentifier","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackState":{"title":"StackState","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"StackState","kind":"identifier"}],"abstract":[{"type":"text","text":"A list of data representing the content of a navigation stack."}],"url":"\/documentation\/composablearchitecture\/stackstate","navigatorTitle":[{"kind":"identifier","text":"StackState"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation#Deleting-a-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation#Deleting-a-sync-up","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature, the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"type":"text","text":" "},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/testingnavigation#Deleting-a-sync-up","title":"Deleting a sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Adding-a-sync-up":{"abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"type":"text","text":" and "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":", and"},{"text":" ","type":"text"},{"text":"so its time to write some tests. This will give us the opportunity to prove that the features","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less"},{"type":"text","text":" "},{"text":"fragile.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Adding-a-sync-up","kind":"section","title":"Adding a sync-up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Adding-a-sync-up","role":"pseudoSymbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/elements":{"abstract":[{"type":"text","text":"Allows a "},{"type":"codeVoice","code":"ForEach"},{"text":" view to transform a shared collection into shared elements.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/shared\/elements","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"elements"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"RandomAccessCollection","preciseIdentifier":"s:Sk"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6SharedV","text":"Shared","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":"."},{"text":"Element","preciseIdentifier":"s:ST7ElementQa","kind":"typeIdentifier"},{"kind":"text","text":">>"}],"type":"topic","title":"elements","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"_MutableIdentifiedCollection"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value.Element"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"title":"Scope","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scope"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Scope"}],"url":"\/documentation\/composablearchitecture\/scope"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingListOfSyncUps":{"abstract":[{"type":"text","text":"The SyncUpsList feature we have built so far isn’t very complex. In fact, it only has one"},{"text":" ","type":"text"},{"type":"text","text":"primary action, that of deleting sync-ups from its collection. However, it can be good practice"},{"text":" ","type":"text"},{"type":"text","text":"to test new features as you add them, and in the future we will have much more complicated"},{"text":" ","type":"text"},{"text":"behavior to test.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingListOfSyncUps","kind":"project","url":"\/tutorials\/composablearchitecture\/testinglistofsyncups","title":"Testing the list of sync-ups","estimatedTime":"5min","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail#Testing-the-edit-flow":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail#Testing-the-edit-flow","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"text":" feature has slowly become quite complex. It now handles two forms of","type":"text"},{"text":" ","type":"text"},{"text":"navigation (an alert and sheet), it models navigation state with a single enum, and it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"communicates with a parent feature via delegate actions. It’s about time we got some test"},{"text":" ","type":"text"},{"text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes with confidence."}],"url":"\/tutorials\/composablearchitecture\/testingsyncupdetail#Testing-the-edit-flow","title":"Testing the edit flow"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm":{"abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"text":" ","type":"text"},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"text":" ","type":"text"},{"text":"add that sync-up to the root list.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm","url":"\/tutorials\/composablearchitecture\/presentingsyncupform","kind":"project","title":"Presenting the sync-up form","estimatedTime":"10min","role":"project"},"SyncUpDetailNavigation-01-code-0005.swift":{"identifier":"SyncUpDetailNavigation-01-code-0005.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<SyncUpDetail.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"],"highlights":[{"line":8}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Removing-attendees":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Removing-attendees","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"face-to-face with dependencies for the first time in this tutorial."}],"url":"\/tutorials\/composablearchitecture\/testingsyncupform#Removing-attendees","title":"Removing attendees"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/WhatIsSyncUps#Create-the-SyncUps-project":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/WhatIsSyncUps#Create-the-SyncUps-project","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Let’s start with a tour of the application we will be building. It’s called SyncUps, and it’s a"},{"text":" ","type":"text"},{"text":"recreation of Apple’s Scrumdinger demo application.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/whatissyncups#Create-the-SyncUps-project","title":"Create the SyncUps project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-domains-together":{"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-domains-together","kind":"section","title":"Integrating the feature domains together","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-domains-together","role":"pseudoSymbol","type":"section","abstract":[{"text":"We now have two features built: the sync-ups list and the sync-up form. These features do not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to"},{"text":" ","type":"text"},{"type":"text","text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}]},"SyncUpDetailNavigation-03-code-0003.swift":{"identifier":"SyncUpDetailNavigation-03-code-0003.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"SyncUpsList.swift","highlights":[{"line":14}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct SyncUpsList {","  \/\/ ...","}","","struct SyncUpsListView: View {","  @Bindable var store: StoreOf<SyncUpsList>","","  var body: some View {","    List {","      ForEach(store.$syncUps.elements) { $syncUp in","        NavigationLink(","          state: AppFeature.Path.State.detail(SyncUpDetail.State(syncUp: <#Shared<SyncUp>#>))","        ) {","          CardView(syncUp: syncUp)","        }","        .listRowBackground(syncUp.theme.mainColor)","      }","    }","    .sheet(item: $store.scope(state: \\.addSyncUp, action: \\.addSyncUp)) { addSyncUpStore in","      NavigationStack {","        SyncUpFormView(store: addSyncUpStore)","          .navigationTitle(\"New sync-up\")","          .toolbar {","            ToolbarItem(placement: .cancellationAction) {","              Button(\"Discard\") {","                store.send(.discardButtonTapped)","              }","            }","            ToolbarItem(placement: .confirmationAction) {","              Button(\"Add\") {","                store.send(.confirmAddButtonTapped)","              }","            }","          }","      }","    }","    .toolbar {","      Button {","        store.send(.addSyncUpButtonTapped)","      } label: {","        Image(systemName: \"plus\")","      }","    }","    .navigationTitle(\"Daily Sync-ups\")","  }","}","","struct CardView: View {","  let syncUp: SyncUp","","  var body: some View {","    VStack(alignment: .leading) {","      Text(syncUp.title)","        .font(.headline)","      Spacer()","      HStack {","        Label(\"\\(syncUp.attendees.count)\", systemImage: \"person.3\")","        Spacer()","        Label(syncUp.duration.formatted(.units()), systemImage: \"clock\")","          .labelStyle(.trailingIcon)","      }","      .font(.caption)","    }","    .padding()","    .foregroundColor(syncUp.theme.accentColor)","  }","}","","struct TrailingIconLabelStyle: LabelStyle {","  func makeBody(configuration: Configuration) -> some View {","    HStack {","      configuration.title","      configuration.icon","    }","  }","}","","extension LabelStyle where Self == TrailingIconLabelStyle {","  static var trailingIcon: Self { Self() }","}","","#Preview {","  NavigationStack {","    SyncUpsListView(","      store: Store(","        initialState: SyncUpsList.State(","          syncUps: [.mock]","        )","      ) {","        SyncUpsList()","      }","    )","  }","}"]},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Sync-up-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Sync-up-detail","type":"topic","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/sync-up-detail","title":"Sync-up detail"},"SyncUpDetailNavigation-01-code-0007.swift":{"identifier":"SyncUpDetailNavigation-01-code-0007.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case path(StackActionOf<Path>)","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .path:","        return .none","      case .syncUpsList:","        return .none","      }","    }","  }","}","extension AppFeature.Path.State: Equatable {}"],"highlights":[{"line":16},{"line":25},{"line":26}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb":{"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:destination:fileid:filepath:line:column:)-9svqb","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"forEach"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Destination"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"text":"destination","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"Destination","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":") -> "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}],"title":"forEach(_:action:destination:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on elements of a navigation stack in"},{"text":" ","type":"text"},{"text":"parent state.","type":"text"}],"type":"topic"},"SyncUpDetailNavigation-02-code-0001.swift":{"identifier":"SyncUpDetailNavigation-02-code-0001.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":8},{"line":9},{"line":10}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","title":"Deleting the sync-up"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and","type":"text"},{"text":" ","type":"text"},{"text":"we need to implement nuanced logic to figure out when to proceed to the next speaker.","type":"text"}],"estimatedTime":"25min","url":"\/tutorials\/composablearchitecture\/implementingtimer","title":"Adding a meeting timer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail#Create-the-sync-up-detail":{"abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"text":" ","type":"text"},{"type":"text","text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync"},{"text":" ","type":"text"},{"type":"text","text":"up, or drill-down to a past meeting, or even delete the meeting."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail#Create-the-sync-up-detail","kind":"section","url":"\/tutorials\/composablearchitecture\/syncupdetail#Create-the-sync-up-detail","title":"Create the sync-up detail","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpDetail":{"abstract":[{"type":"text","text":"The "},{"code":"SyncUpDetail","type":"codeVoice"},{"type":"text","text":" feature has slowly become quite complex. It now handles two forms of"},{"text":" ","type":"text"},{"type":"text","text":"navigation (an alert and sheet), it models navigation state with a single enum, and it"},{"text":" ","type":"text"},{"text":"communicates with a parent feature via delegate actions. It’s about time we got some test","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"coverage on this feature so we can be sure it works as we expect, and so that we can make future"},{"type":"text","text":" "},{"text":"changes with confidence.","type":"text"}],"type":"topic","url":"\/tutorials\/composablearchitecture\/testingsyncupdetail","kind":"project","title":"Testing the sync-up detail","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpDetail","role":"project","estimatedTime":"10min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Destination-and-path-reducers":{"type":"topic","title":"Destination and path reducers","kind":"section","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Destination-and-path-reducers","url":"\/documentation\/composablearchitecture\/reducer#Destination-and-path-reducers"},"SyncUpDetailNavigation-02-code-0005.swift":{"identifier":"SyncUpDetailNavigation-02-code-0005.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      switch store.case {","      case let .detail(detailStore):","        ","      }","    }","  }","}"],"highlights":[{"line":20},{"line":21},{"line":22},{"line":23}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":"s should be executed later by the store, if any.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/reducer","type":"topic","navigatorTitle":[{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"url":"\/documentation\/composablearchitecture\/stackaction","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","title":"StackAction","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation#Navigate-to-a-meeting":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation#Navigate-to-a-meeting","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"text":"application. The simplest is the meeting screen, which allows you to see the details of a","type":"text"},{"text":" ","type":"text"},{"text":"previous recorded meeting.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/meetingnavigation#Navigate-to-a-meeting","title":"Navigate to a meeting"},"SyncUpDetailNavigation-01-code-0002.swift":{"identifier":"SyncUpDetailNavigation-01-code-0002.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":8},{"line":11},{"line":14},{"line":15},{"line":16},{"line":19},{"line":20}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @ObservableState","  struct State: Equatable {","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PresentingSyncUpForm#Integrating-the-feature-views-together":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PresentingSyncUpForm#Integrating-the-feature-views-together","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We now have two features built: the sync-ups list and the sync-up form. These features do not"},{"text":" ","type":"text"},{"text":"exist in isolation, but rather are meant to be integrated in a deep way. One should be able to","type":"text"},{"text":" ","type":"text"},{"text":"navigate to the sync-up form from the list view, enter the details of a new sync-up, and then","type":"text"},{"type":"text","text":" "},{"type":"text","text":"add that sync-up to the root list."}],"url":"\/tutorials\/composablearchitecture\/presentingsyncupform#Integrating-the-feature-views-together","title":"Integrating the feature views together"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetail","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"The “sync-up detail” screen shows all the information of a sync-up, and has many actions that"},{"text":" ","type":"text"},{"text":"can take place in the screen. The user can edit the sync-up, or start a new meeting in the sync","type":"text"},{"text":" ","type":"text"},{"text":"up, or drill-down to a past meeting, or even delete the meeting.","type":"text"}],"estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/syncupdetail","title":"Sync-up detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpForm#Adding-attendees":{"abstract":[{"type":"text","text":"We now have a moderately complex feature for editing the details of a sync-up, the "},{"code":"SyncUpForm","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer. Let’s get some test coverage on the feature, and doing so will force us to come","type":"text"},{"type":"text","text":" "},{"text":"face-to-face with dependencies for the first time in this tutorial.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/testingsyncupform#Adding-attendees","kind":"section","title":"Adding attendees","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpForm#Adding-attendees","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpForm#Form-focus-an-approach":{"abstract":[{"type":"text","text":"We will create a new feature with the Composable Architecture that is capable of editing the"},{"text":" ","type":"text"},{"type":"text","text":"details of a new sync-up. We will also add some nuanced logic around how focus moves through the"},{"text":" ","type":"text"},{"type":"text","text":"feature to make things a little more interesting."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpForm#Form-focus-an-approach","url":"\/tutorials\/composablearchitecture\/syncupform#Form-focus-an-approach","kind":"section","title":"Form focus: an approach","role":"pseudoSymbol"},"SyncUpDetailNavigation-01-code-0006.swift":{"identifier":"SyncUpDetailNavigation-01-code-0006.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  @Reducer","  enum Path {","    case detail(SyncUpDetail)","  }","  @ObservableState","  struct State: Equatable {","    var path = StackState<Path.State>()","    var syncUpsList = SyncUpsList.State()","  }","  enum Action {","    case syncUpsList(SyncUpsList.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.syncUpsList, action: \\.syncUpsList) {","      SyncUpsList()","    }","    Reduce { state, action in","      switch action {","      case .syncUpsList:","        return .none","      }","    }","  }","}","extension AppFeature.Path.State: Equatable {}"],"highlights":[{"line":12},{"line":30}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUI/NavigationLink/init(state:label:fileID:filePath:line:column:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/swiftui\/navigationlink\/init(state:label:fileid:filepath:line:column:)","title":"init(state:label:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUI\/NavigationLink\/init(state:label:fileID:filePath:line:column:)","type":"topic","abstract":[{"type":"text","text":"Creates a navigation link that presents the view corresponding to an element of"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackState","type":"reference","isActive":true},{"text":".","type":"text"}],"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"text":"P","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"L","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"P","kind":"typeIdentifier"},{"kind":"text","text":"?, "},{"text":"label","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"L"},{"kind":"text","text":", "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Label"},{"type":"text","text":" conforms to "},{"code":"View","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Destination","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Never"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"estimatedTime":"5min","url":"\/tutorials\/composablearchitecture\/recordmeetingfeature","title":"The RecordMeeting feature"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","title":"scope(state:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingSyncUpFormPresentation#Non-exhaustive-testing":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingSyncUpFormPresentation#Non-exhaustive-testing","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We have now integrated two moderately complex features, the "},{"code":"SyncUpsList","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"SyncUpForm","type":"codeVoice"},{"text":", and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"so its time to write some tests. This will give us the opportunity to prove that the features"},{"text":" ","type":"text"},{"text":"work in tandem as we expect, and we will explore “non-exhaustive” testing to make our tests less","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"fragile."}],"url":"\/tutorials\/composablearchitecture\/testingsyncupformpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#More-concise-domain-modeling":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#More-concise-domain-modeling","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#More-concise-domain-modeling","title":"More concise domain modeling"},"SyncUpDetailNavigation-02-code-0002.swift":{"fileName":"App.swift","type":"file","fileType":"swift","identifier":"SyncUpDetailNavigation-02-code-0002.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","}"],"highlights":[{"line":10}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/SyncUpDetailNavigation#Creating-the-app-view":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/SyncUpDetailNavigation#Creating-the-app-view","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We will wrap the application built so far in a "},{"code":"NavigationStack","type":"codeVoice"},{"text":" so that we can navigate to","type":"text"},{"text":" ","type":"text"},{"text":"the detail screen. To do this we will create a new root-level feature that will be responsible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"for implementing the logic of the stack and integrating all of the features together."}],"url":"\/tutorials\/composablearchitecture\/syncupdetailnavigation#Creating-the-app-view","title":"Creating the app view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/PersistingSyncUps#Testing-persistence":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/PersistingSyncUps#Testing-persistence","title":"Testing persistence","type":"section","abstract":[{"type":"text","text":"Now that we have the ability to add and remove sync-ups from the application, let’s add some"},{"type":"text","text":" "},{"type":"text","text":"persistence. This will involve using the “shared state” tools from the library, such as"},{"type":"text","text":" "},{"overridingTitle":"@Shared","isActive":true,"overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true,"type":"reference"},{"text":".","type":"text"}],"kind":"section","url":"\/tutorials\/composablearchitecture\/persistingsyncups#Testing-persistence","role":"pseudoSymbol"},"SyncUpDetailNavigation-02-code-0006.swift":{"identifier":"SyncUpDetailNavigation-02-code-0006.swift","syntax":"swift","type":"file","fileName":"App.swift","fileType":"swift","content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      switch store.case {","      case let .detail(detailStore):","        SyncUpDetailView(store: detailStore)","      }","    }","  }","}"],"highlights":[{"line":22}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer","title":"Adding a speech recognizer"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/MeetingNavigation":{"abstract":[{"type":"text","text":"Now that we have a navigation stack in place we can start navigating to other features in the"},{"text":" ","type":"text"},{"type":"text","text":"application. The simplest is the meeting screen, which allows you to see the details of a"},{"text":" ","type":"text"},{"type":"text","text":"previous recorded meeting."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/MeetingNavigation","url":"\/tutorials\/composablearchitecture\/meetingnavigation","kind":"project","title":"Navigating to a meeting","estimatedTime":"5min","role":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Navigating-to-sync-up-detail":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Navigating-to-sync-up-detail","role":"article","kind":"article","abstract":[],"url":"\/tutorials\/buildingsyncups\/navigating-to-sync-up-detail","title":"Navigating to sync-up detail"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingSpeechRecognizer#Asking-for-speech-recognition-permission","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We have just one feature left to implement, and it’s one of the most complicated ones. We need"},{"text":" ","type":"text"},{"text":"to use Apple’s ","type":"text"},{"code":"SFSpeechRecognizer","type":"codeVoice"},{"text":" API to ask the user for permission to transcribe their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"audio, and then start a speech recognition task to live transcribe the meeting while it is"},{"text":" ","type":"text"},{"text":"in progress.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/implementingspeechrecognizer#Asking-for-speech-recognition-permission","title":"Asking for speech recognition permission"},"SyncUpDetailNavigation-02-code-0007.swift":{"identifier":"SyncUpDetailNavigation-02-code-0007.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"App.swift","highlights":[{"line":27},{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37},{"line":38}],"content":["import ComposableArchitecture","import SwiftUI","","@Reducer","struct AppFeature {","  \/\/ ...","}","","struct AppView: View {","  @Bindable var store: StoreOf<AppFeature>","","  var body: some View {","    NavigationStack(","      path: $store.scope(state: \\.path, action: \\.path)","    ) {","      SyncUpsListView(","        store: store.scope(state: \\.syncUpsList, action: \\.syncUpsList)","      )","    } destination: { store in","      switch store.case {","      case let .detail(detailStore):","        SyncUpDetailView(store: detailStore)","      }","    }","  }","}","","#Preview {","  AppView(","    store: Store(","      initialState: AppFeature.State(","        syncUpsList: SyncUpsList.State()","      )","    ) {","      AppFeature()","    }","  )","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Editing-the-sync-up":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Editing-the-sync-up","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"text":"deleting the sync-up. This will force us to face a number of common problems in app development","type":"text"},{"text":" ","type":"text"},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Editing-the-sync-up","title":"Editing the sync-up"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/forEach(_:action:)":{"abstract":[{"type":"text","text":"A special overload of "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:destination:fileID:filePath:line:column:)-9svqb","type":"reference"},{"text":" for enum","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reducers."}],"title":"forEach(_:action:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"forEach","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"StackState","preciseIdentifier":"s:22ComposableArchitecture10StackStateV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture11StackActionO","text":"StackAction"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>) -> "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Action","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">\n"}],"url":"\/documentation\/composablearchitecture\/reducer\/foreach(_:action:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/forEach(_:action:)","kind":"symbol","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ImplementingTimer#Controlling-dependencies-early":{"abstract":[{"type":"text","text":"The first major piece of logic and behavior we will introduce to the record meeting feature is"},{"text":" ","type":"text"},{"type":"text","text":"the timer. This is a long-living effect that runs in parallel with the rest of the feature, and"},{"text":" ","type":"text"},{"type":"text","text":"we need to implement nuanced logic to figure out when to proceed to the next speaker."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ImplementingTimer#Controlling-dependencies-early","url":"\/tutorials\/composablearchitecture\/implementingtimer#Controlling-dependencies-early","kind":"section","title":"Controlling dependencies early","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps/Lists-of-sync-ups":{"abstract":[],"type":"topic","url":"\/tutorials\/buildingsyncups\/lists-of-sync-ups","kind":"article","title":"Lists of sync-ups","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps\/Lists-of-sync-ups","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#A-handy-debugging-tool":{"abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"type":"text","text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as"},{"text":" ","type":"text"},{"type":"text","text":"the app evolves."}],"type":"section","url":"\/tutorials\/composablearchitecture\/listsofsyncups#A-handy-debugging-tool","kind":"section","title":"A handy debugging tool","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#A-handy-debugging-tool","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/RecordMeetingFeature#Create-a-new-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/RecordMeetingFeature#Create-a-new-feature","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"Let’s get the basics of a new feature into place that we can navigate to, and then we will"},{"text":" ","type":"text"},{"text":"slowly layer on its complex logic and behavior, such as the timer and speech recognizer.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/recordmeetingfeature#Create-a-new-feature","title":"Create a new feature"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/TestingNavigation":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/TestingNavigation","type":"topic","role":"project","kind":"project","abstract":[{"type":"text","text":"We have now implemented a navigation stack at the root of our application, and integrated"},{"text":" ","type":"text"},{"text":"3 features into the stack: the ","type":"text"},{"code":"SyncUpsList","type":"codeVoice"},{"text":" feature, the ","type":"text"},{"type":"codeVoice","code":"SyncUpDetail"},{"type":"text","text":" feature, and the"},{"text":" ","type":"text"},{"code":"MeetingView","type":"codeVoice"},{"text":". Some of these features have quite complex logic binding them together, such as","type":"text"},{"type":"text","text":" "},{"text":"when one deletes a sync-up from the detail screen it should pop the screen off the stack.","type":"text"}],"estimatedTime":"10min","url":"\/tutorials\/composablearchitecture\/testingnavigation","title":"Testing navigation"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/ListsOfSyncUps#SyncUpsList-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/ListsOfSyncUps#SyncUpsList-feature","type":"section","role":"pseudoSymbol","kind":"section","abstract":[{"type":"text","text":"We will begin building the SyncUps app from scratch by implementing the feature that powers the"},{"text":" ","type":"text"},{"text":"list of sync-ups. It starts out as a simple feature, but it will become increasingly complex as","type":"text"},{"text":" ","type":"text"},{"text":"the app evolves.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/listsofsyncups#SyncUpsList-feature","title":"SyncUpsList feature"}}}